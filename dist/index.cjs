var du=Object.create;var Wn=Object.defineProperty;var su=Object.getOwnPropertyDescriptor;var mu=Object.getOwnPropertyNames;var uu=Object.getPrototypeOf,cu=Object.prototype.hasOwnProperty;var M=(a,n)=>()=>(n||a((n={exports:{}}).exports,n),n.exports),hu=(a,n)=>{for(var i in n)Wn(a,i,{get:n[i],enumerable:!0})},Qd=(a,n,i,p)=>{if(n&&typeof n=="object"||typeof n=="function")for(let l of mu(n))!cu.call(a,l)&&l!==i&&Wn(a,l,{get:()=>n[l],enumerable:!(p=su(n,l))||p.enumerable});return a};var e1=(a,n,i)=>(i=a!=null?du(uu(a)):{},Qd(n||!a||!a.__esModule?Wn(i,"default",{value:a,enumerable:!0}):i,a)),fu=a=>Qd(Wn({},"__esModule",{value:!0}),a);var es=M((L1,Dt)=>{(function(){var a,n="4.17.21",i=200,p="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",l="Expected a function",s="Invalid `variable` option passed into `_.template`",c="__lodash_hash_undefined__",f=500,h="__lodash_placeholder__",b=1,C=2,x=4,E=1,O=2,R=1,q=2,F=4,U=8,j=16,Q=32,ee=64,ae=128,be=256,ze=512,ot=30,o1="...",g0=800,v0=16,bl=1,y0=2,w0=3,d1=1/0,Fa=9007199254740991,b0=17976931348623157e292,Xt=NaN,ka=4294967295,_0=ka-1,k0=ka>>>1,C0=[["ary",ae],["bind",R],["bindKey",q],["curry",U],["curryRight",j],["flip",ze],["partial",Q],["partialRight",ee],["rearg",be]],T1="[object Arguments]",Qt="[object Array]",S0="[object AsyncFunction]",dt="[object Boolean]",st="[object Date]",T0="[object DOMException]",en="[object Error]",an="[object Function]",_l="[object GeneratorFunction]",ca="[object Map]",mt="[object Number]",x0="[object Null]",Aa="[object Object]",kl="[object Promise]",N0="[object Proxy]",ut="[object RegExp]",ha="[object Set]",ct="[object String]",tn="[object Symbol]",A0="[object Undefined]",ht="[object WeakMap]",P0="[object WeakSet]",ft="[object ArrayBuffer]",x1="[object DataView]",Ir="[object Float32Array]",Or="[object Float64Array]",zr="[object Int8Array]",Mr="[object Int16Array]",Vr="[object Int32Array]",jr="[object Uint8Array]",Br="[object Uint8ClampedArray]",Lr="[object Uint16Array]",qr="[object Uint32Array]",R0=/\b__p \+= '';/g,D0=/\b(__p \+=) '' \+/g,E0=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Cl=/&(?:amp|lt|gt|quot|#39);/g,Sl=/[&<>"']/g,I0=RegExp(Cl.source),O0=RegExp(Sl.source),z0=/<%-([\s\S]+?)%>/g,M0=/<%([\s\S]+?)%>/g,Tl=/<%=([\s\S]+?)%>/g,V0=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,j0=/^\w*$/,B0=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Ur=/[\\^$.*+?()[\]{}|]/g,L0=RegExp(Ur.source),Fr=/^\s+/,q0=/\s/,U0=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,F0=/\{\n\/\* \[wrapped with (.+)\] \*/,$0=/,? & /,K0=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,W0=/[()=,{}\[\]\/\s]/,H0=/\\(\\)?/g,G0=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,xl=/\w*$/,J0=/^[-+]0x[0-9a-f]+$/i,Y0=/^0b[01]+$/i,Z0=/^\[object .+?Constructor\]$/,X0=/^0o[0-7]+$/i,Q0=/^(?:0|[1-9]\d*)$/,em=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,nn=/($^)/,am=/['\n\r\u2028\u2029\\]/g,rn="\\ud800-\\udfff",tm="\\u0300-\\u036f",nm="\\ufe20-\\ufe2f",rm="\\u20d0-\\u20ff",Nl=tm+nm+rm,Al="\\u2700-\\u27bf",Pl="a-z\\xdf-\\xf6\\xf8-\\xff",im="\\xac\\xb1\\xd7\\xf7",pm="\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf",lm="\\u2000-\\u206f",om=" \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Rl="A-Z\\xc0-\\xd6\\xd8-\\xde",Dl="\\ufe0e\\ufe0f",El=im+pm+lm+om,$r="['\u2019]",dm="["+rn+"]",Il="["+El+"]",pn="["+Nl+"]",Ol="\\d+",sm="["+Al+"]",zl="["+Pl+"]",Ml="[^"+rn+El+Ol+Al+Pl+Rl+"]",Kr="\\ud83c[\\udffb-\\udfff]",mm="(?:"+pn+"|"+Kr+")",Vl="[^"+rn+"]",Wr="(?:\\ud83c[\\udde6-\\uddff]){2}",Hr="[\\ud800-\\udbff][\\udc00-\\udfff]",N1="["+Rl+"]",jl="\\u200d",Bl="(?:"+zl+"|"+Ml+")",um="(?:"+N1+"|"+Ml+")",Ll="(?:"+$r+"(?:d|ll|m|re|s|t|ve))?",ql="(?:"+$r+"(?:D|LL|M|RE|S|T|VE))?",Ul=mm+"?",Fl="["+Dl+"]?",cm="(?:"+jl+"(?:"+[Vl,Wr,Hr].join("|")+")"+Fl+Ul+")*",hm="\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",fm="\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])",$l=Fl+Ul+cm,gm="(?:"+[sm,Wr,Hr].join("|")+")"+$l,vm="(?:"+[Vl+pn+"?",pn,Wr,Hr,dm].join("|")+")",ym=RegExp($r,"g"),wm=RegExp(pn,"g"),Gr=RegExp(Kr+"(?="+Kr+")|"+vm+$l,"g"),bm=RegExp([N1+"?"+zl+"+"+Ll+"(?="+[Il,N1,"$"].join("|")+")",um+"+"+ql+"(?="+[Il,N1+Bl,"$"].join("|")+")",N1+"?"+Bl+"+"+Ll,N1+"+"+ql,fm,hm,Ol,gm].join("|"),"g"),_m=RegExp("["+jl+rn+Nl+Dl+"]"),km=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Cm=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Sm=-1,de={};de[Ir]=de[Or]=de[zr]=de[Mr]=de[Vr]=de[jr]=de[Br]=de[Lr]=de[qr]=!0,de[T1]=de[Qt]=de[ft]=de[dt]=de[x1]=de[st]=de[en]=de[an]=de[ca]=de[mt]=de[Aa]=de[ut]=de[ha]=de[ct]=de[ht]=!1;var le={};le[T1]=le[Qt]=le[ft]=le[x1]=le[dt]=le[st]=le[Ir]=le[Or]=le[zr]=le[Mr]=le[Vr]=le[ca]=le[mt]=le[Aa]=le[ut]=le[ha]=le[ct]=le[tn]=le[jr]=le[Br]=le[Lr]=le[qr]=!0,le[en]=le[an]=le[ht]=!1;var Tm={\u00C0:"A",\u00C1:"A",\u00C2:"A",\u00C3:"A",\u00C4:"A",\u00C5:"A",\u00E0:"a",\u00E1:"a",\u00E2:"a",\u00E3:"a",\u00E4:"a",\u00E5:"a",\u00C7:"C",\u00E7:"c",\u00D0:"D",\u00F0:"d",\u00C8:"E",\u00C9:"E",\u00CA:"E",\u00CB:"E",\u00E8:"e",\u00E9:"e",\u00EA:"e",\u00EB:"e",\u00CC:"I",\u00CD:"I",\u00CE:"I",\u00CF:"I",\u00EC:"i",\u00ED:"i",\u00EE:"i",\u00EF:"i",\u00D1:"N",\u00F1:"n",\u00D2:"O",\u00D3:"O",\u00D4:"O",\u00D5:"O",\u00D6:"O",\u00D8:"O",\u00F2:"o",\u00F3:"o",\u00F4:"o",\u00F5:"o",\u00F6:"o",\u00F8:"o",\u00D9:"U",\u00DA:"U",\u00DB:"U",\u00DC:"U",\u00F9:"u",\u00FA:"u",\u00FB:"u",\u00FC:"u",\u00DD:"Y",\u00FD:"y",\u00FF:"y",\u00C6:"Ae",\u00E6:"ae",\u00DE:"Th",\u00FE:"th",\u00DF:"ss",\u0100:"A",\u0102:"A",\u0104:"A",\u0101:"a",\u0103:"a",\u0105:"a",\u0106:"C",\u0108:"C",\u010A:"C",\u010C:"C",\u0107:"c",\u0109:"c",\u010B:"c",\u010D:"c",\u010E:"D",\u0110:"D",\u010F:"d",\u0111:"d",\u0112:"E",\u0114:"E",\u0116:"E",\u0118:"E",\u011A:"E",\u0113:"e",\u0115:"e",\u0117:"e",\u0119:"e",\u011B:"e",\u011C:"G",\u011E:"G",\u0120:"G",\u0122:"G",\u011D:"g",\u011F:"g",\u0121:"g",\u0123:"g",\u0124:"H",\u0126:"H",\u0125:"h",\u0127:"h",\u0128:"I",\u012A:"I",\u012C:"I",\u012E:"I",\u0130:"I",\u0129:"i",\u012B:"i",\u012D:"i",\u012F:"i",\u0131:"i",\u0134:"J",\u0135:"j",\u0136:"K",\u0137:"k",\u0138:"k",\u0139:"L",\u013B:"L",\u013D:"L",\u013F:"L",\u0141:"L",\u013A:"l",\u013C:"l",\u013E:"l",\u0140:"l",\u0142:"l",\u0143:"N",\u0145:"N",\u0147:"N",\u014A:"N",\u0144:"n",\u0146:"n",\u0148:"n",\u014B:"n",\u014C:"O",\u014E:"O",\u0150:"O",\u014D:"o",\u014F:"o",\u0151:"o",\u0154:"R",\u0156:"R",\u0158:"R",\u0155:"r",\u0157:"r",\u0159:"r",\u015A:"S",\u015C:"S",\u015E:"S",\u0160:"S",\u015B:"s",\u015D:"s",\u015F:"s",\u0161:"s",\u0162:"T",\u0164:"T",\u0166:"T",\u0163:"t",\u0165:"t",\u0167:"t",\u0168:"U",\u016A:"U",\u016C:"U",\u016E:"U",\u0170:"U",\u0172:"U",\u0169:"u",\u016B:"u",\u016D:"u",\u016F:"u",\u0171:"u",\u0173:"u",\u0174:"W",\u0175:"w",\u0176:"Y",\u0177:"y",\u0178:"Y",\u0179:"Z",\u017B:"Z",\u017D:"Z",\u017A:"z",\u017C:"z",\u017E:"z",\u0132:"IJ",\u0133:"ij",\u0152:"Oe",\u0153:"oe",\u0149:"'n",\u017F:"s"},xm={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},Nm={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"},Am={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Pm=parseFloat,Rm=parseInt,Kl=typeof global=="object"&&global&&global.Object===Object&&global,Dm=typeof self=="object"&&self&&self.Object===Object&&self,Te=Kl||Dm||Function("return this")(),Jr=typeof L1=="object"&&L1&&!L1.nodeType&&L1,s1=Jr&&typeof Dt=="object"&&Dt&&!Dt.nodeType&&Dt,Wl=s1&&s1.exports===Jr,Yr=Wl&&Kl.process,ea=function(){try{var y=s1&&s1.require&&s1.require("util").types;return y||Yr&&Yr.binding&&Yr.binding("util")}catch{}}(),Hl=ea&&ea.isArrayBuffer,Gl=ea&&ea.isDate,Jl=ea&&ea.isMap,Yl=ea&&ea.isRegExp,Zl=ea&&ea.isSet,Xl=ea&&ea.isTypedArray;function Ke(y,k,_){switch(_.length){case 0:return y.call(k);case 1:return y.call(k,_[0]);case 2:return y.call(k,_[0],_[1]);case 3:return y.call(k,_[0],_[1],_[2])}return y.apply(k,_)}function Em(y,k,_,D){for(var $=-1,te=y==null?0:y.length;++$<te;){var ke=y[$];k(D,ke,_(ke),y)}return D}function aa(y,k){for(var _=-1,D=y==null?0:y.length;++_<D&&k(y[_],_,y)!==!1;);return y}function Im(y,k){for(var _=y==null?0:y.length;_--&&k(y[_],_,y)!==!1;);return y}function Ql(y,k){for(var _=-1,D=y==null?0:y.length;++_<D;)if(!k(y[_],_,y))return!1;return!0}function $a(y,k){for(var _=-1,D=y==null?0:y.length,$=0,te=[];++_<D;){var ke=y[_];k(ke,_,y)&&(te[$++]=ke)}return te}function ln(y,k){var _=y==null?0:y.length;return!!_&&A1(y,k,0)>-1}function Zr(y,k,_){for(var D=-1,$=y==null?0:y.length;++D<$;)if(_(k,y[D]))return!0;return!1}function se(y,k){for(var _=-1,D=y==null?0:y.length,$=Array(D);++_<D;)$[_]=k(y[_],_,y);return $}function Ka(y,k){for(var _=-1,D=k.length,$=y.length;++_<D;)y[$+_]=k[_];return y}function Xr(y,k,_,D){var $=-1,te=y==null?0:y.length;for(D&&te&&(_=y[++$]);++$<te;)_=k(_,y[$],$,y);return _}function Om(y,k,_,D){var $=y==null?0:y.length;for(D&&$&&(_=y[--$]);$--;)_=k(_,y[$],$,y);return _}function Qr(y,k){for(var _=-1,D=y==null?0:y.length;++_<D;)if(k(y[_],_,y))return!0;return!1}var zm=ei("length");function Mm(y){return y.split("")}function Vm(y){return y.match(K0)||[]}function eo(y,k,_){var D;return _(y,function($,te,ke){if(k($,te,ke))return D=te,!1}),D}function on(y,k,_,D){for(var $=y.length,te=_+(D?1:-1);D?te--:++te<$;)if(k(y[te],te,y))return te;return-1}function A1(y,k,_){return k===k?Jm(y,k,_):on(y,ao,_)}function jm(y,k,_,D){for(var $=_-1,te=y.length;++$<te;)if(D(y[$],k))return $;return-1}function ao(y){return y!==y}function to(y,k){var _=y==null?0:y.length;return _?ti(y,k)/_:Xt}function ei(y){return function(k){return k==null?a:k[y]}}function ai(y){return function(k){return y==null?a:y[k]}}function no(y,k,_,D,$){return $(y,function(te,ke,ie){_=D?(D=!1,te):k(_,te,ke,ie)}),_}function Bm(y,k){var _=y.length;for(y.sort(k);_--;)y[_]=y[_].value;return y}function ti(y,k){for(var _,D=-1,$=y.length;++D<$;){var te=k(y[D]);te!==a&&(_=_===a?te:_+te)}return _}function ni(y,k){for(var _=-1,D=Array(y);++_<y;)D[_]=k(_);return D}function Lm(y,k){return se(k,function(_){return[_,y[_]]})}function ro(y){return y&&y.slice(0,oo(y)+1).replace(Fr,"")}function We(y){return function(k){return y(k)}}function ri(y,k){return se(k,function(_){return y[_]})}function gt(y,k){return y.has(k)}function io(y,k){for(var _=-1,D=y.length;++_<D&&A1(k,y[_],0)>-1;);return _}function po(y,k){for(var _=y.length;_--&&A1(k,y[_],0)>-1;);return _}function qm(y,k){for(var _=y.length,D=0;_--;)y[_]===k&&++D;return D}var Um=ai(Tm),Fm=ai(xm);function $m(y){return"\\"+Am[y]}function Km(y,k){return y==null?a:y[k]}function P1(y){return _m.test(y)}function Wm(y){return km.test(y)}function Hm(y){for(var k,_=[];!(k=y.next()).done;)_.push(k.value);return _}function ii(y){var k=-1,_=Array(y.size);return y.forEach(function(D,$){_[++k]=[$,D]}),_}function lo(y,k){return function(_){return y(k(_))}}function Wa(y,k){for(var _=-1,D=y.length,$=0,te=[];++_<D;){var ke=y[_];(ke===k||ke===h)&&(y[_]=h,te[$++]=_)}return te}function dn(y){var k=-1,_=Array(y.size);return y.forEach(function(D){_[++k]=D}),_}function Gm(y){var k=-1,_=Array(y.size);return y.forEach(function(D){_[++k]=[D,D]}),_}function Jm(y,k,_){for(var D=_-1,$=y.length;++D<$;)if(y[D]===k)return D;return-1}function Ym(y,k,_){for(var D=_+1;D--;)if(y[D]===k)return D;return D}function R1(y){return P1(y)?Xm(y):zm(y)}function fa(y){return P1(y)?Qm(y):Mm(y)}function oo(y){for(var k=y.length;k--&&q0.test(y.charAt(k)););return k}var Zm=ai(Nm);function Xm(y){for(var k=Gr.lastIndex=0;Gr.test(y);)++k;return k}function Qm(y){return y.match(Gr)||[]}function e4(y){return y.match(bm)||[]}var a4=function y(k){k=k==null?Te:Ha.defaults(Te.Object(),k,Ha.pick(Te,Cm));var _=k.Array,D=k.Date,$=k.Error,te=k.Function,ke=k.Math,ie=k.Object,pi=k.RegExp,t4=k.String,ta=k.TypeError,sn=_.prototype,n4=te.prototype,D1=ie.prototype,mn=k["__core-js_shared__"],un=n4.toString,re=D1.hasOwnProperty,r4=0,so=function(){var e=/[^.]+$/.exec(mn&&mn.keys&&mn.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}(),cn=D1.toString,i4=un.call(ie),p4=Te._,l4=pi("^"+un.call(re).replace(Ur,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),hn=Wl?k.Buffer:a,Ga=k.Symbol,fn=k.Uint8Array,mo=hn?hn.allocUnsafe:a,gn=lo(ie.getPrototypeOf,ie),uo=ie.create,co=D1.propertyIsEnumerable,vn=sn.splice,ho=Ga?Ga.isConcatSpreadable:a,vt=Ga?Ga.iterator:a,m1=Ga?Ga.toStringTag:a,yn=function(){try{var e=g1(ie,"defineProperty");return e({},"",{}),e}catch{}}(),o4=k.clearTimeout!==Te.clearTimeout&&k.clearTimeout,d4=D&&D.now!==Te.Date.now&&D.now,s4=k.setTimeout!==Te.setTimeout&&k.setTimeout,wn=ke.ceil,bn=ke.floor,li=ie.getOwnPropertySymbols,m4=hn?hn.isBuffer:a,fo=k.isFinite,u4=sn.join,c4=lo(ie.keys,ie),Ce=ke.max,De=ke.min,h4=D.now,f4=k.parseInt,go=ke.random,g4=sn.reverse,oi=g1(k,"DataView"),yt=g1(k,"Map"),di=g1(k,"Promise"),E1=g1(k,"Set"),wt=g1(k,"WeakMap"),bt=g1(ie,"create"),_n=wt&&new wt,I1={},v4=v1(oi),y4=v1(yt),w4=v1(di),b4=v1(E1),_4=v1(wt),kn=Ga?Ga.prototype:a,_t=kn?kn.valueOf:a,vo=kn?kn.toString:a;function m(e){if(ce(e)&&!K(e)&&!(e instanceof Z)){if(e instanceof na)return e;if(re.call(e,"__wrapped__"))return yd(e)}return new na(e)}var O1=function(){function e(){}return function(t){if(!ue(t))return{};if(uo)return uo(t);e.prototype=t;var r=new e;return e.prototype=a,r}}();function Cn(){}function na(e,t){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=a}m.templateSettings={escape:z0,evaluate:M0,interpolate:Tl,variable:"",imports:{_:m}},m.prototype=Cn.prototype,m.prototype.constructor=m,na.prototype=O1(Cn.prototype),na.prototype.constructor=na;function Z(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=ka,this.__views__=[]}function k4(){var e=new Z(this.__wrapped__);return e.__actions__=Le(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=Le(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=Le(this.__views__),e}function C4(){if(this.__filtered__){var e=new Z(this);e.__dir__=-1,e.__filtered__=!0}else e=this.clone(),e.__dir__*=-1;return e}function S4(){var e=this.__wrapped__.value(),t=this.__dir__,r=K(e),o=t<0,d=r?e.length:0,u=M6(0,d,this.__views__),g=u.start,v=u.end,w=v-g,S=o?v:g-1,T=this.__iteratees__,N=T.length,A=0,I=De(w,this.__takeCount__);if(!r||!o&&d==w&&I==w)return qo(e,this.__actions__);var B=[];e:for(;w--&&A<I;){S+=t;for(var H=-1,L=e[S];++H<N;){var J=T[H],X=J.iteratee,Je=J.type,je=X(L);if(Je==y0)L=je;else if(!je){if(Je==bl)continue e;break e}}B[A++]=L}return B}Z.prototype=O1(Cn.prototype),Z.prototype.constructor=Z;function u1(e){var t=-1,r=e==null?0:e.length;for(this.clear();++t<r;){var o=e[t];this.set(o[0],o[1])}}function T4(){this.__data__=bt?bt(null):{},this.size=0}function x4(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}function N4(e){var t=this.__data__;if(bt){var r=t[e];return r===c?a:r}return re.call(t,e)?t[e]:a}function A4(e){var t=this.__data__;return bt?t[e]!==a:re.call(t,e)}function P4(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=bt&&t===a?c:t,this}u1.prototype.clear=T4,u1.prototype.delete=x4,u1.prototype.get=N4,u1.prototype.has=A4,u1.prototype.set=P4;function Pa(e){var t=-1,r=e==null?0:e.length;for(this.clear();++t<r;){var o=e[t];this.set(o[0],o[1])}}function R4(){this.__data__=[],this.size=0}function D4(e){var t=this.__data__,r=Sn(t,e);if(r<0)return!1;var o=t.length-1;return r==o?t.pop():vn.call(t,r,1),--this.size,!0}function E4(e){var t=this.__data__,r=Sn(t,e);return r<0?a:t[r][1]}function I4(e){return Sn(this.__data__,e)>-1}function O4(e,t){var r=this.__data__,o=Sn(r,e);return o<0?(++this.size,r.push([e,t])):r[o][1]=t,this}Pa.prototype.clear=R4,Pa.prototype.delete=D4,Pa.prototype.get=E4,Pa.prototype.has=I4,Pa.prototype.set=O4;function Ra(e){var t=-1,r=e==null?0:e.length;for(this.clear();++t<r;){var o=e[t];this.set(o[0],o[1])}}function z4(){this.size=0,this.__data__={hash:new u1,map:new(yt||Pa),string:new u1}}function M4(e){var t=Mn(this,e).delete(e);return this.size-=t?1:0,t}function V4(e){return Mn(this,e).get(e)}function j4(e){return Mn(this,e).has(e)}function B4(e,t){var r=Mn(this,e),o=r.size;return r.set(e,t),this.size+=r.size==o?0:1,this}Ra.prototype.clear=z4,Ra.prototype.delete=M4,Ra.prototype.get=V4,Ra.prototype.has=j4,Ra.prototype.set=B4;function c1(e){var t=-1,r=e==null?0:e.length;for(this.__data__=new Ra;++t<r;)this.add(e[t])}function L4(e){return this.__data__.set(e,c),this}function q4(e){return this.__data__.has(e)}c1.prototype.add=c1.prototype.push=L4,c1.prototype.has=q4;function ga(e){var t=this.__data__=new Pa(e);this.size=t.size}function U4(){this.__data__=new Pa,this.size=0}function F4(e){var t=this.__data__,r=t.delete(e);return this.size=t.size,r}function $4(e){return this.__data__.get(e)}function K4(e){return this.__data__.has(e)}function W4(e,t){var r=this.__data__;if(r instanceof Pa){var o=r.__data__;if(!yt||o.length<i-1)return o.push([e,t]),this.size=++r.size,this;r=this.__data__=new Ra(o)}return r.set(e,t),this.size=r.size,this}ga.prototype.clear=U4,ga.prototype.delete=F4,ga.prototype.get=$4,ga.prototype.has=K4,ga.prototype.set=W4;function yo(e,t){var r=K(e),o=!r&&y1(e),d=!r&&!o&&Qa(e),u=!r&&!o&&!d&&j1(e),g=r||o||d||u,v=g?ni(e.length,t4):[],w=v.length;for(var S in e)(t||re.call(e,S))&&!(g&&(S=="length"||d&&(S=="offset"||S=="parent")||u&&(S=="buffer"||S=="byteLength"||S=="byteOffset")||Oa(S,w)))&&v.push(S);return v}function wo(e){var t=e.length;return t?e[bi(0,t-1)]:a}function H4(e,t){return Vn(Le(e),h1(t,0,e.length))}function G4(e){return Vn(Le(e))}function si(e,t,r){(r!==a&&!va(e[t],r)||r===a&&!(t in e))&&Da(e,t,r)}function kt(e,t,r){var o=e[t];(!(re.call(e,t)&&va(o,r))||r===a&&!(t in e))&&Da(e,t,r)}function Sn(e,t){for(var r=e.length;r--;)if(va(e[r][0],t))return r;return-1}function J4(e,t,r,o){return Ja(e,function(d,u,g){t(o,d,r(d),g)}),o}function bo(e,t){return e&&Sa(t,xe(t),e)}function Y4(e,t){return e&&Sa(t,Ue(t),e)}function Da(e,t,r){t=="__proto__"&&yn?yn(e,t,{configurable:!0,enumerable:!0,value:r,writable:!0}):e[t]=r}function mi(e,t){for(var r=-1,o=t.length,d=_(o),u=e==null;++r<o;)d[r]=u?a:Ki(e,t[r]);return d}function h1(e,t,r){return e===e&&(r!==a&&(e=e<=r?e:r),t!==a&&(e=e>=t?e:t)),e}function ra(e,t,r,o,d,u){var g,v=t&b,w=t&C,S=t&x;if(r&&(g=d?r(e,o,d,u):r(e)),g!==a)return g;if(!ue(e))return e;var T=K(e);if(T){if(g=j6(e),!v)return Le(e,g)}else{var N=Ee(e),A=N==an||N==_l;if(Qa(e))return $o(e,v);if(N==Aa||N==T1||A&&!d){if(g=w||A?{}:dd(e),!v)return w?N6(e,Y4(g,e)):x6(e,bo(g,e))}else{if(!le[N])return d?e:{};g=B6(e,N,v)}}u||(u=new ga);var I=u.get(e);if(I)return I;u.set(e,g),jd(e)?e.forEach(function(L){g.add(ra(L,t,r,L,e,u))}):Md(e)&&e.forEach(function(L,J){g.set(J,ra(L,t,r,J,e,u))});var B=S?w?Di:Ri:w?Ue:xe,H=T?a:B(e);return aa(H||e,function(L,J){H&&(J=L,L=e[J]),kt(g,J,ra(L,t,r,J,e,u))}),g}function Z4(e){var t=xe(e);return function(r){return _o(r,e,t)}}function _o(e,t,r){var o=r.length;if(e==null)return!o;for(e=ie(e);o--;){var d=r[o],u=t[d],g=e[d];if(g===a&&!(d in e)||!u(g))return!1}return!0}function ko(e,t,r){if(typeof e!="function")throw new ta(l);return Pt(function(){e.apply(a,r)},t)}function Ct(e,t,r,o){var d=-1,u=ln,g=!0,v=e.length,w=[],S=t.length;if(!v)return w;r&&(t=se(t,We(r))),o?(u=Zr,g=!1):t.length>=i&&(u=gt,g=!1,t=new c1(t));e:for(;++d<v;){var T=e[d],N=r==null?T:r(T);if(T=o||T!==0?T:0,g&&N===N){for(var A=S;A--;)if(t[A]===N)continue e;w.push(T)}else u(t,N,o)||w.push(T)}return w}var Ja=Jo(Ca),Co=Jo(ci,!0);function X4(e,t){var r=!0;return Ja(e,function(o,d,u){return r=!!t(o,d,u),r}),r}function Tn(e,t,r){for(var o=-1,d=e.length;++o<d;){var u=e[o],g=t(u);if(g!=null&&(v===a?g===g&&!Ge(g):r(g,v)))var v=g,w=u}return w}function Q4(e,t,r,o){var d=e.length;for(r=W(r),r<0&&(r=-r>d?0:d+r),o=o===a||o>d?d:W(o),o<0&&(o+=d),o=r>o?0:Ld(o);r<o;)e[r++]=t;return e}function So(e,t){var r=[];return Ja(e,function(o,d,u){t(o,d,u)&&r.push(o)}),r}function Pe(e,t,r,o,d){var u=-1,g=e.length;for(r||(r=q6),d||(d=[]);++u<g;){var v=e[u];t>0&&r(v)?t>1?Pe(v,t-1,r,o,d):Ka(d,v):o||(d[d.length]=v)}return d}var ui=Yo(),To=Yo(!0);function Ca(e,t){return e&&ui(e,t,xe)}function ci(e,t){return e&&To(e,t,xe)}function xn(e,t){return $a(t,function(r){return za(e[r])})}function f1(e,t){t=Za(t,e);for(var r=0,o=t.length;e!=null&&r<o;)e=e[Ta(t[r++])];return r&&r==o?e:a}function xo(e,t,r){var o=t(e);return K(e)?o:Ka(o,r(e))}function Me(e){return e==null?e===a?A0:x0:m1&&m1 in ie(e)?z6(e):G6(e)}function hi(e,t){return e>t}function e6(e,t){return e!=null&&re.call(e,t)}function a6(e,t){return e!=null&&t in ie(e)}function t6(e,t,r){return e>=De(t,r)&&e<Ce(t,r)}function fi(e,t,r){for(var o=r?Zr:ln,d=e[0].length,u=e.length,g=u,v=_(u),w=1/0,S=[];g--;){var T=e[g];g&&t&&(T=se(T,We(t))),w=De(T.length,w),v[g]=!r&&(t||d>=120&&T.length>=120)?new c1(g&&T):a}T=e[0];var N=-1,A=v[0];e:for(;++N<d&&S.length<w;){var I=T[N],B=t?t(I):I;if(I=r||I!==0?I:0,!(A?gt(A,B):o(S,B,r))){for(g=u;--g;){var H=v[g];if(!(H?gt(H,B):o(e[g],B,r)))continue e}A&&A.push(B),S.push(I)}}return S}function n6(e,t,r,o){return Ca(e,function(d,u,g){t(o,r(d),u,g)}),o}function St(e,t,r){t=Za(t,e),e=cd(e,t);var o=e==null?e:e[Ta(pa(t))];return o==null?a:Ke(o,e,r)}function No(e){return ce(e)&&Me(e)==T1}function r6(e){return ce(e)&&Me(e)==ft}function i6(e){return ce(e)&&Me(e)==st}function Tt(e,t,r,o,d){return e===t?!0:e==null||t==null||!ce(e)&&!ce(t)?e!==e&&t!==t:p6(e,t,r,o,Tt,d)}function p6(e,t,r,o,d,u){var g=K(e),v=K(t),w=g?Qt:Ee(e),S=v?Qt:Ee(t);w=w==T1?Aa:w,S=S==T1?Aa:S;var T=w==Aa,N=S==Aa,A=w==S;if(A&&Qa(e)){if(!Qa(t))return!1;g=!0,T=!1}if(A&&!T)return u||(u=new ga),g||j1(e)?pd(e,t,r,o,d,u):I6(e,t,w,r,o,d,u);if(!(r&E)){var I=T&&re.call(e,"__wrapped__"),B=N&&re.call(t,"__wrapped__");if(I||B){var H=I?e.value():e,L=B?t.value():t;return u||(u=new ga),d(H,L,r,o,u)}}return A?(u||(u=new ga),O6(e,t,r,o,d,u)):!1}function l6(e){return ce(e)&&Ee(e)==ca}function gi(e,t,r,o){var d=r.length,u=d,g=!o;if(e==null)return!u;for(e=ie(e);d--;){var v=r[d];if(g&&v[2]?v[1]!==e[v[0]]:!(v[0]in e))return!1}for(;++d<u;){v=r[d];var w=v[0],S=e[w],T=v[1];if(g&&v[2]){if(S===a&&!(w in e))return!1}else{var N=new ga;if(o)var A=o(S,T,w,e,t,N);if(!(A===a?Tt(T,S,E|O,o,N):A))return!1}}return!0}function Ao(e){if(!ue(e)||F6(e))return!1;var t=za(e)?l4:Z0;return t.test(v1(e))}function o6(e){return ce(e)&&Me(e)==ut}function d6(e){return ce(e)&&Ee(e)==ha}function s6(e){return ce(e)&&Fn(e.length)&&!!de[Me(e)]}function Po(e){return typeof e=="function"?e:e==null?Fe:typeof e=="object"?K(e)?Eo(e[0],e[1]):Do(e):Zd(e)}function vi(e){if(!At(e))return c4(e);var t=[];for(var r in ie(e))re.call(e,r)&&r!="constructor"&&t.push(r);return t}function m6(e){if(!ue(e))return H6(e);var t=At(e),r=[];for(var o in e)o=="constructor"&&(t||!re.call(e,o))||r.push(o);return r}function yi(e,t){return e<t}function Ro(e,t){var r=-1,o=qe(e)?_(e.length):[];return Ja(e,function(d,u,g){o[++r]=t(d,u,g)}),o}function Do(e){var t=Ii(e);return t.length==1&&t[0][2]?md(t[0][0],t[0][1]):function(r){return r===e||gi(r,e,t)}}function Eo(e,t){return zi(e)&&sd(t)?md(Ta(e),t):function(r){var o=Ki(r,e);return o===a&&o===t?Wi(r,e):Tt(t,o,E|O)}}function Nn(e,t,r,o,d){e!==t&&ui(t,function(u,g){if(d||(d=new ga),ue(u))u6(e,t,g,r,Nn,o,d);else{var v=o?o(Vi(e,g),u,g+"",e,t,d):a;v===a&&(v=u),si(e,g,v)}},Ue)}function u6(e,t,r,o,d,u,g){var v=Vi(e,r),w=Vi(t,r),S=g.get(w);if(S){si(e,r,S);return}var T=u?u(v,w,r+"",e,t,g):a,N=T===a;if(N){var A=K(w),I=!A&&Qa(w),B=!A&&!I&&j1(w);T=w,A||I||B?K(v)?T=v:ve(v)?T=Le(v):I?(N=!1,T=$o(w,!0)):B?(N=!1,T=Ko(w,!0)):T=[]:Rt(w)||y1(w)?(T=v,y1(v)?T=qd(v):(!ue(v)||za(v))&&(T=dd(w))):N=!1}N&&(g.set(w,T),d(T,w,o,u,g),g.delete(w)),si(e,r,T)}function Io(e,t){var r=e.length;if(r)return t+=t<0?r:0,Oa(t,r)?e[t]:a}function Oo(e,t,r){t.length?t=se(t,function(u){return K(u)?function(g){return f1(g,u.length===1?u[0]:u)}:u}):t=[Fe];var o=-1;t=se(t,We(V()));var d=Ro(e,function(u,g,v){var w=se(t,function(S){return S(u)});return{criteria:w,index:++o,value:u}});return Bm(d,function(u,g){return T6(u,g,r)})}function c6(e,t){return zo(e,t,function(r,o){return Wi(e,o)})}function zo(e,t,r){for(var o=-1,d=t.length,u={};++o<d;){var g=t[o],v=f1(e,g);r(v,g)&&xt(u,Za(g,e),v)}return u}function h6(e){return function(t){return f1(t,e)}}function wi(e,t,r,o){var d=o?jm:A1,u=-1,g=t.length,v=e;for(e===t&&(t=Le(t)),r&&(v=se(e,We(r)));++u<g;)for(var w=0,S=t[u],T=r?r(S):S;(w=d(v,T,w,o))>-1;)v!==e&&vn.call(v,w,1),vn.call(e,w,1);return e}function Mo(e,t){for(var r=e?t.length:0,o=r-1;r--;){var d=t[r];if(r==o||d!==u){var u=d;Oa(d)?vn.call(e,d,1):Ci(e,d)}}return e}function bi(e,t){return e+bn(go()*(t-e+1))}function f6(e,t,r,o){for(var d=-1,u=Ce(wn((t-e)/(r||1)),0),g=_(u);u--;)g[o?u:++d]=e,e+=r;return g}function _i(e,t){var r="";if(!e||t<1||t>Fa)return r;do t%2&&(r+=e),t=bn(t/2),t&&(e+=e);while(t);return r}function G(e,t){return ji(ud(e,t,Fe),e+"")}function g6(e){return wo(B1(e))}function v6(e,t){var r=B1(e);return Vn(r,h1(t,0,r.length))}function xt(e,t,r,o){if(!ue(e))return e;t=Za(t,e);for(var d=-1,u=t.length,g=u-1,v=e;v!=null&&++d<u;){var w=Ta(t[d]),S=r;if(w==="__proto__"||w==="constructor"||w==="prototype")return e;if(d!=g){var T=v[w];S=o?o(T,w,v):a,S===a&&(S=ue(T)?T:Oa(t[d+1])?[]:{})}kt(v,w,S),v=v[w]}return e}var Vo=_n?function(e,t){return _n.set(e,t),e}:Fe,y6=yn?function(e,t){return yn(e,"toString",{configurable:!0,enumerable:!1,value:Gi(t),writable:!0})}:Fe;function w6(e){return Vn(B1(e))}function ia(e,t,r){var o=-1,d=e.length;t<0&&(t=-t>d?0:d+t),r=r>d?d:r,r<0&&(r+=d),d=t>r?0:r-t>>>0,t>>>=0;for(var u=_(d);++o<d;)u[o]=e[o+t];return u}function b6(e,t){var r;return Ja(e,function(o,d,u){return r=t(o,d,u),!r}),!!r}function An(e,t,r){var o=0,d=e==null?o:e.length;if(typeof t=="number"&&t===t&&d<=k0){for(;o<d;){var u=o+d>>>1,g=e[u];g!==null&&!Ge(g)&&(r?g<=t:g<t)?o=u+1:d=u}return d}return ki(e,t,Fe,r)}function ki(e,t,r,o){var d=0,u=e==null?0:e.length;if(u===0)return 0;t=r(t);for(var g=t!==t,v=t===null,w=Ge(t),S=t===a;d<u;){var T=bn((d+u)/2),N=r(e[T]),A=N!==a,I=N===null,B=N===N,H=Ge(N);if(g)var L=o||B;else S?L=B&&(o||A):v?L=B&&A&&(o||!I):w?L=B&&A&&!I&&(o||!H):I||H?L=!1:L=o?N<=t:N<t;L?d=T+1:u=T}return De(u,_0)}function jo(e,t){for(var r=-1,o=e.length,d=0,u=[];++r<o;){var g=e[r],v=t?t(g):g;if(!r||!va(v,w)){var w=v;u[d++]=g===0?0:g}}return u}function Bo(e){return typeof e=="number"?e:Ge(e)?Xt:+e}function He(e){if(typeof e=="string")return e;if(K(e))return se(e,He)+"";if(Ge(e))return vo?vo.call(e):"";var t=e+"";return t=="0"&&1/e==-d1?"-0":t}function Ya(e,t,r){var o=-1,d=ln,u=e.length,g=!0,v=[],w=v;if(r)g=!1,d=Zr;else if(u>=i){var S=t?null:D6(e);if(S)return dn(S);g=!1,d=gt,w=new c1}else w=t?[]:v;e:for(;++o<u;){var T=e[o],N=t?t(T):T;if(T=r||T!==0?T:0,g&&N===N){for(var A=w.length;A--;)if(w[A]===N)continue e;t&&w.push(N),v.push(T)}else d(w,N,r)||(w!==v&&w.push(N),v.push(T))}return v}function Ci(e,t){return t=Za(t,e),e=cd(e,t),e==null||delete e[Ta(pa(t))]}function Lo(e,t,r,o){return xt(e,t,r(f1(e,t)),o)}function Pn(e,t,r,o){for(var d=e.length,u=o?d:-1;(o?u--:++u<d)&&t(e[u],u,e););return r?ia(e,o?0:u,o?u+1:d):ia(e,o?u+1:0,o?d:u)}function qo(e,t){var r=e;return r instanceof Z&&(r=r.value()),Xr(t,function(o,d){return d.func.apply(d.thisArg,Ka([o],d.args))},r)}function Si(e,t,r){var o=e.length;if(o<2)return o?Ya(e[0]):[];for(var d=-1,u=_(o);++d<o;)for(var g=e[d],v=-1;++v<o;)v!=d&&(u[d]=Ct(u[d]||g,e[v],t,r));return Ya(Pe(u,1),t,r)}function Uo(e,t,r){for(var o=-1,d=e.length,u=t.length,g={};++o<d;){var v=o<u?t[o]:a;r(g,e[o],v)}return g}function Ti(e){return ve(e)?e:[]}function xi(e){return typeof e=="function"?e:Fe}function Za(e,t){return K(e)?e:zi(e,t)?[e]:vd(ne(e))}var _6=G;function Xa(e,t,r){var o=e.length;return r=r===a?o:r,!t&&r>=o?e:ia(e,t,r)}var Fo=o4||function(e){return Te.clearTimeout(e)};function $o(e,t){if(t)return e.slice();var r=e.length,o=mo?mo(r):new e.constructor(r);return e.copy(o),o}function Ni(e){var t=new e.constructor(e.byteLength);return new fn(t).set(new fn(e)),t}function k6(e,t){var r=t?Ni(e.buffer):e.buffer;return new e.constructor(r,e.byteOffset,e.byteLength)}function C6(e){var t=new e.constructor(e.source,xl.exec(e));return t.lastIndex=e.lastIndex,t}function S6(e){return _t?ie(_t.call(e)):{}}function Ko(e,t){var r=t?Ni(e.buffer):e.buffer;return new e.constructor(r,e.byteOffset,e.length)}function Wo(e,t){if(e!==t){var r=e!==a,o=e===null,d=e===e,u=Ge(e),g=t!==a,v=t===null,w=t===t,S=Ge(t);if(!v&&!S&&!u&&e>t||u&&g&&w&&!v&&!S||o&&g&&w||!r&&w||!d)return 1;if(!o&&!u&&!S&&e<t||S&&r&&d&&!o&&!u||v&&r&&d||!g&&d||!w)return-1}return 0}function T6(e,t,r){for(var o=-1,d=e.criteria,u=t.criteria,g=d.length,v=r.length;++o<g;){var w=Wo(d[o],u[o]);if(w){if(o>=v)return w;var S=r[o];return w*(S=="desc"?-1:1)}}return e.index-t.index}function Ho(e,t,r,o){for(var d=-1,u=e.length,g=r.length,v=-1,w=t.length,S=Ce(u-g,0),T=_(w+S),N=!o;++v<w;)T[v]=t[v];for(;++d<g;)(N||d<u)&&(T[r[d]]=e[d]);for(;S--;)T[v++]=e[d++];return T}function Go(e,t,r,o){for(var d=-1,u=e.length,g=-1,v=r.length,w=-1,S=t.length,T=Ce(u-v,0),N=_(T+S),A=!o;++d<T;)N[d]=e[d];for(var I=d;++w<S;)N[I+w]=t[w];for(;++g<v;)(A||d<u)&&(N[I+r[g]]=e[d++]);return N}function Le(e,t){var r=-1,o=e.length;for(t||(t=_(o));++r<o;)t[r]=e[r];return t}function Sa(e,t,r,o){var d=!r;r||(r={});for(var u=-1,g=t.length;++u<g;){var v=t[u],w=o?o(r[v],e[v],v,r,e):a;w===a&&(w=e[v]),d?Da(r,v,w):kt(r,v,w)}return r}function x6(e,t){return Sa(e,Oi(e),t)}function N6(e,t){return Sa(e,ld(e),t)}function Rn(e,t){return function(r,o){var d=K(r)?Em:J4,u=t?t():{};return d(r,e,V(o,2),u)}}function z1(e){return G(function(t,r){var o=-1,d=r.length,u=d>1?r[d-1]:a,g=d>2?r[2]:a;for(u=e.length>3&&typeof u=="function"?(d--,u):a,g&&Ve(r[0],r[1],g)&&(u=d<3?a:u,d=1),t=ie(t);++o<d;){var v=r[o];v&&e(t,v,o,u)}return t})}function Jo(e,t){return function(r,o){if(r==null)return r;if(!qe(r))return e(r,o);for(var d=r.length,u=t?d:-1,g=ie(r);(t?u--:++u<d)&&o(g[u],u,g)!==!1;);return r}}function Yo(e){return function(t,r,o){for(var d=-1,u=ie(t),g=o(t),v=g.length;v--;){var w=g[e?v:++d];if(r(u[w],w,u)===!1)break}return t}}function A6(e,t,r){var o=t&R,d=Nt(e);function u(){var g=this&&this!==Te&&this instanceof u?d:e;return g.apply(o?r:this,arguments)}return u}function Zo(e){return function(t){t=ne(t);var r=P1(t)?fa(t):a,o=r?r[0]:t.charAt(0),d=r?Xa(r,1).join(""):t.slice(1);return o[e]()+d}}function M1(e){return function(t){return Xr(Jd(Gd(t).replace(ym,"")),e,"")}}function Nt(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var r=O1(e.prototype),o=e.apply(r,t);return ue(o)?o:r}}function P6(e,t,r){var o=Nt(e);function d(){for(var u=arguments.length,g=_(u),v=u,w=V1(d);v--;)g[v]=arguments[v];var S=u<3&&g[0]!==w&&g[u-1]!==w?[]:Wa(g,w);if(u-=S.length,u<r)return td(e,t,Dn,d.placeholder,a,g,S,a,a,r-u);var T=this&&this!==Te&&this instanceof d?o:e;return Ke(T,this,g)}return d}function Xo(e){return function(t,r,o){var d=ie(t);if(!qe(t)){var u=V(r,3);t=xe(t),r=function(v){return u(d[v],v,d)}}var g=e(t,r,o);return g>-1?d[u?t[g]:g]:a}}function Qo(e){return Ia(function(t){var r=t.length,o=r,d=na.prototype.thru;for(e&&t.reverse();o--;){var u=t[o];if(typeof u!="function")throw new ta(l);if(d&&!g&&zn(u)=="wrapper")var g=new na([],!0)}for(o=g?o:r;++o<r;){u=t[o];var v=zn(u),w=v=="wrapper"?Ei(u):a;w&&Mi(w[0])&&w[1]==(ae|U|Q|be)&&!w[4].length&&w[9]==1?g=g[zn(w[0])].apply(g,w[3]):g=u.length==1&&Mi(u)?g[v]():g.thru(u)}return function(){var S=arguments,T=S[0];if(g&&S.length==1&&K(T))return g.plant(T).value();for(var N=0,A=r?t[N].apply(this,S):T;++N<r;)A=t[N].call(this,A);return A}})}function Dn(e,t,r,o,d,u,g,v,w,S){var T=t&ae,N=t&R,A=t&q,I=t&(U|j),B=t&ze,H=A?a:Nt(e);function L(){for(var J=arguments.length,X=_(J),Je=J;Je--;)X[Je]=arguments[Je];if(I)var je=V1(L),Ye=qm(X,je);if(o&&(X=Ho(X,o,d,I)),u&&(X=Go(X,u,g,I)),J-=Ye,I&&J<S){var ye=Wa(X,je);return td(e,t,Dn,L.placeholder,r,X,ye,v,w,S-J)}var ya=N?r:this,Va=A?ya[e]:e;return J=X.length,v?X=J6(X,v):B&&J>1&&X.reverse(),T&&w<J&&(X.length=w),this&&this!==Te&&this instanceof L&&(Va=H||Nt(Va)),Va.apply(ya,X)}return L}function ed(e,t){return function(r,o){return n6(r,e,t(o),{})}}function En(e,t){return function(r,o){var d;if(r===a&&o===a)return t;if(r!==a&&(d=r),o!==a){if(d===a)return o;typeof r=="string"||typeof o=="string"?(r=He(r),o=He(o)):(r=Bo(r),o=Bo(o)),d=e(r,o)}return d}}function Ai(e){return Ia(function(t){return t=se(t,We(V())),G(function(r){var o=this;return e(t,function(d){return Ke(d,o,r)})})})}function In(e,t){t=t===a?" ":He(t);var r=t.length;if(r<2)return r?_i(t,e):t;var o=_i(t,wn(e/R1(t)));return P1(t)?Xa(fa(o),0,e).join(""):o.slice(0,e)}function R6(e,t,r,o){var d=t&R,u=Nt(e);function g(){for(var v=-1,w=arguments.length,S=-1,T=o.length,N=_(T+w),A=this&&this!==Te&&this instanceof g?u:e;++S<T;)N[S]=o[S];for(;w--;)N[S++]=arguments[++v];return Ke(A,d?r:this,N)}return g}function ad(e){return function(t,r,o){return o&&typeof o!="number"&&Ve(t,r,o)&&(r=o=a),t=Ma(t),r===a?(r=t,t=0):r=Ma(r),o=o===a?t<r?1:-1:Ma(o),f6(t,r,o,e)}}function On(e){return function(t,r){return typeof t=="string"&&typeof r=="string"||(t=la(t),r=la(r)),e(t,r)}}function td(e,t,r,o,d,u,g,v,w,S){var T=t&U,N=T?g:a,A=T?a:g,I=T?u:a,B=T?a:u;t|=T?Q:ee,t&=~(T?ee:Q),t&F||(t&=~(R|q));var H=[e,t,d,I,N,B,A,v,w,S],L=r.apply(a,H);return Mi(e)&&hd(L,H),L.placeholder=o,fd(L,e,t)}function Pi(e){var t=ke[e];return function(r,o){if(r=la(r),o=o==null?0:De(W(o),292),o&&fo(r)){var d=(ne(r)+"e").split("e"),u=t(d[0]+"e"+(+d[1]+o));return d=(ne(u)+"e").split("e"),+(d[0]+"e"+(+d[1]-o))}return t(r)}}var D6=E1&&1/dn(new E1([,-0]))[1]==d1?function(e){return new E1(e)}:Zi;function nd(e){return function(t){var r=Ee(t);return r==ca?ii(t):r==ha?Gm(t):Lm(t,e(t))}}function Ea(e,t,r,o,d,u,g,v){var w=t&q;if(!w&&typeof e!="function")throw new ta(l);var S=o?o.length:0;if(S||(t&=~(Q|ee),o=d=a),g=g===a?g:Ce(W(g),0),v=v===a?v:W(v),S-=d?d.length:0,t&ee){var T=o,N=d;o=d=a}var A=w?a:Ei(e),I=[e,t,r,o,d,T,N,u,g,v];if(A&&W6(I,A),e=I[0],t=I[1],r=I[2],o=I[3],d=I[4],v=I[9]=I[9]===a?w?0:e.length:Ce(I[9]-S,0),!v&&t&(U|j)&&(t&=~(U|j)),!t||t==R)var B=A6(e,t,r);else t==U||t==j?B=P6(e,t,v):(t==Q||t==(R|Q))&&!d.length?B=R6(e,t,r,o):B=Dn.apply(a,I);var H=A?Vo:hd;return fd(H(B,I),e,t)}function rd(e,t,r,o){return e===a||va(e,D1[r])&&!re.call(o,r)?t:e}function id(e,t,r,o,d,u){return ue(e)&&ue(t)&&(u.set(t,e),Nn(e,t,a,id,u),u.delete(t)),e}function E6(e){return Rt(e)?a:e}function pd(e,t,r,o,d,u){var g=r&E,v=e.length,w=t.length;if(v!=w&&!(g&&w>v))return!1;var S=u.get(e),T=u.get(t);if(S&&T)return S==t&&T==e;var N=-1,A=!0,I=r&O?new c1:a;for(u.set(e,t),u.set(t,e);++N<v;){var B=e[N],H=t[N];if(o)var L=g?o(H,B,N,t,e,u):o(B,H,N,e,t,u);if(L!==a){if(L)continue;A=!1;break}if(I){if(!Qr(t,function(J,X){if(!gt(I,X)&&(B===J||d(B,J,r,o,u)))return I.push(X)})){A=!1;break}}else if(!(B===H||d(B,H,r,o,u))){A=!1;break}}return u.delete(e),u.delete(t),A}function I6(e,t,r,o,d,u,g){switch(r){case x1:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case ft:return!(e.byteLength!=t.byteLength||!u(new fn(e),new fn(t)));case dt:case st:case mt:return va(+e,+t);case en:return e.name==t.name&&e.message==t.message;case ut:case ct:return e==t+"";case ca:var v=ii;case ha:var w=o&E;if(v||(v=dn),e.size!=t.size&&!w)return!1;var S=g.get(e);if(S)return S==t;o|=O,g.set(e,t);var T=pd(v(e),v(t),o,d,u,g);return g.delete(e),T;case tn:if(_t)return _t.call(e)==_t.call(t)}return!1}function O6(e,t,r,o,d,u){var g=r&E,v=Ri(e),w=v.length,S=Ri(t),T=S.length;if(w!=T&&!g)return!1;for(var N=w;N--;){var A=v[N];if(!(g?A in t:re.call(t,A)))return!1}var I=u.get(e),B=u.get(t);if(I&&B)return I==t&&B==e;var H=!0;u.set(e,t),u.set(t,e);for(var L=g;++N<w;){A=v[N];var J=e[A],X=t[A];if(o)var Je=g?o(X,J,A,t,e,u):o(J,X,A,e,t,u);if(!(Je===a?J===X||d(J,X,r,o,u):Je)){H=!1;break}L||(L=A=="constructor")}if(H&&!L){var je=e.constructor,Ye=t.constructor;je!=Ye&&"constructor"in e&&"constructor"in t&&!(typeof je=="function"&&je instanceof je&&typeof Ye=="function"&&Ye instanceof Ye)&&(H=!1)}return u.delete(e),u.delete(t),H}function Ia(e){return ji(ud(e,a,_d),e+"")}function Ri(e){return xo(e,xe,Oi)}function Di(e){return xo(e,Ue,ld)}var Ei=_n?function(e){return _n.get(e)}:Zi;function zn(e){for(var t=e.name+"",r=I1[t],o=re.call(I1,t)?r.length:0;o--;){var d=r[o],u=d.func;if(u==null||u==e)return d.name}return t}function V1(e){var t=re.call(m,"placeholder")?m:e;return t.placeholder}function V(){var e=m.iteratee||Ji;return e=e===Ji?Po:e,arguments.length?e(arguments[0],arguments[1]):e}function Mn(e,t){var r=e.__data__;return U6(t)?r[typeof t=="string"?"string":"hash"]:r.map}function Ii(e){for(var t=xe(e),r=t.length;r--;){var o=t[r],d=e[o];t[r]=[o,d,sd(d)]}return t}function g1(e,t){var r=Km(e,t);return Ao(r)?r:a}function z6(e){var t=re.call(e,m1),r=e[m1];try{e[m1]=a;var o=!0}catch{}var d=cn.call(e);return o&&(t?e[m1]=r:delete e[m1]),d}var Oi=li?function(e){return e==null?[]:(e=ie(e),$a(li(e),function(t){return co.call(e,t)}))}:Xi,ld=li?function(e){for(var t=[];e;)Ka(t,Oi(e)),e=gn(e);return t}:Xi,Ee=Me;(oi&&Ee(new oi(new ArrayBuffer(1)))!=x1||yt&&Ee(new yt)!=ca||di&&Ee(di.resolve())!=kl||E1&&Ee(new E1)!=ha||wt&&Ee(new wt)!=ht)&&(Ee=function(e){var t=Me(e),r=t==Aa?e.constructor:a,o=r?v1(r):"";if(o)switch(o){case v4:return x1;case y4:return ca;case w4:return kl;case b4:return ha;case _4:return ht}return t});function M6(e,t,r){for(var o=-1,d=r.length;++o<d;){var u=r[o],g=u.size;switch(u.type){case"drop":e+=g;break;case"dropRight":t-=g;break;case"take":t=De(t,e+g);break;case"takeRight":e=Ce(e,t-g);break}}return{start:e,end:t}}function V6(e){var t=e.match(F0);return t?t[1].split($0):[]}function od(e,t,r){t=Za(t,e);for(var o=-1,d=t.length,u=!1;++o<d;){var g=Ta(t[o]);if(!(u=e!=null&&r(e,g)))break;e=e[g]}return u||++o!=d?u:(d=e==null?0:e.length,!!d&&Fn(d)&&Oa(g,d)&&(K(e)||y1(e)))}function j6(e){var t=e.length,r=new e.constructor(t);return t&&typeof e[0]=="string"&&re.call(e,"index")&&(r.index=e.index,r.input=e.input),r}function dd(e){return typeof e.constructor=="function"&&!At(e)?O1(gn(e)):{}}function B6(e,t,r){var o=e.constructor;switch(t){case ft:return Ni(e);case dt:case st:return new o(+e);case x1:return k6(e,r);case Ir:case Or:case zr:case Mr:case Vr:case jr:case Br:case Lr:case qr:return Ko(e,r);case ca:return new o;case mt:case ct:return new o(e);case ut:return C6(e);case ha:return new o;case tn:return S6(e)}}function L6(e,t){var r=t.length;if(!r)return e;var o=r-1;return t[o]=(r>1?"& ":"")+t[o],t=t.join(r>2?", ":" "),e.replace(U0,`{
/* [wrapped with `+t+`] */
`)}function q6(e){return K(e)||y1(e)||!!(ho&&e&&e[ho])}function Oa(e,t){var r=typeof e;return t=t??Fa,!!t&&(r=="number"||r!="symbol"&&Q0.test(e))&&e>-1&&e%1==0&&e<t}function Ve(e,t,r){if(!ue(r))return!1;var o=typeof t;return(o=="number"?qe(r)&&Oa(t,r.length):o=="string"&&t in r)?va(r[t],e):!1}function zi(e,t){if(K(e))return!1;var r=typeof e;return r=="number"||r=="symbol"||r=="boolean"||e==null||Ge(e)?!0:j0.test(e)||!V0.test(e)||t!=null&&e in ie(t)}function U6(e){var t=typeof e;return t=="string"||t=="number"||t=="symbol"||t=="boolean"?e!=="__proto__":e===null}function Mi(e){var t=zn(e),r=m[t];if(typeof r!="function"||!(t in Z.prototype))return!1;if(e===r)return!0;var o=Ei(r);return!!o&&e===o[0]}function F6(e){return!!so&&so in e}var $6=mn?za:Qi;function At(e){var t=e&&e.constructor,r=typeof t=="function"&&t.prototype||D1;return e===r}function sd(e){return e===e&&!ue(e)}function md(e,t){return function(r){return r==null?!1:r[e]===t&&(t!==a||e in ie(r))}}function K6(e){var t=qn(e,function(o){return r.size===f&&r.clear(),o}),r=t.cache;return t}function W6(e,t){var r=e[1],o=t[1],d=r|o,u=d<(R|q|ae),g=o==ae&&r==U||o==ae&&r==be&&e[7].length<=t[8]||o==(ae|be)&&t[7].length<=t[8]&&r==U;if(!(u||g))return e;o&R&&(e[2]=t[2],d|=r&R?0:F);var v=t[3];if(v){var w=e[3];e[3]=w?Ho(w,v,t[4]):v,e[4]=w?Wa(e[3],h):t[4]}return v=t[5],v&&(w=e[5],e[5]=w?Go(w,v,t[6]):v,e[6]=w?Wa(e[5],h):t[6]),v=t[7],v&&(e[7]=v),o&ae&&(e[8]=e[8]==null?t[8]:De(e[8],t[8])),e[9]==null&&(e[9]=t[9]),e[0]=t[0],e[1]=d,e}function H6(e){var t=[];if(e!=null)for(var r in ie(e))t.push(r);return t}function G6(e){return cn.call(e)}function ud(e,t,r){return t=Ce(t===a?e.length-1:t,0),function(){for(var o=arguments,d=-1,u=Ce(o.length-t,0),g=_(u);++d<u;)g[d]=o[t+d];d=-1;for(var v=_(t+1);++d<t;)v[d]=o[d];return v[t]=r(g),Ke(e,this,v)}}function cd(e,t){return t.length<2?e:f1(e,ia(t,0,-1))}function J6(e,t){for(var r=e.length,o=De(t.length,r),d=Le(e);o--;){var u=t[o];e[o]=Oa(u,r)?d[u]:a}return e}function Vi(e,t){if(!(t==="constructor"&&typeof e[t]=="function")&&t!="__proto__")return e[t]}var hd=gd(Vo),Pt=s4||function(e,t){return Te.setTimeout(e,t)},ji=gd(y6);function fd(e,t,r){var o=t+"";return ji(e,L6(o,Y6(V6(o),r)))}function gd(e){var t=0,r=0;return function(){var o=h4(),d=v0-(o-r);if(r=o,d>0){if(++t>=g0)return arguments[0]}else t=0;return e.apply(a,arguments)}}function Vn(e,t){var r=-1,o=e.length,d=o-1;for(t=t===a?o:t;++r<t;){var u=bi(r,d),g=e[u];e[u]=e[r],e[r]=g}return e.length=t,e}var vd=K6(function(e){var t=[];return e.charCodeAt(0)===46&&t.push(""),e.replace(B0,function(r,o,d,u){t.push(d?u.replace(H0,"$1"):o||r)}),t});function Ta(e){if(typeof e=="string"||Ge(e))return e;var t=e+"";return t=="0"&&1/e==-d1?"-0":t}function v1(e){if(e!=null){try{return un.call(e)}catch{}try{return e+""}catch{}}return""}function Y6(e,t){return aa(C0,function(r){var o="_."+r[0];t&r[1]&&!ln(e,o)&&e.push(o)}),e.sort()}function yd(e){if(e instanceof Z)return e.clone();var t=new na(e.__wrapped__,e.__chain__);return t.__actions__=Le(e.__actions__),t.__index__=e.__index__,t.__values__=e.__values__,t}function Z6(e,t,r){(r?Ve(e,t,r):t===a)?t=1:t=Ce(W(t),0);var o=e==null?0:e.length;if(!o||t<1)return[];for(var d=0,u=0,g=_(wn(o/t));d<o;)g[u++]=ia(e,d,d+=t);return g}function X6(e){for(var t=-1,r=e==null?0:e.length,o=0,d=[];++t<r;){var u=e[t];u&&(d[o++]=u)}return d}function Q6(){var e=arguments.length;if(!e)return[];for(var t=_(e-1),r=arguments[0],o=e;o--;)t[o-1]=arguments[o];return Ka(K(r)?Le(r):[r],Pe(t,1))}var e3=G(function(e,t){return ve(e)?Ct(e,Pe(t,1,ve,!0)):[]}),a3=G(function(e,t){var r=pa(t);return ve(r)&&(r=a),ve(e)?Ct(e,Pe(t,1,ve,!0),V(r,2)):[]}),t3=G(function(e,t){var r=pa(t);return ve(r)&&(r=a),ve(e)?Ct(e,Pe(t,1,ve,!0),a,r):[]});function n3(e,t,r){var o=e==null?0:e.length;return o?(t=r||t===a?1:W(t),ia(e,t<0?0:t,o)):[]}function r3(e,t,r){var o=e==null?0:e.length;return o?(t=r||t===a?1:W(t),t=o-t,ia(e,0,t<0?0:t)):[]}function i3(e,t){return e&&e.length?Pn(e,V(t,3),!0,!0):[]}function p3(e,t){return e&&e.length?Pn(e,V(t,3),!0):[]}function l3(e,t,r,o){var d=e==null?0:e.length;return d?(r&&typeof r!="number"&&Ve(e,t,r)&&(r=0,o=d),Q4(e,t,r,o)):[]}function wd(e,t,r){var o=e==null?0:e.length;if(!o)return-1;var d=r==null?0:W(r);return d<0&&(d=Ce(o+d,0)),on(e,V(t,3),d)}function bd(e,t,r){var o=e==null?0:e.length;if(!o)return-1;var d=o-1;return r!==a&&(d=W(r),d=r<0?Ce(o+d,0):De(d,o-1)),on(e,V(t,3),d,!0)}function _d(e){var t=e==null?0:e.length;return t?Pe(e,1):[]}function o3(e){var t=e==null?0:e.length;return t?Pe(e,d1):[]}function d3(e,t){var r=e==null?0:e.length;return r?(t=t===a?1:W(t),Pe(e,t)):[]}function s3(e){for(var t=-1,r=e==null?0:e.length,o={};++t<r;){var d=e[t];o[d[0]]=d[1]}return o}function kd(e){return e&&e.length?e[0]:a}function m3(e,t,r){var o=e==null?0:e.length;if(!o)return-1;var d=r==null?0:W(r);return d<0&&(d=Ce(o+d,0)),A1(e,t,d)}function u3(e){var t=e==null?0:e.length;return t?ia(e,0,-1):[]}var c3=G(function(e){var t=se(e,Ti);return t.length&&t[0]===e[0]?fi(t):[]}),h3=G(function(e){var t=pa(e),r=se(e,Ti);return t===pa(r)?t=a:r.pop(),r.length&&r[0]===e[0]?fi(r,V(t,2)):[]}),f3=G(function(e){var t=pa(e),r=se(e,Ti);return t=typeof t=="function"?t:a,t&&r.pop(),r.length&&r[0]===e[0]?fi(r,a,t):[]});function g3(e,t){return e==null?"":u4.call(e,t)}function pa(e){var t=e==null?0:e.length;return t?e[t-1]:a}function v3(e,t,r){var o=e==null?0:e.length;if(!o)return-1;var d=o;return r!==a&&(d=W(r),d=d<0?Ce(o+d,0):De(d,o-1)),t===t?Ym(e,t,d):on(e,ao,d,!0)}function y3(e,t){return e&&e.length?Io(e,W(t)):a}var w3=G(Cd);function Cd(e,t){return e&&e.length&&t&&t.length?wi(e,t):e}function b3(e,t,r){return e&&e.length&&t&&t.length?wi(e,t,V(r,2)):e}function _3(e,t,r){return e&&e.length&&t&&t.length?wi(e,t,a,r):e}var k3=Ia(function(e,t){var r=e==null?0:e.length,o=mi(e,t);return Mo(e,se(t,function(d){return Oa(d,r)?+d:d}).sort(Wo)),o});function C3(e,t){var r=[];if(!(e&&e.length))return r;var o=-1,d=[],u=e.length;for(t=V(t,3);++o<u;){var g=e[o];t(g,o,e)&&(r.push(g),d.push(o))}return Mo(e,d),r}function Bi(e){return e==null?e:g4.call(e)}function S3(e,t,r){var o=e==null?0:e.length;return o?(r&&typeof r!="number"&&Ve(e,t,r)?(t=0,r=o):(t=t==null?0:W(t),r=r===a?o:W(r)),ia(e,t,r)):[]}function T3(e,t){return An(e,t)}function x3(e,t,r){return ki(e,t,V(r,2))}function N3(e,t){var r=e==null?0:e.length;if(r){var o=An(e,t);if(o<r&&va(e[o],t))return o}return-1}function A3(e,t){return An(e,t,!0)}function P3(e,t,r){return ki(e,t,V(r,2),!0)}function R3(e,t){var r=e==null?0:e.length;if(r){var o=An(e,t,!0)-1;if(va(e[o],t))return o}return-1}function D3(e){return e&&e.length?jo(e):[]}function E3(e,t){return e&&e.length?jo(e,V(t,2)):[]}function I3(e){var t=e==null?0:e.length;return t?ia(e,1,t):[]}function O3(e,t,r){return e&&e.length?(t=r||t===a?1:W(t),ia(e,0,t<0?0:t)):[]}function z3(e,t,r){var o=e==null?0:e.length;return o?(t=r||t===a?1:W(t),t=o-t,ia(e,t<0?0:t,o)):[]}function M3(e,t){return e&&e.length?Pn(e,V(t,3),!1,!0):[]}function V3(e,t){return e&&e.length?Pn(e,V(t,3)):[]}var j3=G(function(e){return Ya(Pe(e,1,ve,!0))}),B3=G(function(e){var t=pa(e);return ve(t)&&(t=a),Ya(Pe(e,1,ve,!0),V(t,2))}),L3=G(function(e){var t=pa(e);return t=typeof t=="function"?t:a,Ya(Pe(e,1,ve,!0),a,t)});function q3(e){return e&&e.length?Ya(e):[]}function U3(e,t){return e&&e.length?Ya(e,V(t,2)):[]}function F3(e,t){return t=typeof t=="function"?t:a,e&&e.length?Ya(e,a,t):[]}function Li(e){if(!(e&&e.length))return[];var t=0;return e=$a(e,function(r){if(ve(r))return t=Ce(r.length,t),!0}),ni(t,function(r){return se(e,ei(r))})}function Sd(e,t){if(!(e&&e.length))return[];var r=Li(e);return t==null?r:se(r,function(o){return Ke(t,a,o)})}var $3=G(function(e,t){return ve(e)?Ct(e,t):[]}),K3=G(function(e){return Si($a(e,ve))}),W3=G(function(e){var t=pa(e);return ve(t)&&(t=a),Si($a(e,ve),V(t,2))}),H3=G(function(e){var t=pa(e);return t=typeof t=="function"?t:a,Si($a(e,ve),a,t)}),G3=G(Li);function J3(e,t){return Uo(e||[],t||[],kt)}function Y3(e,t){return Uo(e||[],t||[],xt)}var Z3=G(function(e){var t=e.length,r=t>1?e[t-1]:a;return r=typeof r=="function"?(e.pop(),r):a,Sd(e,r)});function Td(e){var t=m(e);return t.__chain__=!0,t}function X3(e,t){return t(e),e}function jn(e,t){return t(e)}var Q3=Ia(function(e){var t=e.length,r=t?e[0]:0,o=this.__wrapped__,d=function(u){return mi(u,e)};return t>1||this.__actions__.length||!(o instanceof Z)||!Oa(r)?this.thru(d):(o=o.slice(r,+r+(t?1:0)),o.__actions__.push({func:jn,args:[d],thisArg:a}),new na(o,this.__chain__).thru(function(u){return t&&!u.length&&u.push(a),u}))});function e9(){return Td(this)}function a9(){return new na(this.value(),this.__chain__)}function t9(){this.__values__===a&&(this.__values__=Bd(this.value()));var e=this.__index__>=this.__values__.length,t=e?a:this.__values__[this.__index__++];return{done:e,value:t}}function n9(){return this}function r9(e){for(var t,r=this;r instanceof Cn;){var o=yd(r);o.__index__=0,o.__values__=a,t?d.__wrapped__=o:t=o;var d=o;r=r.__wrapped__}return d.__wrapped__=e,t}function i9(){var e=this.__wrapped__;if(e instanceof Z){var t=e;return this.__actions__.length&&(t=new Z(this)),t=t.reverse(),t.__actions__.push({func:jn,args:[Bi],thisArg:a}),new na(t,this.__chain__)}return this.thru(Bi)}function p9(){return qo(this.__wrapped__,this.__actions__)}var l9=Rn(function(e,t,r){re.call(e,r)?++e[r]:Da(e,r,1)});function o9(e,t,r){var o=K(e)?Ql:X4;return r&&Ve(e,t,r)&&(t=a),o(e,V(t,3))}function d9(e,t){var r=K(e)?$a:So;return r(e,V(t,3))}var s9=Xo(wd),m9=Xo(bd);function u9(e,t){return Pe(Bn(e,t),1)}function c9(e,t){return Pe(Bn(e,t),d1)}function h9(e,t,r){return r=r===a?1:W(r),Pe(Bn(e,t),r)}function xd(e,t){var r=K(e)?aa:Ja;return r(e,V(t,3))}function Nd(e,t){var r=K(e)?Im:Co;return r(e,V(t,3))}var f9=Rn(function(e,t,r){re.call(e,r)?e[r].push(t):Da(e,r,[t])});function g9(e,t,r,o){e=qe(e)?e:B1(e),r=r&&!o?W(r):0;var d=e.length;return r<0&&(r=Ce(d+r,0)),$n(e)?r<=d&&e.indexOf(t,r)>-1:!!d&&A1(e,t,r)>-1}var v9=G(function(e,t,r){var o=-1,d=typeof t=="function",u=qe(e)?_(e.length):[];return Ja(e,function(g){u[++o]=d?Ke(t,g,r):St(g,t,r)}),u}),y9=Rn(function(e,t,r){Da(e,r,t)});function Bn(e,t){var r=K(e)?se:Ro;return r(e,V(t,3))}function w9(e,t,r,o){return e==null?[]:(K(t)||(t=t==null?[]:[t]),r=o?a:r,K(r)||(r=r==null?[]:[r]),Oo(e,t,r))}var b9=Rn(function(e,t,r){e[r?0:1].push(t)},function(){return[[],[]]});function _9(e,t,r){var o=K(e)?Xr:no,d=arguments.length<3;return o(e,V(t,4),r,d,Ja)}function k9(e,t,r){var o=K(e)?Om:no,d=arguments.length<3;return o(e,V(t,4),r,d,Co)}function C9(e,t){var r=K(e)?$a:So;return r(e,Un(V(t,3)))}function S9(e){var t=K(e)?wo:g6;return t(e)}function T9(e,t,r){(r?Ve(e,t,r):t===a)?t=1:t=W(t);var o=K(e)?H4:v6;return o(e,t)}function x9(e){var t=K(e)?G4:w6;return t(e)}function N9(e){if(e==null)return 0;if(qe(e))return $n(e)?R1(e):e.length;var t=Ee(e);return t==ca||t==ha?e.size:vi(e).length}function A9(e,t,r){var o=K(e)?Qr:b6;return r&&Ve(e,t,r)&&(t=a),o(e,V(t,3))}var P9=G(function(e,t){if(e==null)return[];var r=t.length;return r>1&&Ve(e,t[0],t[1])?t=[]:r>2&&Ve(t[0],t[1],t[2])&&(t=[t[0]]),Oo(e,Pe(t,1),[])}),Ln=d4||function(){return Te.Date.now()};function R9(e,t){if(typeof t!="function")throw new ta(l);return e=W(e),function(){if(--e<1)return t.apply(this,arguments)}}function Ad(e,t,r){return t=r?a:t,t=e&&t==null?e.length:t,Ea(e,ae,a,a,a,a,t)}function Pd(e,t){var r;if(typeof t!="function")throw new ta(l);return e=W(e),function(){return--e>0&&(r=t.apply(this,arguments)),e<=1&&(t=a),r}}var qi=G(function(e,t,r){var o=R;if(r.length){var d=Wa(r,V1(qi));o|=Q}return Ea(e,o,t,r,d)}),Rd=G(function(e,t,r){var o=R|q;if(r.length){var d=Wa(r,V1(Rd));o|=Q}return Ea(t,o,e,r,d)});function Dd(e,t,r){t=r?a:t;var o=Ea(e,U,a,a,a,a,a,t);return o.placeholder=Dd.placeholder,o}function Ed(e,t,r){t=r?a:t;var o=Ea(e,j,a,a,a,a,a,t);return o.placeholder=Ed.placeholder,o}function Id(e,t,r){var o,d,u,g,v,w,S=0,T=!1,N=!1,A=!0;if(typeof e!="function")throw new ta(l);t=la(t)||0,ue(r)&&(T=!!r.leading,N="maxWait"in r,u=N?Ce(la(r.maxWait)||0,t):u,A="trailing"in r?!!r.trailing:A);function I(ye){var ya=o,Va=d;return o=d=a,S=ye,g=e.apply(Va,ya),g}function B(ye){return S=ye,v=Pt(J,t),T?I(ye):g}function H(ye){var ya=ye-w,Va=ye-S,Xd=t-ya;return N?De(Xd,u-Va):Xd}function L(ye){var ya=ye-w,Va=ye-S;return w===a||ya>=t||ya<0||N&&Va>=u}function J(){var ye=Ln();if(L(ye))return X(ye);v=Pt(J,H(ye))}function X(ye){return v=a,A&&o?I(ye):(o=d=a,g)}function Je(){v!==a&&Fo(v),S=0,o=w=d=v=a}function je(){return v===a?g:X(Ln())}function Ye(){var ye=Ln(),ya=L(ye);if(o=arguments,d=this,w=ye,ya){if(v===a)return B(w);if(N)return Fo(v),v=Pt(J,t),I(w)}return v===a&&(v=Pt(J,t)),g}return Ye.cancel=Je,Ye.flush=je,Ye}var D9=G(function(e,t){return ko(e,1,t)}),E9=G(function(e,t,r){return ko(e,la(t)||0,r)});function I9(e){return Ea(e,ze)}function qn(e,t){if(typeof e!="function"||t!=null&&typeof t!="function")throw new ta(l);var r=function(){var o=arguments,d=t?t.apply(this,o):o[0],u=r.cache;if(u.has(d))return u.get(d);var g=e.apply(this,o);return r.cache=u.set(d,g)||u,g};return r.cache=new(qn.Cache||Ra),r}qn.Cache=Ra;function Un(e){if(typeof e!="function")throw new ta(l);return function(){var t=arguments;switch(t.length){case 0:return!e.call(this);case 1:return!e.call(this,t[0]);case 2:return!e.call(this,t[0],t[1]);case 3:return!e.call(this,t[0],t[1],t[2])}return!e.apply(this,t)}}function O9(e){return Pd(2,e)}var z9=_6(function(e,t){t=t.length==1&&K(t[0])?se(t[0],We(V())):se(Pe(t,1),We(V()));var r=t.length;return G(function(o){for(var d=-1,u=De(o.length,r);++d<u;)o[d]=t[d].call(this,o[d]);return Ke(e,this,o)})}),Ui=G(function(e,t){var r=Wa(t,V1(Ui));return Ea(e,Q,a,t,r)}),Od=G(function(e,t){var r=Wa(t,V1(Od));return Ea(e,ee,a,t,r)}),M9=Ia(function(e,t){return Ea(e,be,a,a,a,t)});function V9(e,t){if(typeof e!="function")throw new ta(l);return t=t===a?t:W(t),G(e,t)}function j9(e,t){if(typeof e!="function")throw new ta(l);return t=t==null?0:Ce(W(t),0),G(function(r){var o=r[t],d=Xa(r,0,t);return o&&Ka(d,o),Ke(e,this,d)})}function B9(e,t,r){var o=!0,d=!0;if(typeof e!="function")throw new ta(l);return ue(r)&&(o="leading"in r?!!r.leading:o,d="trailing"in r?!!r.trailing:d),Id(e,t,{leading:o,maxWait:t,trailing:d})}function L9(e){return Ad(e,1)}function q9(e,t){return Ui(xi(t),e)}function U9(){if(!arguments.length)return[];var e=arguments[0];return K(e)?e:[e]}function F9(e){return ra(e,x)}function $9(e,t){return t=typeof t=="function"?t:a,ra(e,x,t)}function K9(e){return ra(e,b|x)}function W9(e,t){return t=typeof t=="function"?t:a,ra(e,b|x,t)}function H9(e,t){return t==null||_o(e,t,xe(t))}function va(e,t){return e===t||e!==e&&t!==t}var G9=On(hi),J9=On(function(e,t){return e>=t}),y1=No(function(){return arguments}())?No:function(e){return ce(e)&&re.call(e,"callee")&&!co.call(e,"callee")},K=_.isArray,Y9=Hl?We(Hl):r6;function qe(e){return e!=null&&Fn(e.length)&&!za(e)}function ve(e){return ce(e)&&qe(e)}function Z9(e){return e===!0||e===!1||ce(e)&&Me(e)==dt}var Qa=m4||Qi,X9=Gl?We(Gl):i6;function Q9(e){return ce(e)&&e.nodeType===1&&!Rt(e)}function e5(e){if(e==null)return!0;if(qe(e)&&(K(e)||typeof e=="string"||typeof e.splice=="function"||Qa(e)||j1(e)||y1(e)))return!e.length;var t=Ee(e);if(t==ca||t==ha)return!e.size;if(At(e))return!vi(e).length;for(var r in e)if(re.call(e,r))return!1;return!0}function a5(e,t){return Tt(e,t)}function t5(e,t,r){r=typeof r=="function"?r:a;var o=r?r(e,t):a;return o===a?Tt(e,t,a,r):!!o}function Fi(e){if(!ce(e))return!1;var t=Me(e);return t==en||t==T0||typeof e.message=="string"&&typeof e.name=="string"&&!Rt(e)}function n5(e){return typeof e=="number"&&fo(e)}function za(e){if(!ue(e))return!1;var t=Me(e);return t==an||t==_l||t==S0||t==N0}function zd(e){return typeof e=="number"&&e==W(e)}function Fn(e){return typeof e=="number"&&e>-1&&e%1==0&&e<=Fa}function ue(e){var t=typeof e;return e!=null&&(t=="object"||t=="function")}function ce(e){return e!=null&&typeof e=="object"}var Md=Jl?We(Jl):l6;function r5(e,t){return e===t||gi(e,t,Ii(t))}function i5(e,t,r){return r=typeof r=="function"?r:a,gi(e,t,Ii(t),r)}function p5(e){return Vd(e)&&e!=+e}function l5(e){if($6(e))throw new $(p);return Ao(e)}function o5(e){return e===null}function d5(e){return e==null}function Vd(e){return typeof e=="number"||ce(e)&&Me(e)==mt}function Rt(e){if(!ce(e)||Me(e)!=Aa)return!1;var t=gn(e);if(t===null)return!0;var r=re.call(t,"constructor")&&t.constructor;return typeof r=="function"&&r instanceof r&&un.call(r)==i4}var $i=Yl?We(Yl):o6;function s5(e){return zd(e)&&e>=-Fa&&e<=Fa}var jd=Zl?We(Zl):d6;function $n(e){return typeof e=="string"||!K(e)&&ce(e)&&Me(e)==ct}function Ge(e){return typeof e=="symbol"||ce(e)&&Me(e)==tn}var j1=Xl?We(Xl):s6;function m5(e){return e===a}function u5(e){return ce(e)&&Ee(e)==ht}function c5(e){return ce(e)&&Me(e)==P0}var h5=On(yi),f5=On(function(e,t){return e<=t});function Bd(e){if(!e)return[];if(qe(e))return $n(e)?fa(e):Le(e);if(vt&&e[vt])return Hm(e[vt]());var t=Ee(e),r=t==ca?ii:t==ha?dn:B1;return r(e)}function Ma(e){if(!e)return e===0?e:0;if(e=la(e),e===d1||e===-d1){var t=e<0?-1:1;return t*b0}return e===e?e:0}function W(e){var t=Ma(e),r=t%1;return t===t?r?t-r:t:0}function Ld(e){return e?h1(W(e),0,ka):0}function la(e){if(typeof e=="number")return e;if(Ge(e))return Xt;if(ue(e)){var t=typeof e.valueOf=="function"?e.valueOf():e;e=ue(t)?t+"":t}if(typeof e!="string")return e===0?e:+e;e=ro(e);var r=Y0.test(e);return r||X0.test(e)?Rm(e.slice(2),r?2:8):J0.test(e)?Xt:+e}function qd(e){return Sa(e,Ue(e))}function g5(e){return e?h1(W(e),-Fa,Fa):e===0?e:0}function ne(e){return e==null?"":He(e)}var v5=z1(function(e,t){if(At(t)||qe(t)){Sa(t,xe(t),e);return}for(var r in t)re.call(t,r)&&kt(e,r,t[r])}),Ud=z1(function(e,t){Sa(t,Ue(t),e)}),Kn=z1(function(e,t,r,o){Sa(t,Ue(t),e,o)}),y5=z1(function(e,t,r,o){Sa(t,xe(t),e,o)}),w5=Ia(mi);function b5(e,t){var r=O1(e);return t==null?r:bo(r,t)}var _5=G(function(e,t){e=ie(e);var r=-1,o=t.length,d=o>2?t[2]:a;for(d&&Ve(t[0],t[1],d)&&(o=1);++r<o;)for(var u=t[r],g=Ue(u),v=-1,w=g.length;++v<w;){var S=g[v],T=e[S];(T===a||va(T,D1[S])&&!re.call(e,S))&&(e[S]=u[S])}return e}),k5=G(function(e){return e.push(a,id),Ke(Fd,a,e)});function C5(e,t){return eo(e,V(t,3),Ca)}function S5(e,t){return eo(e,V(t,3),ci)}function T5(e,t){return e==null?e:ui(e,V(t,3),Ue)}function x5(e,t){return e==null?e:To(e,V(t,3),Ue)}function N5(e,t){return e&&Ca(e,V(t,3))}function A5(e,t){return e&&ci(e,V(t,3))}function P5(e){return e==null?[]:xn(e,xe(e))}function R5(e){return e==null?[]:xn(e,Ue(e))}function Ki(e,t,r){var o=e==null?a:f1(e,t);return o===a?r:o}function D5(e,t){return e!=null&&od(e,t,e6)}function Wi(e,t){return e!=null&&od(e,t,a6)}var E5=ed(function(e,t,r){t!=null&&typeof t.toString!="function"&&(t=cn.call(t)),e[t]=r},Gi(Fe)),I5=ed(function(e,t,r){t!=null&&typeof t.toString!="function"&&(t=cn.call(t)),re.call(e,t)?e[t].push(r):e[t]=[r]},V),O5=G(St);function xe(e){return qe(e)?yo(e):vi(e)}function Ue(e){return qe(e)?yo(e,!0):m6(e)}function z5(e,t){var r={};return t=V(t,3),Ca(e,function(o,d,u){Da(r,t(o,d,u),o)}),r}function M5(e,t){var r={};return t=V(t,3),Ca(e,function(o,d,u){Da(r,d,t(o,d,u))}),r}var V5=z1(function(e,t,r){Nn(e,t,r)}),Fd=z1(function(e,t,r,o){Nn(e,t,r,o)}),j5=Ia(function(e,t){var r={};if(e==null)return r;var o=!1;t=se(t,function(u){return u=Za(u,e),o||(o=u.length>1),u}),Sa(e,Di(e),r),o&&(r=ra(r,b|C|x,E6));for(var d=t.length;d--;)Ci(r,t[d]);return r});function B5(e,t){return $d(e,Un(V(t)))}var L5=Ia(function(e,t){return e==null?{}:c6(e,t)});function $d(e,t){if(e==null)return{};var r=se(Di(e),function(o){return[o]});return t=V(t),zo(e,r,function(o,d){return t(o,d[0])})}function q5(e,t,r){t=Za(t,e);var o=-1,d=t.length;for(d||(d=1,e=a);++o<d;){var u=e==null?a:e[Ta(t[o])];u===a&&(o=d,u=r),e=za(u)?u.call(e):u}return e}function U5(e,t,r){return e==null?e:xt(e,t,r)}function F5(e,t,r,o){return o=typeof o=="function"?o:a,e==null?e:xt(e,t,r,o)}var Kd=nd(xe),Wd=nd(Ue);function $5(e,t,r){var o=K(e),d=o||Qa(e)||j1(e);if(t=V(t,4),r==null){var u=e&&e.constructor;d?r=o?new u:[]:ue(e)?r=za(u)?O1(gn(e)):{}:r={}}return(d?aa:Ca)(e,function(g,v,w){return t(r,g,v,w)}),r}function K5(e,t){return e==null?!0:Ci(e,t)}function W5(e,t,r){return e==null?e:Lo(e,t,xi(r))}function H5(e,t,r,o){return o=typeof o=="function"?o:a,e==null?e:Lo(e,t,xi(r),o)}function B1(e){return e==null?[]:ri(e,xe(e))}function G5(e){return e==null?[]:ri(e,Ue(e))}function J5(e,t,r){return r===a&&(r=t,t=a),r!==a&&(r=la(r),r=r===r?r:0),t!==a&&(t=la(t),t=t===t?t:0),h1(la(e),t,r)}function Y5(e,t,r){return t=Ma(t),r===a?(r=t,t=0):r=Ma(r),e=la(e),t6(e,t,r)}function Z5(e,t,r){if(r&&typeof r!="boolean"&&Ve(e,t,r)&&(t=r=a),r===a&&(typeof t=="boolean"?(r=t,t=a):typeof e=="boolean"&&(r=e,e=a)),e===a&&t===a?(e=0,t=1):(e=Ma(e),t===a?(t=e,e=0):t=Ma(t)),e>t){var o=e;e=t,t=o}if(r||e%1||t%1){var d=go();return De(e+d*(t-e+Pm("1e-"+((d+"").length-1))),t)}return bi(e,t)}var X5=M1(function(e,t,r){return t=t.toLowerCase(),e+(r?Hd(t):t)});function Hd(e){return Hi(ne(e).toLowerCase())}function Gd(e){return e=ne(e),e&&e.replace(em,Um).replace(wm,"")}function Q5(e,t,r){e=ne(e),t=He(t);var o=e.length;r=r===a?o:h1(W(r),0,o);var d=r;return r-=t.length,r>=0&&e.slice(r,d)==t}function e8(e){return e=ne(e),e&&O0.test(e)?e.replace(Sl,Fm):e}function a8(e){return e=ne(e),e&&L0.test(e)?e.replace(Ur,"\\$&"):e}var t8=M1(function(e,t,r){return e+(r?"-":"")+t.toLowerCase()}),n8=M1(function(e,t,r){return e+(r?" ":"")+t.toLowerCase()}),r8=Zo("toLowerCase");function i8(e,t,r){e=ne(e),t=W(t);var o=t?R1(e):0;if(!t||o>=t)return e;var d=(t-o)/2;return In(bn(d),r)+e+In(wn(d),r)}function p8(e,t,r){e=ne(e),t=W(t);var o=t?R1(e):0;return t&&o<t?e+In(t-o,r):e}function l8(e,t,r){e=ne(e),t=W(t);var o=t?R1(e):0;return t&&o<t?In(t-o,r)+e:e}function o8(e,t,r){return r||t==null?t=0:t&&(t=+t),f4(ne(e).replace(Fr,""),t||0)}function d8(e,t,r){return(r?Ve(e,t,r):t===a)?t=1:t=W(t),_i(ne(e),t)}function s8(){var e=arguments,t=ne(e[0]);return e.length<3?t:t.replace(e[1],e[2])}var m8=M1(function(e,t,r){return e+(r?"_":"")+t.toLowerCase()});function u8(e,t,r){return r&&typeof r!="number"&&Ve(e,t,r)&&(t=r=a),r=r===a?ka:r>>>0,r?(e=ne(e),e&&(typeof t=="string"||t!=null&&!$i(t))&&(t=He(t),!t&&P1(e))?Xa(fa(e),0,r):e.split(t,r)):[]}var c8=M1(function(e,t,r){return e+(r?" ":"")+Hi(t)});function h8(e,t,r){return e=ne(e),r=r==null?0:h1(W(r),0,e.length),t=He(t),e.slice(r,r+t.length)==t}function f8(e,t,r){var o=m.templateSettings;r&&Ve(e,t,r)&&(t=a),e=ne(e),t=Kn({},t,o,rd);var d=Kn({},t.imports,o.imports,rd),u=xe(d),g=ri(d,u),v,w,S=0,T=t.interpolate||nn,N="__p += '",A=pi((t.escape||nn).source+"|"+T.source+"|"+(T===Tl?G0:nn).source+"|"+(t.evaluate||nn).source+"|$","g"),I="//# sourceURL="+(re.call(t,"sourceURL")?(t.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Sm+"]")+`
`;e.replace(A,function(L,J,X,Je,je,Ye){return X||(X=Je),N+=e.slice(S,Ye).replace(am,$m),J&&(v=!0,N+=`' +
__e(`+J+`) +
'`),je&&(w=!0,N+=`';
`+je+`;
__p += '`),X&&(N+=`' +
((__t = (`+X+`)) == null ? '' : __t) +
'`),S=Ye+L.length,L}),N+=`';
`;var B=re.call(t,"variable")&&t.variable;if(!B)N=`with (obj) {
`+N+`
}
`;else if(W0.test(B))throw new $(s);N=(w?N.replace(R0,""):N).replace(D0,"$1").replace(E0,"$1;"),N="function("+(B||"obj")+`) {
`+(B?"":`obj || (obj = {});
`)+"var __t, __p = ''"+(v?", __e = _.escape":"")+(w?`, __j = Array.prototype.join;
function print() { __p += __j.call(arguments, '') }
`:`;
`)+N+`return __p
}`;var H=Yd(function(){return te(u,I+"return "+N).apply(a,g)});if(H.source=N,Fi(H))throw H;return H}function g8(e){return ne(e).toLowerCase()}function v8(e){return ne(e).toUpperCase()}function y8(e,t,r){if(e=ne(e),e&&(r||t===a))return ro(e);if(!e||!(t=He(t)))return e;var o=fa(e),d=fa(t),u=io(o,d),g=po(o,d)+1;return Xa(o,u,g).join("")}function w8(e,t,r){if(e=ne(e),e&&(r||t===a))return e.slice(0,oo(e)+1);if(!e||!(t=He(t)))return e;var o=fa(e),d=po(o,fa(t))+1;return Xa(o,0,d).join("")}function b8(e,t,r){if(e=ne(e),e&&(r||t===a))return e.replace(Fr,"");if(!e||!(t=He(t)))return e;var o=fa(e),d=io(o,fa(t));return Xa(o,d).join("")}function _8(e,t){var r=ot,o=o1;if(ue(t)){var d="separator"in t?t.separator:d;r="length"in t?W(t.length):r,o="omission"in t?He(t.omission):o}e=ne(e);var u=e.length;if(P1(e)){var g=fa(e);u=g.length}if(r>=u)return e;var v=r-R1(o);if(v<1)return o;var w=g?Xa(g,0,v).join(""):e.slice(0,v);if(d===a)return w+o;if(g&&(v+=w.length-v),$i(d)){if(e.slice(v).search(d)){var S,T=w;for(d.global||(d=pi(d.source,ne(xl.exec(d))+"g")),d.lastIndex=0;S=d.exec(T);)var N=S.index;w=w.slice(0,N===a?v:N)}}else if(e.indexOf(He(d),v)!=v){var A=w.lastIndexOf(d);A>-1&&(w=w.slice(0,A))}return w+o}function k8(e){return e=ne(e),e&&I0.test(e)?e.replace(Cl,Zm):e}var C8=M1(function(e,t,r){return e+(r?" ":"")+t.toUpperCase()}),Hi=Zo("toUpperCase");function Jd(e,t,r){return e=ne(e),t=r?a:t,t===a?Wm(e)?e4(e):Vm(e):e.match(t)||[]}var Yd=G(function(e,t){try{return Ke(e,a,t)}catch(r){return Fi(r)?r:new $(r)}}),S8=Ia(function(e,t){return aa(t,function(r){r=Ta(r),Da(e,r,qi(e[r],e))}),e});function T8(e){var t=e==null?0:e.length,r=V();return e=t?se(e,function(o){if(typeof o[1]!="function")throw new ta(l);return[r(o[0]),o[1]]}):[],G(function(o){for(var d=-1;++d<t;){var u=e[d];if(Ke(u[0],this,o))return Ke(u[1],this,o)}})}function x8(e){return Z4(ra(e,b))}function Gi(e){return function(){return e}}function N8(e,t){return e==null||e!==e?t:e}var A8=Qo(),P8=Qo(!0);function Fe(e){return e}function Ji(e){return Po(typeof e=="function"?e:ra(e,b))}function R8(e){return Do(ra(e,b))}function D8(e,t){return Eo(e,ra(t,b))}var E8=G(function(e,t){return function(r){return St(r,e,t)}}),I8=G(function(e,t){return function(r){return St(e,r,t)}});function Yi(e,t,r){var o=xe(t),d=xn(t,o);r==null&&!(ue(t)&&(d.length||!o.length))&&(r=t,t=e,e=this,d=xn(t,xe(t)));var u=!(ue(r)&&"chain"in r)||!!r.chain,g=za(e);return aa(d,function(v){var w=t[v];e[v]=w,g&&(e.prototype[v]=function(){var S=this.__chain__;if(u||S){var T=e(this.__wrapped__),N=T.__actions__=Le(this.__actions__);return N.push({func:w,args:arguments,thisArg:e}),T.__chain__=S,T}return w.apply(e,Ka([this.value()],arguments))})}),e}function O8(){return Te._===this&&(Te._=p4),this}function Zi(){}function z8(e){return e=W(e),G(function(t){return Io(t,e)})}var M8=Ai(se),V8=Ai(Ql),j8=Ai(Qr);function Zd(e){return zi(e)?ei(Ta(e)):h6(e)}function B8(e){return function(t){return e==null?a:f1(e,t)}}var L8=ad(),q8=ad(!0);function Xi(){return[]}function Qi(){return!1}function U8(){return{}}function F8(){return""}function $8(){return!0}function K8(e,t){if(e=W(e),e<1||e>Fa)return[];var r=ka,o=De(e,ka);t=V(t),e-=ka;for(var d=ni(o,t);++r<e;)t(r);return d}function W8(e){return K(e)?se(e,Ta):Ge(e)?[e]:Le(vd(ne(e)))}function H8(e){var t=++r4;return ne(e)+t}var G8=En(function(e,t){return e+t},0),J8=Pi("ceil"),Y8=En(function(e,t){return e/t},1),Z8=Pi("floor");function X8(e){return e&&e.length?Tn(e,Fe,hi):a}function Q8(e,t){return e&&e.length?Tn(e,V(t,2),hi):a}function eu(e){return to(e,Fe)}function au(e,t){return to(e,V(t,2))}function tu(e){return e&&e.length?Tn(e,Fe,yi):a}function nu(e,t){return e&&e.length?Tn(e,V(t,2),yi):a}var ru=En(function(e,t){return e*t},1),iu=Pi("round"),pu=En(function(e,t){return e-t},0);function lu(e){return e&&e.length?ti(e,Fe):0}function ou(e,t){return e&&e.length?ti(e,V(t,2)):0}return m.after=R9,m.ary=Ad,m.assign=v5,m.assignIn=Ud,m.assignInWith=Kn,m.assignWith=y5,m.at=w5,m.before=Pd,m.bind=qi,m.bindAll=S8,m.bindKey=Rd,m.castArray=U9,m.chain=Td,m.chunk=Z6,m.compact=X6,m.concat=Q6,m.cond=T8,m.conforms=x8,m.constant=Gi,m.countBy=l9,m.create=b5,m.curry=Dd,m.curryRight=Ed,m.debounce=Id,m.defaults=_5,m.defaultsDeep=k5,m.defer=D9,m.delay=E9,m.difference=e3,m.differenceBy=a3,m.differenceWith=t3,m.drop=n3,m.dropRight=r3,m.dropRightWhile=i3,m.dropWhile=p3,m.fill=l3,m.filter=d9,m.flatMap=u9,m.flatMapDeep=c9,m.flatMapDepth=h9,m.flatten=_d,m.flattenDeep=o3,m.flattenDepth=d3,m.flip=I9,m.flow=A8,m.flowRight=P8,m.fromPairs=s3,m.functions=P5,m.functionsIn=R5,m.groupBy=f9,m.initial=u3,m.intersection=c3,m.intersectionBy=h3,m.intersectionWith=f3,m.invert=E5,m.invertBy=I5,m.invokeMap=v9,m.iteratee=Ji,m.keyBy=y9,m.keys=xe,m.keysIn=Ue,m.map=Bn,m.mapKeys=z5,m.mapValues=M5,m.matches=R8,m.matchesProperty=D8,m.memoize=qn,m.merge=V5,m.mergeWith=Fd,m.method=E8,m.methodOf=I8,m.mixin=Yi,m.negate=Un,m.nthArg=z8,m.omit=j5,m.omitBy=B5,m.once=O9,m.orderBy=w9,m.over=M8,m.overArgs=z9,m.overEvery=V8,m.overSome=j8,m.partial=Ui,m.partialRight=Od,m.partition=b9,m.pick=L5,m.pickBy=$d,m.property=Zd,m.propertyOf=B8,m.pull=w3,m.pullAll=Cd,m.pullAllBy=b3,m.pullAllWith=_3,m.pullAt=k3,m.range=L8,m.rangeRight=q8,m.rearg=M9,m.reject=C9,m.remove=C3,m.rest=V9,m.reverse=Bi,m.sampleSize=T9,m.set=U5,m.setWith=F5,m.shuffle=x9,m.slice=S3,m.sortBy=P9,m.sortedUniq=D3,m.sortedUniqBy=E3,m.split=u8,m.spread=j9,m.tail=I3,m.take=O3,m.takeRight=z3,m.takeRightWhile=M3,m.takeWhile=V3,m.tap=X3,m.throttle=B9,m.thru=jn,m.toArray=Bd,m.toPairs=Kd,m.toPairsIn=Wd,m.toPath=W8,m.toPlainObject=qd,m.transform=$5,m.unary=L9,m.union=j3,m.unionBy=B3,m.unionWith=L3,m.uniq=q3,m.uniqBy=U3,m.uniqWith=F3,m.unset=K5,m.unzip=Li,m.unzipWith=Sd,m.update=W5,m.updateWith=H5,m.values=B1,m.valuesIn=G5,m.without=$3,m.words=Jd,m.wrap=q9,m.xor=K3,m.xorBy=W3,m.xorWith=H3,m.zip=G3,m.zipObject=J3,m.zipObjectDeep=Y3,m.zipWith=Z3,m.entries=Kd,m.entriesIn=Wd,m.extend=Ud,m.extendWith=Kn,Yi(m,m),m.add=G8,m.attempt=Yd,m.camelCase=X5,m.capitalize=Hd,m.ceil=J8,m.clamp=J5,m.clone=F9,m.cloneDeep=K9,m.cloneDeepWith=W9,m.cloneWith=$9,m.conformsTo=H9,m.deburr=Gd,m.defaultTo=N8,m.divide=Y8,m.endsWith=Q5,m.eq=va,m.escape=e8,m.escapeRegExp=a8,m.every=o9,m.find=s9,m.findIndex=wd,m.findKey=C5,m.findLast=m9,m.findLastIndex=bd,m.findLastKey=S5,m.floor=Z8,m.forEach=xd,m.forEachRight=Nd,m.forIn=T5,m.forInRight=x5,m.forOwn=N5,m.forOwnRight=A5,m.get=Ki,m.gt=G9,m.gte=J9,m.has=D5,m.hasIn=Wi,m.head=kd,m.identity=Fe,m.includes=g9,m.indexOf=m3,m.inRange=Y5,m.invoke=O5,m.isArguments=y1,m.isArray=K,m.isArrayBuffer=Y9,m.isArrayLike=qe,m.isArrayLikeObject=ve,m.isBoolean=Z9,m.isBuffer=Qa,m.isDate=X9,m.isElement=Q9,m.isEmpty=e5,m.isEqual=a5,m.isEqualWith=t5,m.isError=Fi,m.isFinite=n5,m.isFunction=za,m.isInteger=zd,m.isLength=Fn,m.isMap=Md,m.isMatch=r5,m.isMatchWith=i5,m.isNaN=p5,m.isNative=l5,m.isNil=d5,m.isNull=o5,m.isNumber=Vd,m.isObject=ue,m.isObjectLike=ce,m.isPlainObject=Rt,m.isRegExp=$i,m.isSafeInteger=s5,m.isSet=jd,m.isString=$n,m.isSymbol=Ge,m.isTypedArray=j1,m.isUndefined=m5,m.isWeakMap=u5,m.isWeakSet=c5,m.join=g3,m.kebabCase=t8,m.last=pa,m.lastIndexOf=v3,m.lowerCase=n8,m.lowerFirst=r8,m.lt=h5,m.lte=f5,m.max=X8,m.maxBy=Q8,m.mean=eu,m.meanBy=au,m.min=tu,m.minBy=nu,m.stubArray=Xi,m.stubFalse=Qi,m.stubObject=U8,m.stubString=F8,m.stubTrue=$8,m.multiply=ru,m.nth=y3,m.noConflict=O8,m.noop=Zi,m.now=Ln,m.pad=i8,m.padEnd=p8,m.padStart=l8,m.parseInt=o8,m.random=Z5,m.reduce=_9,m.reduceRight=k9,m.repeat=d8,m.replace=s8,m.result=q5,m.round=iu,m.runInContext=y,m.sample=S9,m.size=N9,m.snakeCase=m8,m.some=A9,m.sortedIndex=T3,m.sortedIndexBy=x3,m.sortedIndexOf=N3,m.sortedLastIndex=A3,m.sortedLastIndexBy=P3,m.sortedLastIndexOf=R3,m.startCase=c8,m.startsWith=h8,m.subtract=pu,m.sum=lu,m.sumBy=ou,m.template=f8,m.times=K8,m.toFinite=Ma,m.toInteger=W,m.toLength=Ld,m.toLower=g8,m.toNumber=la,m.toSafeInteger=g5,m.toString=ne,m.toUpper=v8,m.trim=y8,m.trimEnd=w8,m.trimStart=b8,m.truncate=_8,m.unescape=k8,m.uniqueId=H8,m.upperCase=C8,m.upperFirst=Hi,m.each=xd,m.eachRight=Nd,m.first=kd,Yi(m,function(){var e={};return Ca(m,function(t,r){re.call(m.prototype,r)||(e[r]=t)}),e}(),{chain:!1}),m.VERSION=n,aa(["bind","bindKey","curry","curryRight","partial","partialRight"],function(e){m[e].placeholder=m}),aa(["drop","take"],function(e,t){Z.prototype[e]=function(r){r=r===a?1:Ce(W(r),0);var o=this.__filtered__&&!t?new Z(this):this.clone();return o.__filtered__?o.__takeCount__=De(r,o.__takeCount__):o.__views__.push({size:De(r,ka),type:e+(o.__dir__<0?"Right":"")}),o},Z.prototype[e+"Right"]=function(r){return this.reverse()[e](r).reverse()}}),aa(["filter","map","takeWhile"],function(e,t){var r=t+1,o=r==bl||r==w0;Z.prototype[e]=function(d){var u=this.clone();return u.__iteratees__.push({iteratee:V(d,3),type:r}),u.__filtered__=u.__filtered__||o,u}}),aa(["head","last"],function(e,t){var r="take"+(t?"Right":"");Z.prototype[e]=function(){return this[r](1).value()[0]}}),aa(["initial","tail"],function(e,t){var r="drop"+(t?"":"Right");Z.prototype[e]=function(){return this.__filtered__?new Z(this):this[r](1)}}),Z.prototype.compact=function(){return this.filter(Fe)},Z.prototype.find=function(e){return this.filter(e).head()},Z.prototype.findLast=function(e){return this.reverse().find(e)},Z.prototype.invokeMap=G(function(e,t){return typeof e=="function"?new Z(this):this.map(function(r){return St(r,e,t)})}),Z.prototype.reject=function(e){return this.filter(Un(V(e)))},Z.prototype.slice=function(e,t){e=W(e);var r=this;return r.__filtered__&&(e>0||t<0)?new Z(r):(e<0?r=r.takeRight(-e):e&&(r=r.drop(e)),t!==a&&(t=W(t),r=t<0?r.dropRight(-t):r.take(t-e)),r)},Z.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},Z.prototype.toArray=function(){return this.take(ka)},Ca(Z.prototype,function(e,t){var r=/^(?:filter|find|map|reject)|While$/.test(t),o=/^(?:head|last)$/.test(t),d=m[o?"take"+(t=="last"?"Right":""):t],u=o||/^find/.test(t);d&&(m.prototype[t]=function(){var g=this.__wrapped__,v=o?[1]:arguments,w=g instanceof Z,S=v[0],T=w||K(g),N=function(J){var X=d.apply(m,Ka([J],v));return o&&A?X[0]:X};T&&r&&typeof S=="function"&&S.length!=1&&(w=T=!1);var A=this.__chain__,I=!!this.__actions__.length,B=u&&!A,H=w&&!I;if(!u&&T){g=H?g:new Z(this);var L=e.apply(g,v);return L.__actions__.push({func:jn,args:[N],thisArg:a}),new na(L,A)}return B&&H?e.apply(this,v):(L=this.thru(N),B?o?L.value()[0]:L.value():L)})}),aa(["pop","push","shift","sort","splice","unshift"],function(e){var t=sn[e],r=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",o=/^(?:pop|shift)$/.test(e);m.prototype[e]=function(){var d=arguments;if(o&&!this.__chain__){var u=this.value();return t.apply(K(u)?u:[],d)}return this[r](function(g){return t.apply(K(g)?g:[],d)})}}),Ca(Z.prototype,function(e,t){var r=m[t];if(r){var o=r.name+"";re.call(I1,o)||(I1[o]=[]),I1[o].push({name:t,func:r})}}),I1[Dn(a,q).name]=[{name:"wrapper",func:a}],Z.prototype.clone=k4,Z.prototype.reverse=C4,Z.prototype.value=S4,m.prototype.at=Q3,m.prototype.chain=e9,m.prototype.commit=a9,m.prototype.next=t9,m.prototype.plant=r9,m.prototype.reverse=i9,m.prototype.toJSON=m.prototype.valueOf=m.prototype.value=p9,m.prototype.first=m.prototype.head,vt&&(m.prototype[vt]=n9),m},Ha=a4();typeof define=="function"&&typeof define.amd=="object"&&define.amd?(Te._=Ha,define(function(){return Ha})):s1?((s1.exports=Ha)._=Ha,Jr._=Ha):Te._=Ha}).call(L1)});var as=M((Vf,wu)=>{wu.exports=["aaron","abad","abarca","abbate","abbey","abbie","abbott","abby","abdullah","abel","abell","abercrombie","abernathy","abernethy","abeyta","abigail","ables","abner","abney","abraham","abrams","abramson","abrego","abreu","absher","abshire","acevedo","aceves","acker","ackerman","ackley","acklin","acord","acosta","acree","acuff","acuna","ada","adah","adair","adaline","adam","adame","adames","adams","adamski","adamson","adcock","addie","addington","addis","addison","adela","adelaida","adelaide","adele","adelia","adelina","adeline","adell","adella","adelle","adena","adina","adkins","adkinson","adkison","adkisson","adler","adorno","adria","adrian","adriana","adriane","adrianna","adrianne","adrien","adriene","adrienne","afton","agatha","agnes","agnew","agnus","agosto","agripina","aguayo","agueda","aguero","aguiar","aguila","aguilar","aguilera","aguirre","agustin","agustina","ahearn","ahern","ahlers","ahmad","ahmed","ahn","ahner","aho","ahrens","ahumada","aida","aiello","aiken","aikens","aiko","aileen","ailene","aimee","ainsworth","aisha","aitken","aja","aker","akers","akiko","akilah","akins","alaina","alaine","alan","alana","alane","alanis","alaniz","alanna","alarcon","alayna","alba","albanese","albano","albaugh","albers","albert","alberta","albertha","albertina","albertine","alberto","albertson","albin","albina","albrecht","albright","albritton","alcala","alcantar","alcantara","alcaraz","alcorn","alda","aldana","alden","alderete","alderson","aldrich","aldridge","alease","alecia","aleen","aleida","aleisha","alejandra","alejandrina","alejandro","aleman","alena","alene","alesha","aleshia","alesia","alessandra","alessi","aleta","aletha","alethea","alethia","alex","alexa","alexander","alexandra","alexandria","alexia","alexis","alfano","alfaro","alfonso","alford","alfred","alfreda","alfredia","alger","ali","alia","alica","alice","alicea","alicia","alida","alina","aline","alisa","alise","alisha","alishia","alisia","alison","alissa","alita","alix","aliza","alla","allain","allan","allard","alleen","allegra","alleman","allen","allena","allene","alleyne","allgood","allie","alline","allison","allman","allmon","allred","allyn","allyson","alma","almanza","almaraz","almazan","almeda","almeida","almeta","almonte","alona","alonso","alonzo","alpert","alston","alsup","alta","altagracia","altamirano","altha","althea","altman","alton","alva","alvarado","alvardo","alvarez","alvera","alverez","alverson","alverta","alves","alvey","alvina","alvis","alyce","alycia","alysa","alyse","alysha","alysia","alyson","alyssa","amada","amador","amal","amalia","aman","amanda","amaral","amaro","amato","amaya","amber","amberly","ambriz","ambrose","amee","amelia","america","amerson","ames","amey","amick","amie","amiee","amin","amina","amira","ammerman","ammie","amos","amparo","amundson","amy","anabel","analisa","anamaria","anastacia","anastasia","anaya","ancheta","andera","anders","andersen","anderson","anderton","andes","andino","andra","andrade","andre","andrea","andree","andres","andresen","andress","andrew","andrews","andria","andrus","anette","ange","angela","angele","angelena","angeles","angelia","angelica","angelika","angelina","angeline","angelique","angelita","angell","angella","angelo","angelyn","angie","angila","angla","anglea","anglin","anguiano","angulo","angus","anh","anika","anisa","anisha","anissa","anita","anitra","anja","anjanette","anjelica","ann","anna","annabel","annabell","annabelle","annalee","annalisa","annamae","annamaria","annamarie","anne","anneliese","annelle","annemarie","annett","annetta","annette","annice","annie","annika","annis","annita","annmarie","anselmo","ansley","anson","anthony","antionette","antoine","antoinette","anton","antonelli","antonetta","antonette","antonia","antonietta","antonina","antonio","anya","aparicio","apodaca","apolonia","aponte","appleby","applegate","appleton","applewhite","appling","apryl","aquilar","aquino","araceli","aracelis","aracely","aragon","araiza","arana","aranda","arango","araujo","arbogast","arbuckle","arce","arcelia","arceneaux","archambault","archibald","archie","archuleta","arciniega","ardath","ardelia","ardell","ardella","ardelle","ardis","ardith","ardoin","arellano","aretha","arevalo","argelia","argentina","argo","arguelles","arguello","argueta","ariana","ariane","arianna","arianne","arica","arie","ariel","arielle","arla","arlean","arleen","arlena","arlene","arletha","arletta","arlette","arlinda","arline","arlyne","armanda","armandina","armbruster","armendariz","armenta","armentrout","armes","armida","armijo","arminda","armistead","armitage","armstead","armstrong","arndt","arneson","arnett","arnetta","arnette","arnita","arnold","arnone","aronson","arredondo","arreola","arriaga","arrington","arriola","arrowood","arruda","arsenault","arteaga","arthur","artie","artis","arvilla","arvizu","arwood","arzola","asberry","asbury","asha","ashanti","ashbaugh","ashburn","ashby","ashcraft","ashe","ashely","asher","ashford","ashlea","ashlee","ashleigh","ashley","ashli","ashlie","ashly","ashlyn","ashmore","ashton","ashworth","asia","askins","asley","assunta","aston","astrid","asuncion","atchison","atchley","atencio","athena","atherton","athey","atkins","atkinson","attaway","atwater","atwell","atwood","aube","aubin","aubrey","aucoin","audet","audette","audie","audra","audrea","audrey","audria","audrie","audry","augusta","augustin","augustina","augustine","augustus","ault","aultman","aundrea","aurea","aurelia","aurora","aurore","austin","auten","autrey","autry","ava","avalos","avelar","avelina","avent","averett","averill","avery","avila","aviles","avina","avis","avril","awilda","ayako","ayala","ayana","ayanna","aycock","ayer","ayers","ayesha","ayotte","azalee","azar","azevedo","azucena","azzie","babara","babb","babcock","baber","babette","babin","babineaux","baca","bachman","backman","backus","bader","badgett","badillo","baer","baez","baeza","bagby","baggett","bagley","bagwell","bahena","bahr","baier","bailes","bailey","baillargeon","baily","bain","baines","bair","baird","baisden","bakke","bakken","bakker","balch","balcom","balderas","baldridge","baldwin","ballance","ballard","ballenger","ballentine","ballesteros","ballew","ballinger","ballou","baltazar","balzer","bambi","banas","bancroft","bankhead","bankston","bannon","banta","banuelos","bao","baptiste","barabara","barahona","barajas","baran","baranowski","barba","barbar","barbara","barbee","barbera","barbieri","barbosa","barbour","barboza","barbra","barclay","barden","bardwell","barela","barfield","barger","barham","barhorst","barkley","barksdale","barlow","barnard","barner","barnes","barnett","barnette","barnhart","barnhill","barnum","barnwell","barone","barr","barragan","barraza","barrera","barreto","barrett","barrick","barrie","barrientos","barringer","barrington","barron","barros","barry","barta","bartel","bartell","bartels","barth","bartholomew","bartlett","bartley","barto","bartz","bascom","basham","basile","basilia","basinger","baskerville","baskin","bassett","bastian","batchelder","batchelor","bateman","batey","batista","batson","battaglia","battista","batton","baty","baucom","bauer","baugh","baugher","baughman","baum","bauman","baumann","baumgardner","baumgartner","bautista","baxley","bayer","bayless","baylor","bayne","bazan","bazemore","beaird","beal","beale","beall","beals","beaman","beamon","beane","bearden","beardsley","beasley","beason","beaton","beatrice","beatris","beatriz","beattie","beatty","beaty","beauchamp","beaudette","beaudoin","beaudry","beaulah","beaulieu","beaumont","beauregard","bebe","becerra","bechtel","bechtold","becker","beckett","beckford","beckham","becki","beckie","beckley","beckman","beckner","beckwith","becky","becnel","bedard","bedford","bedwell","beebe","beecher","beeler","beem","beeman","beene","beesley","beeson","begay","beggs","begley","behling","behr","behrens","bejarano","belanger","belden","belen","belew","belia","belinda","belisle","belk","belkis","belknap","bella","bellamy","belle","beller","bellinger","bello","belton","beltran","beltz","belva","bemis","benally","benavides","benavidez","benbow","benedetto","benedict","benefield","benfield","benford","benge","benham","benita","benites","benitez","benn","benner","bennett","bennie","benning","bennington","benoit","benson","bentley","benton","bentz","benz","berard","berenice","bergen","berger","bergeron","bergin","berglund","bergman","bergmann","bergquist","bergstrom","berkey","berkley","berkowitz","berman","bermudez","berna","bernadette","bernadine","bernal","bernard","bernarda","bernardina","bernardine","bernardo","berndt","berneice","berner","bernetta","bernhardt","bernice","bernie","berniece","bernier","bernita","bernstein","berrios","berryhill","berryman","berta","bertha","bertie","bertram","bertrand","berube","beryl","bess","bessette","bessie","betancourt","beth","bethanie","bethann","bethany","bethea","bethel","bethune","betsey","betsy","bette","bettencourt","bettie","bettina","bettis","betts","betty","bettyann","bettye","betz","beula","beulah","bev","bevan","beveridge","beverlee","beverley","beverly","bevins","bevis","bewley","beyer","bianca","bianchi","bianco","bibb","bibbs","bickel","bickerstaff","bickford","biddle","bidwell","bieber","bierman","bigelow","biggers","biggerstaff","bigham","bigler","bigley","bilbrey","biller","billi","billie","billingsley","billington","billiot","billups","billy","billye","bilodeau","bilyeu","binette","binford","bingaman","bingham","binion","binkley","binns","birchfield","birdsall","birdsong","birdwell","birgit","birmingham","birnbaum","birt","bischoff","bissell","bissonnette","bitner","bittner","bivens","bivins","bixby","bixler","blackburn","blackford","blackman","blackmon","blackmore","blackshear","blackstock","blackstone","blackwell","blaine","blair","blais","blaisdell","blake","blakely","blakemore","blakeney","blakeslee","blakey","blakley","blakney","blalock","blanc","blanca","blanch","blanchard","blanche","blanchette","blanding","blaney","blankenship","blanton","blaylock","bledsoe","blevins","bloch","blodgett","blomquist","blondell","bloodworth","bloomfield","blouin","blount","bluhm","blum","blume","blumenthal","bly","blythe","boardman","boatright","boatwright","bobb","bobbi","bobbie","bobbitt","bobby","bobbye","bobette","bobo","bocanegra","boddie","boden","bodine","bodnar","boehm","boettcher","bogard","bogart","boger","boggess","boggs","bohannan","bohannon","bohn","boisvert","bojorquez","bok","boland","bolanos","bolding","boldt","bolduc","bolen","boley","bolick","bolin","boling","bolinger","bollinger","bolton","bolyard","boman","bomar","bonanno","boney","bonham","bonilla","bonin","bonita","bonnell","bonner","bonnett","bonney","bonnie","bonny","bono","booher","booker","bookout","boone","boothe","bopp","borchardt","borchers","bordeaux","bordelon","borden","boren","borg","borges","borja","borkowski","borowski","borrego","borrero","borst","bosch","bosco","bosley","bost","bostic","bostick","bostwick","boswell","bosworth","botelho","botello","bouchard","boucher","boudreau","boudreaux","bouffard","boughton","bouie","boulanger","bouldin","boulware","bourassa","bourque","bousquet","boutin","boutte","boutwell","bova","bove","bowden","bowe","bowen","bowens","bowes","bowie","bowker","bowles","bowlin","boyce","boyd","boyer","boyes","boyett","boyette","boykin","boykins","boylan","boyle","boyles","boynton","bozarth","bozeman","bracey","brackett","bracy","bradberry","bradbury","braddock","braddy","braden","bradfield","bradford","bradley","bradshaw","brady","bragdon","bragg","brainard","braithwaite","braley","bramblett","bramlett","brammer","branda","brande","brandee","brandenburg","brandes","brandi","brandie","brandon","brandt","branham","brann","brannan","brannen","brannon","branscum","branson","brantley","branton","branum","brashear","braswell","bratcher","bratton","braud","brauer","braun","brawley","brawner","braxton","brayton","brazell","braziel","breana","breann","breanna","breanne","breault","breaux","breazeale","breckenridge","bree","breeden","breedlove","breen","brehm","breland","bremer","brenda","brenna","brennan","brenneman","brenner","bresnahan","brett","bretz","breunig","brewington","brewton","brian","briana","brianna","brianne","brice","briceno","bricker","brickey","bridgeman","bridgers","bridget","bridgett","bridgette","bridgewater","brien","brigette","briggs","brigham","brigid","brigida","brigitte","briley","brinda","brinker","brinkley","brinkman","brinson","brinton","briones","brisco","briscoe","briseno","brisson","brister","bristol","bristow","britany","britney","britni","brito","britt","britta","brittain","brittaney","brittani","brittanie","brittany","britteny","brittingham","brittney","brittni","brittny","britton","broadbent","broaddus","broadnax","broadus","broadwater","brochu","brockington","brockman","brockway","broderick","brodeur","brodie","brodsky","brody","brogdon","brokaw","bromley","bronson","bronwyn","brooke","brooker","brookins","brookshire","broome","broomfield","brophy","brotherton","broughton","broussard","browder","brower","browne","brownell","brownfield","brownlee","broyles","brubaker","bruce","brumbaugh","brumfield","brumley","brummett","bruna","brundage","brune","brunelle","bruner","brunilda","brunner","bruno","bruns","brunson","bruton","bryan","bryanna","bryant","bryce","brynn","bryson","bucci","buchanan","bucher","buchholz","buckingham","buckley","buckman","buckner","budd","budde","buehler","buell","buena","bueno","buenrostro","buettner","buffington","bufford","buffy","buford","bugg","buggs","bui","buie","bula","bulah","bullard","bullen","buller","bullington","bullins","bullis","bulter","bumgardner","bumgarner","bunn","bunnell","bunton","burbank","burch","burcham","burchell","burchett","burchette","burchfield","burdett","burdette","burdick","burdine","burford","burge","burgett","burgin","burgos","burkett","burkey","burkhalter","burkhardt","burkhart","burkholder","burleigh","burleson","burlingame","burma","burmeister","burnell","burnett","burnette","burney","burnham","burrell","burress","burris","burroughs","burrus","burruss","burson","burt","burwell","busch","bushey","bushnell","bussard","busse","bussell","bussey","bustamante","bustos","butterfield","butterworth","butz","buxton","buzzell","byars","bybee","byer","byerly","byers","byington","byler","bynum","byrd","byrne","byrnes","byron","byrum","caballero","caban","cabe","cabral","cabrales","cabrera","caceres","caddell","cadena","cadwell","cady","caffey","cagle","cahill","cahoon","caine","caines","caitlin","caitlyn","calabro","calandra","calder","calderon","caldwell","calfee","calhoun","calista","callaghan","callahan","callaway","callen","callender","callie","callihan","callis","callison","calloway","calton","calvert","calvillo","calvin","calvo","calzada","camacho","camara","camarena","camargo","camarillo","cambell","camelia","camellia","cameron","cami","camie","camila","camilla","camille","camire","cammack","cammie","cammy","campbell","campuzano","canada","canaday","canady","canales","candace","candance","candelaria","candelario","candi","candice","candida","candie","candis","candler","candra","candyce","cannady","cano","cantara","cantrell","cantu","cantwell","cao","capel","capone","capps","caprice","capuano","caputo","cara","caraballo","carbajal","carbaugh","carbone","carden","cardenas","cardin","cardinale","cardona","cardoso","cardoza","cardwell","caren","carey","cargile","cargill","cari","caridad","carie","carillo","carin","carina","carisa","carissa","carita","carl","carla","carlee","carleen","carlena","carlene","carleton","carletta","carley","carli","carlie","carlile","carlin","carline","carlisle","carlita","carlo","carlos","carlota","carlotta","carlsen","carlson","carlton","carly","carlyle","carlyn","carma","carmack","carman","carmel","carmela","carmelia","carmelina","carmelita","carmella","carmen","carmichael","carmina","carmody","carmon","carmona","carnahan","carner","carnes","caro","carola","carolann","carole","carolee","carolin","carolina","caroline","caroll","carolyn","carolyne","carolynn","caron","carothers","caroyln","carpio","carranza","carrasco","carrasquillo","carreno","carreon","carrera","carrero","carri","carrico","carrie","carrigan","carrillo","carrington","carrizales","carrol","carroll","carruth","carruthers","carson","carswell","cartagena","cartier","carty","caruso","caruthers","carvajal","carvalho","cary","caryl","carylon","caryn","casandra","casanova","casares","casarez","casavant","cascio","casey","cashman","casiano","casias","casie","casillas","casimira","caskey","cason","casper","cass","cassady","cassandra","cassaundra","cassel","cassell","cassey","cassi","cassidy","cassie","cassity","cassondra","cassy","castaneda","castano","castanon","casteel","castellano","castellanos","castello","castillo","castleberry","castleman","casto","caston","castorena","castro","caswell","catalan","catalano","catalina","catarina","caterina","catharine","cathcart","catherin","catherina","catherine","cathern","catheryn","cathey","cathi","cathie","cathleen","cathrine","cathryn","cathy","catina","catlett","catlin","cato","caton","catrice","catrina","catron","caudell","caudill","cauley","caulfield","cauthen","cavanaugh","cavazos","cavender","cavin","caviness","cawley","cawthon","cayla","caylor","cazares","ceasar","ceballos","cecelia","cecil","cecila","cecile","cecilia","cecille","cecily","cedeno","cedillo","ceja","celena","celesta","celeste","celestina","celestine","celia","celina","celinda","celine","celsa","centeno","ceola","cepeda","cerda","cervantes","cervantez","chabot","chacon","chadwell","chadwick","chae","chaffee","chaffin","chafin","chaisson","chalfant","chalmers","chamberlain","chamberlin","chamblee","chambless","chambliss","chamness","champlin","chan","chana","chanda","chandra","chanel","chanell","chanelle","chaney","chang","chantal","chantay","chante","chantel","chantell","chantelle","chao","chapa","chaparro","chapin","chaplin","chappell","chapple","chara","charbonneau","charest","charette","charis","charise","charissa","charisse","charita","charla","charland","charleen","charlena","charlene","charles","charlesetta","charlette","charley","charlie","charline","charlott","charlotte","charlsie","charlton","charlyn","charmain","charmaine","charolette","charron","chartier","chasidy","chasity","chassidy","chastain","chasteen","chatham","chatman","chau","chavarria","chavers","chaves","chavez","chavira","chavis","chaya","cheatham","chee","chelsea","chelsey","chelsie","chen","chenault","cheney","cheng","chenoweth","cher","chere","cheree","cherelle","cheri","cherie","cherilyn","cherise","cherly","cherlyn","cherri","cherrie","cherryl","chery","cheryl","cheryle","cheryll","chesser","chesson","chester","cheung","chewning","cheyenne","chiang","chidester","chieko","childers","childress","childs","chilton","ching","chinn","chipman","chiquita","chisholm","chism","chisolm","chitwood","chiu","chloe","cho","choate","choe","choi","chong","chouinard","chris","chrisman","chrissy","christ","christa","christal","christeen","christel","christen","christena","christene","christensen","christenson","christi","christia","christian","christiana","christiane","christiansen","christianson","christie","christin","christina","christine","christinia","christman","christmas","christner","christopher","christopherso","christy","chronister","chrystal","chu","chun","chung","churchill","churchwell","ciara","cicely","ciera","cierra","cimino","cinda","cinderella","cindi","cindie","cindy","cinthia","cintron","cioffi","cira","cisneros","claar","claiborne","clair","claire","clancy","clanton","clapp","clara","clardy","clare","clarence","claretha","claretta","claribel","clarice","clarinda","clarine","claris","clarisa","clarissa","clarita","clark","clarke","clarkson","classie","claude","claudette","claudia","claudie","claudine","claudio","claus","clausen","claussen","clawson","claxton","claycomb","claypool","claypoole","clayton","claytor","cleary","clegg","cleghorn","cleland","clelia","clemencia","clemens","clemente","clementina","clementine","clements","clemmer","clemmie","clemmons","clemons","cleo","cleopatra","cleora","cleotilde","cleta","cleveland","clevenger","clifford","clifton","clinkscales","clinton","cloninger","clora","clorinda","clotilde","clouse","cloutier","clower","clowers","cloyd","cluff","clyburn","clyde","clymer","coakley","coan","coates","cobos","coburn","cochran","cochrane","cockerham","cockrell","codi","cody","coe","coelho","coen","cofer","coffelt","coffey","coffman","cofield","cogan","coggins","cogswell","cohen","cohn","coker","colangelo","colbert","colburn","colby","coldiron","coleen","colella","coleman","colene","coletta","colette","collado","collazo","colleen","collen","collene","collett","collette","colletti","colley","collin","collins","collinsworth","collum","colman","colombo","colquitt","colson","colston","colton","colucci","colunga","colvin","colwell","comeau","comeaux","compton","comstock","conant","conaway","concepcion","concetta","concha","conchita","conde","condon","congdon","conklin","conley","conlin","conlon","connally","connell","connelly","connie","connolly","connor","connors","conover","conrad","conroy","constance","constantine","constantino","consuela","consuelo","contessa","conti","contreras","conway","conwell","conyers","cooke","cooksey","cookson","cooley","coolidge","coomer","cooney","copeland","copenhaver","copley","coppage","coppola","cora","coralee","coralie","corazon","corbett","corbin","corbitt","corcoran","cordeiro","cordelia","cordell","corder","cordero","cordes","cordia","cordie","cordoba","cordova","coreen","corene","coretta","corey","cori","corie","corina","corine","corinna","corinne","corley","corliss","cormier","cornejo","cornelia","cornelison","cornelius","cornell","cornish","cornwell","coronado","coronel","corpuz","corr","corrales","correa","correia","correll","corrie","corrigan","corrin","corrina","corrine","corrinne","corriveau","corson","cortes","cortese","cortez","cortney","corum","corwin","cory","cosby","cosentino","cosgrove","cosme","cosper","costanzo","costello","coston","cota","cothran","cotten","cottingham","cottle","cotto","cottrell","cottrill","coughlin","coulombe","coulson","courson","courtney","covarrubias","covington","cowart","cowden","cowell","cowen","cowgill","cowles","cowley","coyle","coyne","cozart","crabb","crabtree","craddock","crafton","craighead","crain","cramer","crampton","crandall","crandell","cranford","crawford","crawley","crayton","creech","creekmore","creighton","crenshaw","creola","crespo","creswell","cribb","cribbs","crider","crigger","crim","criner","crippen","cris","criselda","criss","crissman","crissy","crist","crista","cristal","cristen","cristi","cristie","cristin","cristina","cristine","cristy","criswell","crites","crittenden","crocker","crockett","cromer","cromwell","cronin","croom","crosby","crossland","crossley","crossman","crosson","croteau","crotty","crowe","crowell","crowl","crowley","crowson","crowther","croy","cruce","crum","crumley","crumpler","crumpton","crutcher","crutchfield","cruz","crysta","crystle","cuc","cuellar","cuevas","culbertson","culbreth","cullen","culley","cullum","culp","culpepper","cumming","cummings","cundiff","cunha","cunningham","cuomo","cupp","curcio","cureton","curiel","curley","curran","currey","currin","curtin","curtis","curtiss","cusack","cushing","cushman","cusick","custer","cuthbertson","cutright","cutshall","cyndi","cyndy","cynthia","cyr","cyrstal","cyrus","cythia","dabbs","dabney","dacia","dacosta","dade","daggett","dagmar","dagny","dagostino","dahlberg","dahlgren","dahlia","daigle","dail","dailey","daina","daine","daisey","dakota","dale","dalene","dalessandro","dalessio","daley","dalia","dalila","dallas","dalrymple","dalton","daly","damaris","damato","dambrosio","dameron","damian","damiano","damico","damon","dampier","damron","dan","dana","danae","dancy","dandrea","dandridge","danelle","danette","danford","danforth","dangelo","dangerfield","dani","dania","danica","daniel","daniela","daniele","daniell","daniella","danielle","daniels","danielson","danika","danille","danita","danley","dann","danna","danner","dannette","dannie","dannielle","dansby","dantzler","danuta","danyel","danyell","danyelle","dao","daphine","daphne","dara","darby","darcel","darcey","darci","darcie","darcy","dardar","darden","daria","darla","darleen","darlena","darlene","darline","darnell","darr","darrow","daryl","dashiell","dasilva","daugherty","daughtry","daves","davey","david","davida","davidson","davie","davies","davila","davina","davis","davison","davisson","davy","dawes","dawkins","dawna","dawne","dawson","daye","dayle","dayna","daysi","dayton","deadra","deana","deanda","deandra","deandrea","deane","deangelis","deangelo","deann","deanna","deanne","dearborn","dearing","dearman","deas","deason","deaton","deaver","deb","debbi","debbie","debbra","debby","debera","deberry","debi","deboer","debora","deborah","debose","debra","debrah","debroah","decarlo","decastro","deckard","decosta","decoteau","dede","dedra","dee","deeann","deeanna","deedee","deedra","deegan","deel","deen","deena","deering","deese","deetta","defazio","defelice","degraw","degroot","deguzman","dehart","dehaven","deherrera","deidra","deidre","deirdre","deitz","deja","dejesus","dejong","delacruz","delafuente","delagarza","delaine","delana","delancey","delaney","delano","delao","delapaz","delarosa","delatorre","delcie","delena","deleon","delfina","delgadillo","delgado","delia","delicia","delila","delilah","delinda","delisa","delisle","delk","dell","della","dellinger","delma","delmy","deloach","delois","deloise","delong","delora","deloras","delorenzo","delores","deloris","delorse","delossantos","delozier","delp","delpha","delphia","delphine","delrio","delrosario","delsie","deltoro","deluca","deluna","delvalle","delvecchio","demarco","demars","demello","demers","demetra","demetria","demetrice","demetrius","deming","demoss","dempsey","dena","denae","dendy","deneen","denese","denham","denice","denis","denise","denisha","denison","denisse","denita","denman","denna","dennard","denney","dennis","dennise","dennison","denny","densmore","denson","denton","denyse","deon","deonna","depalma","depew","depriest","derosa","derose","derosier","derouen","derr","derryberry","desai","desalvo","desantis","desilva","desimone","desirae","desiree","desjardins","desmarais","desmond","desouza","despain","despina","desrochers","desrosiers","dessie","destefano","detra","detwiler","deutsch","devaney","devaughn","devault","dever","deville","devin","devine","devito","devlin","devoe","devon","devona","devora","devorah","devore","devries","dewberry","deweese","dewey","deyo","deyoung","dia","dian","diana","diane","diann","dianna","dianne","dias","diaz","dicarlo","dicken","dickenson","dickerson","dickinson","dickman","dickson","diedra","diedre","diego","diehl","diep","dierdre","dietrich","dietz","diez","diggins","diggs","digiacomo","digiovanni","digna","dillard","diller","dilley","dillingham","dillion","dillman","dillon","dillow","dilorenzo","dilworth","dimaggio","dimarco","dimmick","dina","dinah","dineen","dingess","dingman","dinh","dinkins","dinorah","dinsmore","dion","dione","dionna","dionne","diorio","dipietro","dishman","dismuke","disney","distefano","dittman","dittmer","divina","dix","dixie","dixon","dixson","dizon","doak","doan","doane","dobbs","dobson","doby","dockery","dodd","dodds","dodie","dodson","doering","doerr","doggett","doherty","doiron","dolan","dollie","dolores","doloris","dombrowski","domenica","dominga","domingo","dominguez","dominica","dominick","dominique","dominque","dominquez","domitila","domonique","dona","donahue","donald","donaldson","donato","donegan","donella","donelson","donetta","donette","doney","donita","donley","donna","donnell","donnelly","donner","donnetta","donnette","donnie","donofrio","donohoe","donohue","donovan","donya","doody","dooley","doolittle","dora","doran","dorathy","dorcas","dore","doreatha","doreen","dorene","doretha","dorethea","doretta","dori","doria","dorian","dorie","dorinda","dorine","doris","dorla","dorman","dorn","dorotha","dorothea","dorothy","dorris","dorsett","dorsey","dortch","dortha","dorthea","dorthey","dorthy","dorton","dostie","dotson","dottie","dotty","doucette","doud","dougherty","douglas","douglass","dovie","dowdell","dowden","dowell","dowling","downes","downey","doyle","doyon","drayton","dreama","dreher","drema","drennan","drennen","dressler","drews","dreyer","driggers","driscoll","driskell","drouin","drucilla","drumm","drummond","drury","drusilla","dryden","drye","duarte","dube","dubois","dubose","ducharme","duckett","duckworth","duclos","duda","dudek","dudley","duenas","duffey","duffy","dufour","dufrene","dufresne","dugan","dugas","duggan","dugger","duggins","duhon","dulaney","dulce","dulcie","duley","dulin","dumont","dunagan","dunaway","dunbar","duncan","dunford","dungan","dunham","dunigan","dunkin","dunkle","dunlap","dunleavy","dunlop","dunn","dunne","dunson","dunston","dunton","duong","duplessis","dupont","dupre","dupree","duprey","dupuis","duque","duquette","duran","durand","durante","durbin","durden","duren","durfee","durham","durkee","durkin","duron","durr","durrett","dusti","dustin","dutcher","dutra","dutton","duval","duvall","dvorak","dwana","dwyer","dyan","dykstra","dyson","eaddy","eades","eads","eady","eagan","eakin","eakins","eames","eanes","earle","earlean","earleen","earlene","earley","earlie","earline","earnestine","earp","eartha","easley","eason","easterday","eastman","easton","eastwood","eatmon","eaton","eberhardt","eberle","eberly","ebersole","ebert","ebner","eboni","ebonie","eby","eccles","echevarria","echeverria","echols","eck","eckard","eckenrode","ecker","eckert","eckhardt","ecklund","eckman","eckstein","eda","edda","eddie","eddings","eddington","eddins","edelman","edelmira","edelstein","eden","edens","edgar","edgerton","edgington","edie","edington","edison","edith","edmiston","edmond","edmonds","edmondson","edmonson","edmunds","edmundson","edna","edra","edris","edson","edward","edwards","edwina","edyth","edythe","effie","egan","egbert","eggert","eggleston","ehlers","ehrlich","ehtel","eichelberger","eicher","eichhorn","eichler","eidson","eiland","eileen","eilene","eisele","eisenberg","eklund","ela","eladia","elaina","elaine","elam","elana","elane","elanor","elayne","elba","elbert","elda","eldora","eldred","eldredge","eldridge","eleanor","eleanora","eleanore","elease","elena","elene","eleni","elenor","elenora","elenore","eleonor","eleonora","eleonore","eley","elfreda","elfrieda","elfriede","elgin","elia","eliana","elias","eliason","elicia","elida","elidia","elin","elina","elinor","elinore","elisa","elisabeth","elise","elisha","elissa","eliz","eliza","elizabet","elizabeth","elizbeth","elizebeth","elizondo","elke","elkins","ella","ellamae","ellan","elledge","ellen","ellena","ellender","eller","elli","ellie","ellinger","ellingson","ellington","elliot","elliott","ellis","ellison","ellsworth","elly","ellyn","elma","elmer","elmira","elmore","elna","elnora","elodia","elois","eloisa","eloise","elouise","elrod","elsa","elsie","elson","elston","elswick","elsy","elva","elvera","elvia","elvie","elvina","elvira","elwanda","elwell","elwood","ely","elyse","elza","ema","emanuel","embree","embrey","embry","emelda","emelia","emelina","emeline","emely","emerick","emerita","emerson","emiko","emilee","emilia","emilie","emily","emma","emmaline","emmert","emmett","emmie","emmons","emmy","emogene","emory","emrich","emrick","encarnacion","enciso","enda","endicott","endres","endsley","enedina","eneida","eng","engel","engelhardt","england","engle","engleman","engler","englert","english","engstrom","enid","enloe","ennis","enoch","enola","enos","enright","enriqueta","enriquez","ensor","epifania","epley","epperson","epps","epstein","erb","erdman","erdmann","eric","erica","ericka","erickson","ericson","erika","erin","erinn","erlene","erlinda","erline","erma","ermelinda","erminia","erna","ernest","ernestina","ernestine","ernst","erskine","ervin","erwin","eryn","escalante","escalera","escamilla","escobar","escobedo","eshelman","eskew","eskridge","eslinger","esmeralda","esparza","esperanza","espinal","espino","espinosa","espinoza","esposito","esqueda","esquibel","esquivel","essary","essex","essie","esta","estabrook","estefana","estela","estell","estella","estelle","estep","ester","estes","estevez","esther","estrada","estrella","etha","ethel","ethelene","ethelyn","etheridge","ethridge","ethyl","etienne","etsuko","etta","etter","ettie","eubank","eubanks","eudy","eufemia","eugena","eugene","eugenia","eugenie","eulah","eulalia","eun","euna","eunice","eura","eure","eusebia","eustolia","eva","evalyn","evan","evangelina","evangeline","evangelista","evans","eveland","evelia","evelin","evelina","eveline","evelyn","evelyne","evelynn","evenson","everett","everette","everhart","evers","eversole","everson","evette","evia","evie","evita","evon","evonne","ewa","ewald","ewell","ewing","exie","exum","eyler","ezell","ezzell","faber","fabian","fabiola","fabrizio","fagan","fahey","fairbanks","fairchild","faircloth","fairfield","fairley","faison","fajardo","falco","falcone","falgoust","falgout","falk","falkner","fallon","fancher","fanelli","fann","fannie","fannin","fanny","fant","farah","farber","faria","farias","faris","farkas","farley","farnham","farnsworth","farr","farrah","farrar","farrell","farrington","farris","farwell","fasano","fassett","fatima","fatimah","faucher","faught","faulk","faulkner","faust","faustina","faviola","fawcett","faye","fazio","featherston","featherstone","fecteau","feder","federico","feeley","feeney","fehr","feinberg","feinstein","felder","feldman","felecia","felica","felice","felicia","feliciano","felicidad","felicita","felicitas","felipa","felipe","felisa","felisha","felix","felker","feltner","felton","fenderson","fendley","fenn","fennell","fenner","fenske","fenton","fenwick","ferebee","ferguson","ferland","fermina","fernanda","fernande","fernandes","fernandez","fernando","ferne","ferrante","ferrari","ferraro","ferree","ferreira","ferrell","ferrer","ferretti","ferri","ferrin","ferris","ferro","fessler","fewell","fick","fidela","fidelia","fidler","fiedler","fierro","fifield","figueroa","fike","fikes","fillmore","filomena","fincher","findlay","findley","finke","finkelstein","finkle","finlay","finley","finn","finnegan","finnell","finney","fiona","fiore","fischer","fiscus","fishman","fiske","fite","fitz","fitzgerald","fitzhugh","fitzpatrick","fitzsimmons","fitzwater","flagg","flaherty","flanagan","flanders","flanigan","flannery","flatt","flavia","fleenor","fleetwood","fleischer","fleischman","flemming","fleta","flickinger","flinn","florance","florencia","florene","florentina","flores","floretta","florez","floria","florinda","florine","florio","florrie","flossie","flournoy","floy","floyd","fluellen","fluker","flynn","flynt","fogarty","fogel","fogg","foley","follett","folse","folsom","foltz","fonda","fong","fonseca","fontaine","fontana","fontanez","fontenot","fontes","foote","foran","forbes","forbis","forcier","forde","fordham","foret","forman","forney","forrest","forrester","forsberg","forster","forsyth","forsythe","fortenberry","fortier","fortin","fortner","fortney","fortson","fortuna","fortunato","foti","fournier","foust","fouts","fowlkes","foxworth","frady","fraga","fraley","frampton","fran","france","francene","frances","francesca","franchesca","francie","francina","francine","francis","francisca","francisco","franck","franco","francois","francoise","franke","frankel","frankie","franko","fransisca","frantz","franz","franzen","fraser","frasier","frausto","frawley","frazee","frazer","frazier","frechette","fred","freda","fredda","freddie","frederica","frederick","fredericka","fredericks","frederickson","fredette","fredia","fredrick","fredricka","fredrickson","freeda","freeland","freese","fregoso","freida","freitag","freitas","fretwell","freund","frey","frias","frick","fricke","frida","friday","frieda","friedman","friedrich","friel","frierson","friesen","frink","frisbee","frisbie","frisby","frisch","fritts","fritz","frizzell","froehlich","fromm","fruge","frye","fuchs","fuentes","fugate","fuhrman","fujimoto","fulbright","fulcher","fulford","fulk","fulkerson","fulks","fullerton","fullmer","fulmer","fulton","fults","fultz","fumiko","funches","funderburk","fung","funke","funkhouser","fuqua","furman","furr","furst","furtado","fusco","fussell","futch","futrell","fye","gabel","gabriel","gabriela","gabriele","gabriella","gabrielle","gaddis","gaddy","gadson","gaffney","gagliano","gagliardi","gagne","gagnon","gailey","gaines","gainey","gaitan","gaither","galan","galarza","galbraith","galbreath","galicia","galina","galindo","gallagher","gallaher","gallardo","gallaway","gallego","gallegos","galligan","gallion","gallman","gallo","galloway","gallup","galvan","galvez","galvin","gamache","gambill","gamboa","gambrell","gamez","gandy","gann","gannon","gantt","gantz","gaona","garay","garber","garcia","gard","gardiner","gardner","garfield","garibay","garica","garman","garmon","garnet","garnett","garofalo","garrard","garretson","garrett","garrick","garrido","garris","garrity","garrow","garry","gartner","garton","garver","garvey","garvin","gary","garza","gasaway","gaskill","gaspar","gaspard","gass","gassaway","gastelum","gaston","gatewood","gatlin","gatling","gattis","gatto","gaudet","gaudette","gaudreau","gaughan","gaul","gause","gauthier","gauvin","gavin","gayden","gaye","gayla","gayle","gaylene","gaylor","gaylord","gaynell","gaynelle","gaynor","gaytan","gayton","gearhart","gearldine","geary","gebhardt","gebhart","geddes","geer","gehring","gehrke","geier","geiger","geis","geisler","gelinas","geller","gema","gendron","genevie","genevieve","genevive","genia","genna","gennie","genny","genovese","genoveva","georgann","george","georgeann","georgeanna","georgene","georgetta","georgette","georgia","georgiana","georgiann","georgianna","georgianne","georgie","georgina","georgine","gerald","geraldine","geralyn","gerard","gerber","gerda","gerdes","gerena","gerhardt","gerhart","geri","gerlach","germaine","germany","gerri","gerry","gertha","gertie","gertrud","gertrude","gertrudis","gertude","gervais","geter","getty","getz","geyer","ghislaine","gholston","gia","gianna","gibb","gibbs","gibson","giddens","giddings","gideon","gidget","giese","giffin","gifford","gigi","giglio","giguere","gil","gilberte","gilbertson","gilbreath","gilchrist","gilda","gile","giles","gilkey","gillam","gillard","gillen","gillenwater","gilles","gillespie","gillett","gillette","gilley","gilliam","gillian","gilliard","gilligan","gilliland","gillis","gillispie","gillman","gillum","gilma","gilman","gilmer","gilmore","gilpin","gilreath","gilroy","gilson","gilstrap","gina","ginder","ginette","gingerich","gingras","gingrich","ginny","ginsberg","ginter","giordano","giovanna","gipson","girard","giroux","gisela","gisele","giselle","gish","gita","gittens","giuseppina","givens","gladis","gladney","gladstone","glady","gladys","glaser","glasgow","glasper","glasscock","glasser","glayds","gleason","glenda","glendora","glenn","glenna","glennie","glennis","glick","glidden","glidewell","glinda","glisson","gloria","gluck","glynda","glynis","glynn","gober","goble","godbey","goddard","godfrey","godin","godinez","godoy","godsey","godwin","goebel","goetz","goforth","goines","goins","golda","goldberg","goldfarb","golding","goldman","goldsberry","goldstein","gomes","gomez","gonsalez","gonsalves","gonzales","gonzalez","gooch","goodale","goodall","goode","goodell","gooden","goodin","gooding","goodloe","goodnight","goodrich","goodrum","goodsell","goodson","goodwin","goolsby","gordan","gordon","gordy","goree","gorham","gorman","gormley","gorski","gorton","goshorn","gosnell","goss","gosselin","gossett","gott","gottlieb","gottschalk","gough","gould","goulet","gourley","gouveia","govan","gove","govea","gowen","gower","goyette","graber","grabowski","gracia","gracie","graciela","grady","graf","graff","grafton","gragg","graham","grajeda","grammer","granado","granados","grantham","granville","grasso","grau","gravitt","gravois","graybill","grayce","grayson","graziano","grazyna","greathouse","greco","greeley","greenberg","greene","greenhaw","greenlaw","greenleaf","greenlee","greenwald","greenway","greenwell","greer","greeson","gregg","gregoire","gregor","gregoria","gregorio","gregory","greig","greiner","grenier","gresham","greta","gretchen","gretta","gricelda","grider","grieco","griego","grier","griffen","griffey","griffis","griffith","griffiths","grigg","griggs","grigsby","grijalva","grillo","grimaldi","grimaldo","grimm","grimmett","grimsley","grindle","griner","grisby","grisel","griselda","grisham","grissom","griswold","groce","groff","grogan","groh","grose","grossman","grosso","groth","grover","grubb","grubbs","grube","gruber","grundy","guadalupe","guajardo","guardado","guarino","guay","gudrun","guenther","guerin","guerra","guerrero","guertin","guevara","guffey","guido","guidry","guilford","guillen","guillermina","guillermo","guillory","guillot","guimond","guinn","gulick","gulledge","gullett","gumm","gump","gunderson","gunn","gunther","gupta","gupton","gurley","gurrola","gurule","gusman","gussie","gustafson","gustin","guth","guthrie","gutierrez","gutshall","guyer","guyette","guyton","guzman","gwen","gwenda","gwendolyn","gwenn","gwin","gwinn","gwyn","gwyneth","haag","haas","haase","haber","haberman","hackett","hackman","hackworth","haddad","haddix","hadfield","hadley","hadlock","hae","hafer","haffner","hafner","haga","hagan","hagans","hagar","hage","hageman","hagen","hager","hagerman","hagerty","haggerty","hagler","hagood","hague","hagy","hahn","haigh","haight","haile","hailey","haines","haire","hairston","halcomb","hales","haley","halford","halina","halle","haller","hallett","halley","halliburton","halliday","hallie","hallman","hallock","halloran","hallowell","halpern","halpin","halsey","halstead","halverson","halvorsen","halvorson","hamann","hamblin","hambrick","hamby","hamel","hamer","hamill","hamilton","hamlett","hamlin","hamm","hammack","hamman","hammel","hammett","hammon","hammond","hammonds","hammons","hamner","hampson","hampton","hamrick","han","hana","hancock","handley","hanes","haney","hanh","hanke","hankins","hanley","hanlon","hann","hanna","hannah","hannan","hannelore","hanner","hannigan","hannon","hanrahan","hans","hansen","hanson","harbaugh","harber","harbin","harbison","hardaway","hardcastle","hardee","hardeman","hardesty","hardie","hardiman","hardin","harding","hardison","hardman","hardnett","hardwick","hargett","hargis","hargrave","hargrove","harker","harkey","harkins","harkness","harlan","harless","harley","harlow","harmon","harner","harney","haro","harold","harr","harrell","harrelson","harriet","harriett","harriette","harrigan","harriman","harrington","harris","harrison","harrod","harrold","harter","hartfield","hartford","hartle","hartley","hartman","hartmann","hartnett","hartsell","hartsfield","hartsock","hartung","hartwell","hartwig","harty","hartz","hartzell","hartzog","harvell","harvey","harville","harvin","harwell","harwood","hashimoto","haskell","haskins","hass","hassan","hassell","hassett","hassie","hassler","hasson","hatchett","hatfield","hathaway","hathcock","hathorn","hatley","hatten","hattie","hatton","hauck","haug","haugen","haun","haupt","hauser","havard","haviland","hawes","hawkes","hawkins","hawkinson","hawley","hawn","haworth","hawthorne","hayashi","haydee","hayden","haydon","hayes","haygood","hayley","hayman","hayner","haynes","haynie","haywood","hazelton","hazelwood","hazen","hazlett","hazzard","headley","headrick","healey","healy","heaney","hearn","hearne","heather","heatherly","heaton","hebert","hecht","hecker","heckman","hedden","hedgepeth","hedrick","hedwig","hedy","hee","heffernan","heffner","heflin","hefner","hegarty","heide","heidi","heidy","heike","heil","heilman","heim","hein","heine","heinrich","heins","heintz","heinz","heise","heiser","heisler","helaine","helen","helena","helene","helfrich","helga","helgeson","hellen","hellman","helman","helmer","helmick","helmuth","helton","helwig","hembree","hemingway","hemphill","hendershot","henderson","hendley","hendon","hendren","hendrick","hendricks","hendrickson","hendrix","hendry","henke","henkel","henley","hennessey","hennessy","henninger","henrietta","henriette","henriques","henriquez","henry","hensel","henshaw","hensley","henson","henton","hepburn","hepler","hepner","herbert","herbst","heredia","hereford","herlinda","herma","herman","hermann","hermelinda","hermes","hermila","hermina","hermine","herminia","hermosillo","hernadez","hernandes","hernandez","herndon","herod","herold","herr","herren","herrera","herrick","herrin","herrington","herrmann","herrod","herron","hersey","hersh","hershberger","hershey","herta","hertel","hertha","herzog","hess","hesse","hesson","hester","hetrick","hettie","hetzel","heuer","hewett","hewitt","hewlett","heyer","heyward","heywood","hiatt","hibbard","hibbert","hibbler","hibbs","hickerson","hickman","hickok","hickox","hickson","hiedi","hien","hiers","higa","higbee","higdon","higginbotham","higgins","higgs","highsmith","hightower","higley","hilaria","hilary","hilbert","hilburn","hilda","hilde","hildebrand","hildebrandt","hildegard","hildegarde","hildred","hildreth","hileman","hiles","hillard","hillary","hiller","hilliard","hillis","hillman","hillyer","hilma","hilton","himes","hinckley","hindman","hine","hines","hinkle","hinkley","hinman","hinojosa","hinrichs","hinshaw","hinson","hinton","hintz","hinz","hipp","hiroko","hirsch","hirst","hisako","hitchcock","hite","hitt","hix","hixon","hixson","hoa","hoag","hoagland","hoang","hobart","hobbs","hobson","hoch","hochstetler","hockenberry","hockett","hodge","hodges","hodgkins","hodgson","hodson","hoekstra","hoelscher","hoey","hofer","hoff","hoffer","hoffman","hoffmann","hofmann","hoggard","hogue","holbert","holbrook","holcomb","holcombe","holguin","holifield","holladay","hollander","hollar","hollenbeck","holley","holli","holliday","hollie","hollifield","holliman","hollinger","hollingshead","hollingsworth","hollins","hollis","hollister","holloman","holloway","hollowell","holman","holmberg","holmes","holmgren","holmquist","holsinger","holst","holstein","holston","holter","holton","holtz","holzer","hom","homan","honaker","honea","honeycutt","hoopes","hooten","hopkins","hoppe","hopson","horan","hord","horgan","hornback","hornbeck","horne","hornsby","horowitz","horrocks","horsley","horta","hortencia","hortense","hortensia","horton","horvath","hosey","hoskins","hosmer","hostetler","hostetter","hotchkiss","houchens","houck","houghton","houk","houle","houlihan","householder","houser","housley","housman","houston","hovey","hovis","howard","howarth","howell","howells","hower","howerton","howie","howland","howlett","howse","howze","hoye","hoyle","hoyos","hoyt","hsiu","hsu","hua","huang","hubbard","hubbell","hubble","hubbs","huber","hubert","huckaby","hudak","huddleston","hudgens","hudgins","hudnall","hudson","hudspeth","huebner","huerta","huertas","huey","huffman","hufford","huggins","hughes","hughey","hughs","hui","huie","hulbert","hulda","hulett","hulse","hulsey","humbert","hume","humes","humphrey","humphreys","humphries","hundley","huneycutt","hungerford","hunley","hunnicutt","hunsaker","huntington","huntley","huong","hupp","hurd","hurlburt","hurtado","huskey","hussey","husted","huston","hutchens","hutcherson","hutcheson","hutchings","hutchins","hutchinson","hutchison","huth","hutson","hutt","hutto","hutton","huynh","hwa","hwang","hyacinth","hyatt","hyde","hyden","hyder","hye","hyland","hylton","hyman","hynes","hyo","hyon","hysell","hyun","ibanez","ibarra","ibrahim","ickes","idell","idella","iesha","iglesias","ignacia","ilana","ilda","ileana","ileen","ilene","iliana","ilona","ilse","iluminada","imelda","imes","imhoff","imogene","india","indira","inell","ines","inez","inga","ingalls","ingeborg","ingersoll","ingham","ingraham","ingrid","inman","inocencia","iona","ione","ira","iraida","irby","ireland","irena","irene","irick","irina","irish","irizarry","irma","irmgard","irvin","irvine","irving","irwin","iryna","isa","isaac","isaacs","isaacson","isabel","isabell","isabella","isabelle","isadora","isaura","isbell","isela","isenberg","isham","isidra","isis","islas","isley","isobel","isom","ison","israel","ito","ivana","ivelisse","iverson","ives","ivette","ivey","ivie","ivonne","izaguirre","izetta","izola","izzo","jablonski","jacalyn","jacelyn","jacinda","jacinta","jacinto","jackeline","jackelyn","jacki","jackie","jacklyn","jackqueline","jackson","jaclyn","jaco","jacob","jacobi","jacobo","jacobs","jacobsen","jacobson","jacoby","jacqualine","jacque","jacquelin","jacqueline","jacquelyn","jacquelyne","jacquelynn","jacques","jacquetta","jacquez","jacqui","jacquie","jacquiline","jacquline","jacqulyn","jada","jadwiga","jae","jaffe","jahn","jahnke","jaime","jaimee","jaimes","jaimie","jalbert","jaleesa","jalisa","jama","jame","jamee","jamerson","james","jameson","jamey","jami","jamie","jamieson","jamika","jamila","jamison","jammie","jan","jana","janae","janay","jane","janean","janee","janeen","janel","janell","janella","janelle","janene","janessa","janet","janeth","janett","janetta","janette","janey","jani","janice","janie","janiece","janina","janine","janis","janise","janita","jankowski","jann","janna","jannet","jannette","jannie","jansen","janson","janssen","janyce","jaqueline","jaquelyn","jaques","jaquez","jara","jaramillo","jarboe","jardine","jarman","jarmon","jarrell","jarrett","jarvis","jason","jasso","jaunita","jauregui","javier","jaworski","jaye","jayme","jaymie","jayna","jayne","jaynes","jazmin","jazmine","jeana","jeanbaptiste","jeane","jeanelle","jeanene","jeanett","jeanetta","jeanette","jeanice","jeanie","jeanine","jeanlouis","jeanmarie","jeanna","jeanne","jeannetta","jeannette","jeannie","jeannine","jeffcoat","jefferies","jeffers","jefferson","jeffery","jeffie","jeffrey","jeffreys","jeffries","jemison","jen","jena","jenae","jene","jenee","jenell","jenelle","jenette","jeneva","jeni","jenice","jenifer","jeniffer","jenine","jenise","jenkins","jenks","jenna","jennefer","jennell","jennette","jenni","jennie","jennifer","jenniffer","jennine","jennings","jenny","jensen","jenson","jepson","jeraldine","jeremy","jeri","jerica","jerilyn","jerlene","jernigan","jerome","jerri","jerrica","jerrie","jerry","jesenia","jesica","jeske","jesse","jessee","jessen","jessenia","jessi","jessia","jessica","jessie","jessika","jessup","jestine","jesus","jesusa","jesusita","jeter","jett","jetta","jettie","jewell","jewett","jiles","jill","jillian","jim","jimenez","jimerson","jiminez","jimmie","joan","joana","joane","joanie","joann","joanna","joanne","joannie","joaquina","jobe","jocelyn","jodee","jodi","jodie","jody","joe","joeann","joel","joella","joelle","joellen","joeseph","joesph","joetta","joette","joey","johana","johanna","johanne","johansen","johanson","john","johna","johnetta","johnette","johnie","johnna","johnnie","johnny","johnsen","johnsie","johnson","johnston","johnstone","joi","joie","jolanda","joleen","jolene","jolie","jolin","joline","jolley","jolyn","jolynn","jon","jona","jonas","jone","jonell","jonelle","jones","jong","joni","jonie","jonna","jonnie","joplin","jordan","jordon","jorge","jorgensen","jorgenson","jose","josefa","josefina","josefine","joselyn","joseph","josephina","josephine","josephson","josette","josey","joshua","josie","joslin","joslyn","josphine","jost","joubert","jovan","jovita","jowers","joya","joyce","joycelyn","joye","joyner","juan","juana","juanita","juarez","judd","jude","judi","judie","judith","judkins","judson","judy","jule","julee","julene","juli","julia","julian","juliana","juliane","juliann","julianna","julianne","julie","julieann","julien","julienne","juliet","julieta","julietta","juliette","julio","julissa","julius","jung","junie","junita","junko","jurado","justa","justin","justina","justine","justus","jutta","kacey","kaci","kacie","kacy","kaczmarek","kahl","kahle","kahler","kahn","kaila","kaitlin","kaitlyn","kala","kaleigh","kaley","kali","kallie","kalyn","kam","kamala","kami","kamilah","kaminski","kaminsky","kammerer","kamp","kandace","kandi","kandice","kandis","kandra","kandy","kane","kanesha","kanisha","kantor","kao","kaplan","kapp","kara","karan","kareen","karen","karena","karey","kari","karie","karima","karin","karina","karine","karisa","karissa","karl","karla","karleen","karlene","karly","karlyn","karmen","karnes","karns","karol","karole","karoline","karolyn","karon","karp","karr","karren","karri","karrie","karry","kary","karyl","karyn","kasandra","kasey","kasha","kasi","kasie","kasper","kass","kassandra","kassie","kasten","kastner","kate","katelin","katelyn","katelynn","katerine","kates","kathaleen","katharina","katharine","katharyn","kathe","katheleen","katherin","katherina","katherine","kathern","katheryn","kathey","kathi","kathie","kathleen","kathlene","kathline","kathlyn","kathrin","kathrine","kathryn","kathryne","kathy","kathyrn","kati","katia","katie","katina","katlyn","kato","katrice","katrina","kattie","katy","katz","kauffman","kaufman","kaufmann","kautz","kavanagh","kavanaugh","kay","kayce","kaycee","kaye","kayla","kaylee","kayleen","kayleigh","kaylene","kaylor","kayser","kazuko","kean","keane","kearney","kearns","kearse","keating","keaton","kecia","kee","keefe","keefer","keegan","keele","keeley","keely","keena","keenan","keene","keeney","keesee","keesha","keeter","keeton","keever","keffer","kehoe","keiko","keil","keila","keim","keira","keiser","keisha","keith","keitha","keitt","keli","kellam","kellar","kelle","kellee","kelleher","keller","kellerman","kelley","kelli","kellie","kellner","kellogg","kellum","kelly","kellye","kelm","kelsey","kelsi","kelsie","kelso","kelton","kemberly","kempf","kena","kenda","kendal","kendall","kendra","kendrick","kendricks","kenia","kenisha","kenna","kennard","kennedy","kenneth","kenney","kennon","kenny","kenya","kenyatta","kenyetta","kenyon","keown","kephart","kepler","kera","kerby","keren","keri","kerley","kerr","kerri","kerrie","kerrigan","kerry","kershaw","kershner","kerstin","kesha","keshia","kesler","kessel","kessinger","kessler","kester","kesterson","ketcham","ketchum","ketron","keturah","keva","kevin","keyes","keyser","khadijah","khalilah","khoury","kia","kiana","kiara","kibler","kidd","kidwell","kiefer","kieffer","kiel","kiely","kiera","kiernan","kiersten","kiesha","kiger","kight","kilburn","kilby","kile","kiley","kilgore","killebrew","killen","killian","killingsworth","killion","killough","kilmer","kilpatrick","kim","kimball","kimber","kimberely","kimberlee","kimberley","kimberli","kimberlie","kimberlin","kimberly","kimbery","kimble","kimbra","kimbrell","kimbro","kimbrough","kimes","kimi","kimiko","kimmel","kimsey","kimura","kina","kinard","kincaid","kindra","kingery","kingsbury","kingsley","kingston","kinlaw","kinnard","kinney","kinsella","kinser","kinsey","kinsler","kinsley","kinslow","kinzer","kira","kirby","kirchner","kirkendall","kirkham","kirkland","kirkpatrick","kirksey","kirkwood","kirschner","kirsten","kirstie","kirstin","kirtley","kirwan","kiser","kisha","kisner","kissinger","kistler","kittie","kittrell","kitts","kitty","kiyoko","kizer","kizzie","kizzy","klara","klatt","klaus","klein","kline","kling","klingensmith","klinger","klink","klotz","klug","knapp","knecht","knepper","knighten","knighton","knisley","knopp","knorr","knott","knotts","knowles","knowlton","knox","knudsen","knudson","knuth","knutson","kobayashi","koch","kocher","koehler","koehn","koenig","koerner","koester","koger","kohler","kohn","kolb","koller","kong","konrad","koon","koonce","koons","koontz","koopman","kopp","kori","korn","kornegay","korte","kortney","koski","koster","kourtney","kovac","kovach","kovacs","kowal","kowalczyk","kowalewski","kowalski","kozak","koziol","kozlowski","kraemer","krall","kramer","kratz","kratzer","kraus","krause","krauss","krawczyk","krebs","kremer","kress","krick","krieg","krieger","kris","krishna","krissy","krista","kristal","kristan","kristeen","kristel","kristen","kristi","kristian","kristie","kristin","kristina","kristine","kristle","kristy","kristyn","kroeger","krohn","krol","kroll","kropp","krouse","krueger","krug","kruger","krumm","kruse","krysta","krystal","krysten","krystin","krystina","krystle","krystyna","kubiak","kucera","kuehl","kuehn","kugler","kuhl","kuhlman","kuhlmann","kuhn","kuhns","kujawa","kulp","kum","kumar","kunkel","kunkle","kuntz","kunz","kurth","kurtz","kushner","kuster","kutz","kuykendall","kwan","kwiatkowski","kwon","kyla","kyle","kylee","kylie","kym","kymberly","kyoko","kyong","kyra","kyser","kyung","labarbera","labbe","labelle","labonte","laboy","labrecque","labrie","lacasse","lacey","lach","lachance","lachelle","laci","lacie","laclair","lacombe","lacour","lacresha","lacroix","ladawn","ladd","ladner","ladonna","lael","lafave","lafayette","lafferty","laflamme","lafleur","lafollette","lafond","lafontaine","lafountain","lafrance","lafreniere","lagasse","laguna","lagunas","lahoma","lahr","lai","lail","laila","laine","laing","lajoie","lajuana","lakeesha","lakeisha","lakendra","lakenya","lakesha","lakeshia","lakey","lakia","lakiesha","lakisha","lakita","lala","laliberte","lally","lalonde","lamanna","lamar","lambrecht","lamere","lamkin","lamm","lamonica","lamont","lamontagne","lamoreaux","lamothe","lamoureux","lampe","lampkin","lampley","lana","lancaster","landa","landeros","landes","landin","landis","landon","landreth","landrum","landry","lanell","lanelle","lanette","laney","lang","langan","langdon","lange","langer","langevin","langford","langham","langley","langlois","langston","lanham","lani","lanie","lanier","lanita","lankford","lannie","lanning","lanora","lansing","lantz","lanza","lao","lapierre","laplante","lapoint","lapointe","laporte","lapp","laquanda","laquita","lara","larae","laraine","laree","largent","larhonda","larios","larisa","larissa","larita","lariviere","larkin","larkins","larocca","laroche","larochelle","larock","laronda","larosa","larose","larrabee","larraine","larry","larsen","larson","larue","lasalle","lasandra","lasater","lashanda","lashandra","lashaun","lashaunda","lashawn","lashawna","lashawnda","lashay","lashell","lashley","lashon","lashonda","lashunda","laskowski","lasky","lasley","lasonya","lasseter","lassiter","latanya","latarsha","latasha","latashia","latesha","latham","lathan","lathrop","latia","laticia","latimer","latina","latisha","latonia","latonya","latoria","latosha","latour","latoya","latoyia","latrice","latricia","latrina","latrisha","latta","lattimore","lau","lauderdale","lauer","laughlin","launa","laura","lauralee","lauran","laure","laureano","laureen","lauren","laurena","laurence","laurene","laurent","lauretta","laurette","lauri","laurice","laurie","laurinda","laurine","lauryn","laux","lavada","lavallee","lavalley","lavelle","lavenia","lavera","lavergne","lavern","laverna","laverne","laverty","lavery","laveta","lavette","lavigne","lavin","lavina","lavine","lavinia","lavoie","lavon","lavona","lavonda","lavone","lavonia","lavonna","lavonne","lawana","lawanda","lawanna","lawhorn","lawler","lawlor","lawrence","lawson","lawton","layfield","layla","layne","layton","lazarus","lazo","leah","leahy","leake","leana","leandra","leann","leanna","leanne","leanora","leath","leatha","leatherman","leatherwood","leatrice","leavitt","lebeau","lebel","leblanc","leboeuf","lebron","lebrun","lechner","lecia","leclair","leclaire","leclerc","lecompte","leda","ledbetter","lederman","ledesma","ledet","ledezma","ledford","ledoux","leduc","leeann","leeanna","leeanne","leeds","leena","leeper","leesa","lefebvre","lefevre","leffler","lefler","leflore","leftwich","legault","legere","legg","leggett","legrand","lehman","lehmann","leia","leibowitz","leida","leigh","leigha","leighann","leighton","leija","leiker","leila","leilani","leininger","leisa","leisha","leith","leiva","lejeune","lekisha","lela","lelah","leland","lelia","lemaster","lemay","lemieux","lemire","lemke","lemley","lemmon","lemmons","lemoine","lemos","lemus","lena","lenard","lenhart","lenita","lenna","lennie","lennon","lennox","lenoir","lenora","lenore","lentz","lenz","leo","leola","leoma","leon","leona","leonard","leonarda","leonardo","leone","leong","leonia","leonida","leonie","leonila","leonor","leonora","leonore","leontine","leora","leos","leota","lepage","lepore","lera","lerch","lerma","lerner","leroy","lesa","lesha","lesher","lesia","lesko","leslee","lesley","lesli","leslie","lessard","lessie","lester","leta","letendre","letha","leticia","letisha","letitia","letourneau","lett","lettie","letty","leung","levan","levasseur","leveille","leverett","levesque","levi","levine","levinson","levitt","lewallen","lewandowski","lewellen","lewin","lewis","lexie","leyba","leyva","lezlie","lheureux","liane","lianne","libbie","libby","librada","lida","liddell","liddle","lidia","lieb","lieberman","lieselotte","liggett","liggins","lightfoot","lightner","ligia","ligon","lila","liles","lili","lilia","lilian","liliana","lilla","lillard","lilley","lilli","lillia","lilliam","lillian","lilliana","lillie","lilly","lim","limon","linares","lincoln","linda","lindahl","lindberg","lindell","lindeman","linder","linderman","lindgren","lindholm","lindley","lindner","lindo","lindquist","lindsay","lindsey","lindsley","lindstrom","lindsy","lindy","lineberry","linette","ling","lingenfelter","lingerfelt","lingle","linh","linkous","linn","linnea","linnie","linsey","linton","linville","lippert","lipps","lipscomb","lipsey","lisa","lisabeth","lisandra","lisbeth","lise","lisette","lisha","lissa","lissette","liston","lita","litchfield","littlefield","littlejohn","littleton","litton","littrell","liu","livengood","livesay","livia","livingston","liz","liza","lizabeth","lizarraga","lizbeth","lizeth","lizette","lizotte","lizzette","lizzie","llanes","llewellyn","lloyd","lockard","locke","lockett","lockhart","locklear","lockridge","lockwood","loeb","loeffler","loehr","loera","loesch","loftin","loftis","lofton","loftus","logan","loggins","logsdon","logue","lohman","lohr","loida","lois","loise","lola","lolita","lollar","lollis","loma","lomax","lombardi","lombardo","lomeli","lona","londa","london","lonergan","loney","longley","longmire","longo","longoria","loni","lonna","lonnie","loomis","looney","lopez","lora","loraine","loralee","lorean","loree","loreen","lorelei","loren","lorena","lorene","lorenz","lorenza","lorenzen","lorenzo","loreta","loretta","lorette","lori","loria","loriann","lorie","lorilee","lorina","lorinda","lorine","lorita","lorna","lorraine","lorretta","lorri","lorriane","lorrie","lorrine","lory","lott","lottie","lotz","lou","louann","louanne","loucks","loudermilk","louella","louetta","loughlin","louie","louis","louisa","louise","louque","loura","lourdes","lourie","louvenia","lovato","lovejoy","lovelace","lovelady","loveland","lovell","lovella","lovett","lovetta","lovie","lovins","lowder","lowell","lowman","lowrance","lowrey","lowry","lowther","loya","loyce","loyd","lozada","lozano","lozier","lozoya","luana","luann","luanna","luanne","luba","lubin","lucas","lucero","luci","lucia","luciana","luciano","lucie","lucienne","lucier","lucila","lucile","lucilla","lucille","lucina","lucinda","lucio","luckett","luckey","lucrecia","lucretia","lucy","ludie","ludivina","ludlow","ludwick","ludwig","lueck","luella","luetta","luevano","lugo","lui","luis","luisa","luise","lujan","lukas","lukens","luker","lula","lulu","luna","lund","lundberg","lunde","lundgren","lundquist","lundy","lunn","lunsford","luong","lupe","lupita","lupo","lura","lurlene","lurline","lussier","luther","luttrell","luu","luvenia","luz","lyda","lydia","lydon","lykins","lyla","lyle","lyles","lyman","lyn","lynda","lyndia","lyndsay","lyndsey","lynell","lynelle","lynetta","lynette","lynn","lynna","lynne","lynnette","lynsey","lyon","lyons","lytle","mabe","mabel","mabelle","mable","mabry","macaluso","macarthur","macdonald","macdougall","macedo","macfarlane","macgregor","mach","machado","machelle","machuca","macias","macie","maciel","mackay","mackenzie","mackey","mackie","mackinnon","macklin","maclean","macleod","macmillan","macneil","macomber","macon","macpherson","macy","madalene","madaline","madalyn","maddie","maddox","maddux","madelaine","madeleine","madelene","madeline","madelyn","mader","madera","madewell","madge","madie","madigan","madison","madlyn","madonna","madore","madrid","madsen","madson","mae","maeda","maegan","maes","maestas","mafalda","magali","magallanes","magaly","magan","magana","magaret","magda","magdalen","magdalena","magdalene","magdaleno","magee","magen","maggard","maggie","maggio","magill","magness","magnolia","magnuson","magruder","maguire","mahaffey","mahalia","mahan","maher","mahler","mahon","mahone","mahoney","mai","maia","maida","maier","maile","maines","maira","maire","maisha","maisie","majewski","majorie","makeda","maki","makowski","malave","malcolm","malcom","maldonado","malek","malena","maley","malia","malika","malinda","malinowski","malisa","malissa","malka","mallett","mallette","malley","mallie","mallon","mallory","malloy","malone","maloney","malorie","maloy","malvina","mamie","mammie","manchester","mancilla","mancini","mancuso","manda","mandel","mandeville","mandi","mandie","mandy","maness","mangan","mangrum","mangum","manie","manion","manis","manley","mann","mannino","manns","manriquez","mansell","mansfield","manson","mansour","mantooth","manuel","manuela","manzanares","manzano","manzo","mapes","mapp","marable","maragaret","maragret","maranda","marasco","marcano","marceau","marcela","marcelene","marcelina","marceline","marcell","marcella","marcelle","marcene","marchand","marchant","marchelle","marchetti","marci","marcia","marciano","marcie","marcotte","marcoux","marcum","marcus","marcy","mardell","marden","mardis","marek","maren","margaret","margareta","margarete","margarett","margaretta","margarette","margart","marge","margene","margeret","margert","margery","marget","margherita","margie","margit","margo","margorie","margot","margret","margrett","marguerita","marguerite","margurite","margy","marhta","mari","maria","mariah","mariam","marian","mariana","marianela","mariani","mariann","marianna","marianne","mariano","maribel","maribeth","marica","maricela","maricruz","marie","mariel","mariela","mariella","marielle","marietta","mariette","mariko","marilee","marilou","marilu","marilyn","marilynn","marin","marinda","marinelli","marino","mario","marion","maris","marisa","mariscal","marisela","marisha","marisol","marissa","marita","maritza","marivel","marjorie","marjory","markel","marketta","markey","markham","markita","markle","markley","markowitz","markus","marla","marlana","marleen","marlen","marlena","marlene","marler","marley","marlin","marline","marlo","marlow","marlowe","marlyn","marlys","marna","marni","marnie","maroney","marotta","marquardt","marquerite","marquetta","marquez","marquita","marquitta","marr","marra","marrero","marriott","marron","marroquin","marrs","marrufo","marsha","marshall","marston","marta","marte","martell","marth","martha","marti","martin","martina","martindale","martine","martineau","martinelli","martines","martinez","martino","martinson","marty","martz","marva","marvella","marvin","marvis","marx","mary","marya","maryalice","maryam","maryann","maryanna","maryanne","marybelle","marybeth","maryellen","maryetta","maryjane","maryjo","maryland","marylee","marylin","maryln","marylou","marylouise","marylyn","marylynn","maryrose","masako","mascarenas","mashburn","masse","massengale","massey","massie","masterson","mastin","mata","mateo","matha","matheny","mather","matherly","matherne","mathers","mathes","matheson","mathew","mathews","mathewson","mathias","mathieu","mathilda","mathilde","mathis","mathison","matias","matilda","matilde","matlock","matney","matos","matson","matsumoto","matta","mattern","matteson","matthew","matthews","mattie","mattingly","mattison","mattos","mattox","mattson","matz","maude","maudie","mauk","mauldin","mauney","maupin","maura","maureen","maurer","maurice","mauricio","maurine","maurita","mauro","maus","mavis","maxey","maxfield","maxie","maxima","maximina","maxine","maxon","maxson","maybell","maybelle","mayberry","maye","mayer","mayers","mayes","mayfield","mayhew","mayle","mayme","maynard","mayne","maynor","mayo","mayola","mayorga","mayra","mazie","mazur","mazurek","mazza","mazzola","mcabee","mcadams","mcadoo","mcafee","mcalister","mcallister","mcalpin","mcalpine","mcanally","mcandrew","mcardle","mcarthur","mcatee","mcauley","mcauliffe","mcavoy","mcbee","mcbrayer","mcbride","mcbroom","mcbryde","mcburney","mccabe","mccafferty","mccaffrey","mccain","mccaleb","mccall","mccalla","mccallister","mccallum","mccammon","mccandless","mccann","mccants","mccarley","mccarron","mccarter","mccarthy","mccartney","mccarty","mccarver","mccary","mccaskill","mccaslin","mccauley","mccay","mcchesney","mcclain","mcclanahan","mcclary","mcclean","mccleary","mcclellan","mcclelland","mcclendon","mcclintock","mcclinton","mccloskey","mccloud","mcclung","mcclure","mcclurg","mccluskey","mccollough","mccollum","mccomas","mccomb","mccombs","mcconnell","mccool","mccord","mccorkle","mccormack","mccormick","mccourt","mccowan","mccown","mccoy","mccracken","mccrae","mccrary","mccraw","mccray","mccrea","mccready","mccreary","mccrory","mccubbin","mccue","mcculley","mcculloch","mccullough","mccullum","mccully","mccune","mccurdy","mccurry","mccusker","mccutchen","mccutcheon","mcdade","mcdaniel","mcdaniels","mcdavid","mcdermott","mcdevitt","mcdonald","mcdonnell","mcdonough","mcdougal","mcdougald","mcdougall","mcdowell","mcduffie","mceachern","mcelhaney","mcelrath","mcelroy","mcentire","mcevoy","mcewen","mcfadden","mcfall","mcfarland","mcfarlane","mcfarlin","mcgaha","mcgann","mcgarry","mcgary","mcgee","mcgehee","mcghee","mcgill","mcginley","mcginn","mcginnis","mcginty","mcglone","mcglothlin","mcglynn","mcgough","mcgovern","mcgowan","mcgowen","mcgrath","mcgraw","mcgregor","mcgrew","mcgriff","mcgruder","mcguigan","mcguinness","mcguire","mchale","mchenry","mchugh","mcilwain","mcinerney","mcinnis","mcintire","mcintosh","mcintyre","mciver","mckamey","mckay","mckean","mckee","mckeehan","mckeever","mckellar","mckelvey","mckenna","mckenney","mckenzie","mckeon","mckeown","mckibben","mckie","mckim","mckinley","mckinney","mckinnie","mckinnon","mckinzie","mckissick","mcknight","mckown","mckoy","mclain","mclane","mclaren","mclaughlin","mclaurin","mclean","mclellan","mclemore","mclendon","mcleod","mclin","mcloughlin","mcmahan","mcmahon","mcmann","mcmanus","mcmaster","mcmasters","mcmichael","mcmillan","mcmillen","mcmillian","mcmillin","mcmillon","mcminn","mcmorris","mcmullen","mcmullin","mcmurray","mcmurry","mcnabb","mcnair","mcnally","mcnamara","mcnamee","mcnary","mcneal","mcneely","mcneese","mcneil","mcneill","mcnew","mcniel","mcnulty","mcnutt","mcpeak","mcphail","mcphee","mcpherson","mcquade","mcqueen","mcquiston","mcrae","mcreynolds","mcroberts","mcshane","mcswain","mcsweeney","mcvay","mcvey","mcwhirter","mcwhorter","mcwilliams","meacham","meade","meader","meador","meadors","meagan","meaghan","meagher","mears","mebane","mecham","mechelle","meda","medeiros","medellin","medford","medlin","medlock","medrano","mee","meehan","meekins","meeks","mefford","meg","megan","meggan","meghan","meghann","mehta","mei","meier","meissner","mejia","mejias","melaine","melancon","melani","melania","melanie","melanson","melany","melba","melcher","melchor","melda","mele","melendez","melgar","melia","melida","melina","melinda","melisa","melissa","melissia","melita","mellie","mellisa","mellissa","mello","mellon","mellott","melnick","melo","melodee","melodi","melodie","melonie","melony","melson","melva","melville","melvin","melvina","melynda","mena","menard","menchaca","mendenhall","mendes","mendez","mendiola","mendoza","mendy","menefee","menendez","meneses","menjivar","menke","meraz","mercado","mercedes","mercedez","mercier","mercurio","meredith","meri","merida","merideth","meridith","merilyn","merissa","merkel","merkle","merle","merlene","merlyn","merna","merrell","merri","merrick","merrie","merrifield","merrilee","merrill","merriman","merritt","merriweather","mertens","mertie","mertz","merwin","meryl","messer","messick","messina","messinger","messner","mestas","metcalf","metcalfe","metts","metz","metzger","metzler","meunier","meyer","meyers","meza","mia","mica","micaela","micah","miceli","micha","michael","michaela","michaele","michaelis","michaels","michaelson","michal","michalak","michalski","michaud","micheal","michel","michele","michelina","micheline","michell","michelle","michels","michiko","mickel","mickelson","mickens","mickey","micki","mickie","middaugh","middlebrooks","middleton","midgett","midkiff","miele","mielke","mier","miesha","migdalia","mignon","miguel","miguelina","mika","mikaela","mike","mikell","mikesell","miki","mikki","mila","milagro","milagros","milam","milan","milano","milburn","milda","mildred","miley","milford","milissa","millan","millar","millard","millen","millett","millican","millicent","millie","milligan","milliken","millner","millsap","millsaps","milly","milne","milner","milton","mimi","mims","minard","mincey","minda","mindi","mindy","minerva","ming","mingo","minh","minna","minnich","minnick","minnie","minta","minton","mintz","mira","miramontes","miranda","mireille","mireles","mirella","mireya","miriam","mirian","mirna","mirta","mirtha","misha","miss","missy","misti","mistie","mitchel","mitchell","mitchem","mitchum","mitsue","mitsuko","mittie","mitzi","mitzie","mixon","miyamoto","miyoko","mize","mizell","moberg","mobley","modesta","modica","modlin","moeller","moen","moffatt","moffett","moffitt","mohamed","mohammed","mohan","mohler","moira","mojica","molina","moller","mollie","molloy","molly","molnar","mona","monaco","monaghan","monahan","moncada","moncrief","monday","mondragon","monet","monge","monica","monika","monique","moniz","monnie","monroe","monroy","monserrate","monson","montague","montalvo","montana","montanez","montano","monteiro","montelongo","montemayor","montenegro","montez","montgomery","monti","montiel","montoya","monzon","mooney","mooneyham","moore","moorefield","moorehead","moorer","moores","moorhead","mora","morabito","moralez","moran","moreau","morehead","morehouse","moreira","moreland","morell","morelli","morelock","moreno","morey","morgan","mori","moriah","moriarty","morin","moritz","morley","morman","morrell","morrill","morrison","morrissette","morrissey","mortensen","mortenson","mortimer","morton","mosby","moseley","mosely","moser","mosher","mosier","moskowitz","mosley","mosqueda","mota","moten","moton","motta","moua","moulton","moultrie","mowery","mowry","moxley","moye","moyer","moyers","moynihan","mozell","mozella","mozelle","mudd","mueller","muhammad","mui","mulcahy","mulder","muldoon","muldrow","mulholland","mulkey","mullen","mullens","mullin","mullinax","mullins","mullis","mulvaney","mulvey","mumford","muncy","munday","mundell","mundy","munford","munger","munguia","muniz","munn","munos","munoz","munro","munroe","munsey","munson","muoi","murchison","murdoch","murdock","murguia","muriel","murillo","muro","murphey","murphree","murr","murrell","musgrave","musgrove","musick","musselman","musser","musso","muth","myatt","myer","myers","myesha","myhre","myles","myong","myra","myriam","myrick","myrl","myrle","myrna","myrta","myrtice","myrtie","myrtis","myrtle","myung","nabors","nadeau","nadene","nader","nadia","nadine","nadler","nagel","nagle","nagy","naida","najera","nakamura","nakano","nakesha","nakia","nakisha","nakita","nall","nalley","nancee","nancey","nanci","nancie","nancy","nanette","nannette","nannie","naoma","naomi","napier","napoli","napolitano","naquin","naranjo","narcisa","nardi","nardone","narvaez","nash","nason","natacha","natale","natalia","natalie","natalya","natasha","natashia","nate","nathalie","nathan","natisha","natividad","natosha","naughton","naumann","nava","navarra","navarrete","navarrette","navarro","naylor","nazario","neace","neale","nealy","neary","necaise","necole","neda","nedra","needham","neel","neeley","neely","neff","negrete","negron","neida","neil","neill","neilson","nelda","nelia","nelida","nell","nella","nelle","nellie","nelly","nelms","nelsen","nemeth","nena","nenita","neoma","neomi","nereida","neri","nerissa","nero","nery","nesbit","nesbitt","nesmith","nestor","neta","nettie","neu","neubauer","neuman","neumann","neva","nevada","nevarez","neville","nevins","newberry","newby","newcomb","newhouse","newkirk","newland","newlin","newman","newport","newsom","newsome","newson","ney","nez","ngan","ngo","ngoc","nguyen","nguyet","nichelle","nichol","nicholas","nichole","nicholle","nicholls","nichols","nicholson","nickell","nickelson","nickens","nickerson","nicki","nickie","nickles","nickole","nicky","nicol","nicola","nicolas","nicolasa","nicole","nicolette","nicolle","nida","nidia","nielsen","nielson","nieman","niemann","niemeyer","niemi","niesha","nieto","nieves","nightingale","nigro","niki","nikia","nikita","nikki","nikole","nila","nilda","niles","nilsa","nilsen","nilsson","nimmons","nina","ninfa","nino","nisha","nissen","nita","nixon","noah","nobuko","noe","noel","noelia","noella","noelle","noemi","nohemi","nola","nolan","noland","nolasco","nolen","noles","nolin","nolte","noma","nona","noonan","nora","norah","nord","nordstrom","noreen","norene","norfleet","noriega","noriko","norine","norma","norman","normand","norris","norsworthy","northcutt","northrop","northrup","norton","norvell","norwood","nottingham","novak","novotny","nowak","nowell","nowicki","nowlin","nubia","nugent","nunes","nunez","nunley","nunn","nunnally","nuno","nuss","nussbaum","nutt","nyberg","nydia","nygaard","nyla","nystrom","oakes","oakley","oates","obannon","obdulia","ober","oberg","obregon","obrian","obrien","obryan","obryant","ocampo","ocasio","ochoa","ocie","oconnell","oconner","oconnor","octavia","oda","odaniel","oday","odelia","odell","oden","odessa","odette","odilia","odle","odom","odonnell","odum","ofelia","offutt","ogburn","ogden","oglesby","ogletree","ogrady","ohalloran","ohara","ohare","ojeda","okeefe","okelley","olander","oldham","oleary","olene","oleson","oleta","olevia","olga","olguin","olimpia","olin","olinda","olinger","oliva","olivares","olivarez","olivas","oliveira","olivera","olivia","olivier","olivo","oller","ollie","ollis","olmos","olmstead","olney","oloughlin","olsen","olson","olszewski","olvera","olympia","omalley","omar","omara","omeara","oneal","oneida","oneil","oneill","oney","ong","onie","onita","ontiveros","ophelia","oquendo","oquinn","oralee","oralia","orcutt","ordonez","ordway","oreilly","orellana","oretha","orlando","orman","ormsby","orndorff","ornelas","orosco","orourke","orozco","orpha","orr","orta","ortega","ortego","orth","ortiz","orton","osborn","osborne","osburn","oscar","osgood","oshaughnessy","oshea","oshiro","osman","osorio","ossie","osteen","oster","osterman","ostrander","ostrom","ostrowski","osullivan","osuna","oswald","oswalt","otelia","otero","otey","otha","otilia","otis","otoole","ott","otte","otten","ottinger","oubre","ouellette","ouida","ousley","ovalle","overcash","overstreet","overton","overturf","owen","owens","owensby","owings","owsley","oxendine","oxford","oxley","oyler","ozell","ozella","ozie","ozuna","pabon","pacheco","packard","padgett","padilla","padron","paez","pagano","pagel","paige","paine","paiz","pak","palacio","palacios","palermo","palladino","palma","palmieri","palmira","palmore","palomo","palumbo","pam","pamala","pamela","pamelia","pamella","pamila","pamula","panek","paniagua","pankey","pannell","pantoja","paola","pappas","paquette","paquin","parada","paradis","pardo","pardue","paredes","parenteau","parham","paris","parisi","parke","parkhurst","parkinson","parkman","parmenter","parmer","parnell","parra","parrett","parris","parrish","parrott","partain","partee","parthenia","particia","partida","partin","partlow","paschall","pascoe","pasley","pasquale","passmore","pastore","patel","paterson","patino","patnode","patria","patrica","patrice","patricia","patrick","patrina","patsy","patterson","patti","pattie","pattison","patton","patty","paugh","paul","paula","paulene","pauletta","paulette","pauley","paulin","paulina","pauline","paulino","paulita","paulk","paulsen","paulson","paulus","paxton","payne","paynter","payton","paz","peabody","peachey","peake","pearcy","pearle","pearlene","pearlie","pearline","pearman","pearsall","pearson","peaslee","peay","peckham","pecoraro","peden","pedersen","pederson","pedigo","pedraza","pedroza","peebles","peele","peeples","peggie","peggy","pegram","pegues","pei","peiffer","pelayo","pelfrey","pelkey","pellegrini","pellegrino","pellerin","pelletier","peloquin","peltier","pelton","peluso","pemberton","pena","pender","pendergast","pendergrass","pendleton","pendley","penelope","penick","penland","penley","penn","pennell","penney","penni","pennie","pennington","penrod","penton","pepe","pepin","perales","peralta","peraza","percy","perdomo","perea","peres","pereyra","perez","perla","perlman","permenter","pernell","perrault","perreault","perreira","perri","perrin","perrine","perrone","perrotta","perry","perryman","persaud","persinger","pesce","pete","peter","peterkin","peterman","petersen","peterson","petra","petree","petrie","petrillo","petrina","petro","petronila","petry","pettaway","petterson","pettiford","pettigrew","pettis","pettit","pettus","pettway","peyton","pfaff","pfeffer","pfeifer","pfeiffer","pfister","pham","phan","pharr","phebe","phelan","phelps","phifer","philbrick","philip","philips","phillip","phillips","phillis","philomena","philpot","philpott","phinney","phipps","phoebe","phung","phuong","phylicia","phylis","phyliss","phyllis","piatt","picard","pichardo","pickard","pickel","pickens","pickering","pickett","piedad","pieper","piercy","pierre","pierson","pifer","pigg","pilkington","pimental","pimentel","pina","pinard","pinckney","pineda","pinero","pinkard","pinkerton","pinkham","pinkney","pinkston","pino","pinon","pinson","piotrowski","pires","pirtle","pisano","pitchford","pitre","pitt","pittman","pitts","pitzer","pizarro","placencia","plante","plascencia","platt","plemmons","pless","plotkin","plott","plourde","plumlee","plumley","plummer","plunkett","plyler","poche","poe","poff","pogue","pohl","poindexter","poirier","poisson","pok","polanco","poland","polito","polley","polly","polson","polston","pomerleau","pomeroy","poole","pooler","poore","popham","popovich","popp","porras","porsche","porsha","porterfield","portia","portillo","portis","posner","poston","poteat","poteet","poulin","pouliot","poulos","poulson","powe","powell","poynter","prado","prather","preciado","preece","prendergast","prentiss","prescott","presley","presnell","pressley","preston","prevost","prewitt","prichard","pricilla","prickett","priddy","pridemore","pridgen","priester","prieto","primm","prindle","prine","pringle","priscila","priscilla","pritchard","pritchett","privett","probst","proffitt","propst","prosser","proulx","prouty","provencher","providencia","pruett","pruitt","pryor","puckett","puente","puentes","puga","pugliese","puleo","pulido","pullen","pulliam","pumphrey","pura","purcell","purdy","purifoy","purkey","purnell","pursley","purvis","puryear","putman","putnam","pyatt","pyle","pyles","qiana","quach","quackenbush","quade","qualls","quan","quattlebaum","queenie","quesada","quesenberry","quevedo","quezada","quiana","quigley","quijano","quiles","quillen","quimby","quinlan","quinn","quinonez","quintana","quintanilla","quintero","quinton","quiroz","quyen","raab","rabb","rabe","raber","rabideau","rabinowitz","rabon","raby","rachael","rachal","racheal","rachel","rachele","rachell","rachelle","racine","rackley","racquel","radcliff","radcliffe","rademacher","rader","radford","radke","radtke","rae","raeann","rael","raelene","rafaela","rafferty","ragan","ragin","ragland","ragsdale","raguel","rahman","rahn","railey","raina","rainbolt","rainer","raines","rainey","rainwater","raisa","raleigh","raley","ralph","ralston","ramage","rambo","ramer","rameriz","ramey","ramires","ramirez","ramon","ramona","ramonita","ramos","ramsay","ramsdell","ramsey","ranae","rancourt","randa","randall","randazzo","randee","randel","randell","randi","randle","randolph","randy","ranee","raney","rangel","rankin","rankins","ransdell","ranson","rao","raphael","raposa","rapp","raquel","rasberry","rascon","rasheeda","rashid","rashida","rasmussen","ratchford","ratcliff","ratcliffe","rathbone","rathbun","ratliff","rau","rauch","rausch","rawlings","rawlins","rawls","rawson","raya","rayborn","rayburn","raye","rayfield","rayford","raylene","raymer","raymond","raymonde","raymund","rayna","rayner","raynor","razo","rea","reagan","reanna","reardon","reatha","reavis","reba","rebbeca","rebbecca","rebeca","rebecca","rebecka","rebekah","reber","reda","reddick","redford","redman","redmon","redmond","redwine","reece","reena","reese","refugia","refugio","regalado","regan","regena","regenia","regina","regine","reginia","rehm","reich","reichard","reichel","reichert","reid","reiff","reiko","reilly","reimer","reimers","reina","reiner","reinert","reinhardt","reinhart","reinhold","reinke","reiser","reiss","reita","reitz","rema","rembert","remedios","remillard","remington","remona","remy","rena","renae","renata","renate","renaud","renay","renda","rendon","rene","renea","reneau","renee","renetta","renfro","renfroe","renfrow","renita","renn","renna","renner","rennie","reno","renshaw","renteria","renz","resendez","resnick","ressie","ressler","reta","retha","retta","reuter","reva","revell","revis","rey","reyes","reyna","reynalda","reynolds","reynoso","rhea","rheba","rhee","rhiannon","rhinehart","rhoades","rhoads","rhoda","rhoden","rhodes","rhona","rhonda","rhyne","ribeiro","ricarda","ricci","ricciardi","riccio","richard","richards","richardson","richburg","richelle","richerson","richert","richey","richie","richman","richmond","rickard","rickert","ricketts","ricki","rickie","rickman","rico","riddell","riddick","ridenhour","ridenour","rideout","ridgway","ridley","riedel","rieger","riehl","riendeau","ries","riffe","rigby","rigdon","riggins","riggle","rigney","rigsby","riker","rikki","riley","rimmer","rinaldi","rincon","rinehart","ringler","rinker","riojas","riordan","rios","rioux","ripley","rippy","risa","risinger","risley","risner","ritchey","ritchie","rittenhouse","ritz","rivard","rivera","rivero","rivka","rizo","rizzo","roa","roane","roark","robb","robbie","robbin","robbins","robbyn","robena","roberge","roberson","robert","roberta","roberto","roberts","robertson","robeson","robey","robichaud","robichaux","robinett","robinette","robinson","robison","robledo","robson","roby","robyn","rocco","rocha","roche","rochel","rochell","rochelle","rochester","rocio","rockett","rockwell","rockwood","rodarte","rodas","roddy","roden","roderick","rodgers","rodney","rodrigez","rodrigue","rodrigues","rodriguez","rodriques","rodriquez","roeder","roemer","roesch","roesler","rogan","roger","rogers","rohde","rohr","rohrer","rojas","rojo","roland","rolanda","rolande","roldan","rolf","rolfe","rolle","rollins","rollo","rolon","romana","romano","rome","romelia","romeo","romero","romine","romo","romona","rona","ronald","ronda","roney","roni","ronna","ronni","ronnie","rooker","rooney","rory","rosa","rosado","rosalba","rosalee","rosales","rosalia","rosalie","rosalina","rosalind","rosalinda","rosaline","rosalva","rosalyn","rosamaria","rosamond","rosana","rosann","rosanna","rosanne","rosaria","rosario","rosas","rosaura","roscoe","roseann","roseanna","roseanne","roseberry","roseboro","roselee","roselia","roseline","rosella","roselle","roselyn","roseman","rosemarie","rosemond","rosen","rosena","rosenbaum","rosenberg","rosenberger","rosenberry","rosenblatt","rosenblum","rosenda","rosenfeld","rosenthal","rosetta","rosette","rosia","rosie","rosina","rosio","rosita","roslyn","ross","rossana","rossi","rossie","rossiter","rossman","rost","roth","rothman","rothrock","rothstein","rothwell","rotz","roundtree","roundy","rountree","rourke","roush","rousseau","roussel","rowden","rowe","rowell","rowena","rowland","rowles","rowlett","rowley","roxana","roxane","roxann","roxanna","roxanne","roxie","roy","roybal","royce","royer","royston","rozanne","rozella","rozier","ruano","rubalcava","ruben","rubenstein","rubi","rubie","rubin","rubino","rubio","rubye","ruch","rucker","ruckman","rudnick","rudolph","rudy","rueda","ruelas","ruffner","rufina","rugg","ruggiero","ruggles","ruhl","ruiz","rummel","rumph","rumsey","rundell","runge","runion","runyan","runyon","rupe","rupert","rupp","ruppert","rusch","rushton","russ","russell","russo","rutan","ruth","rutha","ruthann","ruthanne","ruthe","ruthie","rutkowski","rutland","rutledge","ruvalcaba","ryan","ryann","ryder","saad","saari","saavedra","sabina","sabine","sabo","sabol","sabra","sabrina","sacco","sacha","sachiko","sachs","sackett","sadie","sadler","sadowski","sadye","saechao","saenz","saez","safford","saito","saiz","sala","salas","salazar","salcedo","salcido","saldana","saldivar","saleh","salem","salena","salerno","salgado","salisbury","salley","sallie","sally","salo","salome","salomon","saltzman","salvador","salvatore","salyer","salyers","salzman","sam","samaniego","samantha","samara","samatha","samella","samira","sammie","sammons","sammy","samons","samora","sampson","sams","samson","samuel","samuels","samuelson","sana","sanabria","sanborn","sanches","sanchez","sanda","sandberg","sandee","sanderlin","sanderson","sandi","sandidge","sandie","sandifer","sandler","sandlin","sandoval","sandra","sandstrom","sandusky","sanford","sanjuana","sanjuanita","sankey","sanmiguel","sanora","sansom","sansone","santa","santacruz","santamaria","santana","santiago","santillan","santina","santo","santoro","santos","santoyo","sapp","sappington","sara","sarabia","sarah","sarai","saran","sargeant","sargent","sari","sarina","sarita","sarmiento","sartain","sartin","sarver","sasaki","sasha","sasser","sather","sato","satterfield","satterwhite","sattler","saturnina","sau","sauceda","saucedo","sauer","saunders","saundra","sauter","savannah","saville","savino","savoie","sawicki","saxon","saxton","sayles","saylor","sayre","scaife","scalf","scalise","scanlan","scanlon","scarberry","scarborough","scarbrough","scarlett","schaaf","schaal","schade","schaefer","schaeffer","schafer","schaffer","schaffner","schall","schaller","scharf","schatz","schaub","schauer","scheel","scheer","scheffler","schell","scheller","schenck","schenk","scherer","schermerhorn","schexnayder","schick","schiff","schiffman","schindler","schlegel","schleicher","schlosser","schlueter","schmid","schmidt","schmit","schmitt","schmitz","schneider","schock","schoen","schoenfeld","schofield","scholl","scholz","schoonmaker","schoonover","schott","schrader","schram","schramm","schreck","schreiber","schreiner","schrimsher","schrock","schroder","schroeder","schubert","schuck","schuh","schuler","schuller","schulman","schulte","schultz","schulz","schulze","schumacher","schuman","schumann","schuster","schutt","schutz","schuyler","schwab","schwartz","schwarz","schweitzer","scofield","scoggins","scott","scottie","scoville","scribner","scrivner","scroggins","scruggs","scully","seabolt","seabrook","seagraves","seale","sealey","sealy","sean","searcy","searle","searles","seaton","seaver","seavey","seawright","seay","sebastian","sebrina","sechrist","seda","sedillo","seeger","seeley","seema","segal","segarra","seger","segovia","segura","seibel","seiber","seibert","seidel","seifert","seiler","seitz","selby","selena","selene","selina","sellars","selma","selman","sena","senaida","seng","senn","senter","sepulveda","serafina","serena","sergent","serina","serita","serna","serrano","serrato","sessoms","setser","setsuko","setzer","severson","sevier","sevigny","sevilla","seward","sewell","seymore","seymour","shackelford","shackleford","shae","shafer","shaffer","shaina","shakia","shakira","shakita","shala","shalanda","shalon","shalonda","shamblin","shameka","shamika","shana","shanae","shanahan","shanda","shandi","shandra","shane","shaneka","shanel","shanell","shanelle","shaner","shani","shanice","shanika","shaniqua","shanita","shankle","shanklin","shanna","shannan","shannon","shanon","shanta","shantae","shantay","shante","shantel","shantell","shantelle","shanti","shapiro","shaquana","shaquita","shara","sharan","sharda","sharee","sharell","sharen","shari","sharice","sharie","sharika","sharilyn","sharita","sharkey","sharla","sharleen","sharlene","sharma","sharmaine","sharolyn","sharon","sharonda","sharpe","sharri","sharron","sharyl","sharyn","shasta","shattuck","shaughnessy","shaun","shauna","shaunda","shaunna","shaunta","shaunte","shavon","shavonda","shavonne","shawana","shawanda","shawanna","shawn","shawna","shawnda","shawnee","shawnna","shawnta","shay","shayla","shayna","shayne","shea","shealy","shearin","sheba","shedd","sheehan","sheehy","sheena","sheffield","sheila","sheilah","shela","shelba","shelby","sheldon","shelia","shella","shelley","shelli","shellie","shelly","shelton","shemeka","shemika","shena","shenika","shenita","shenk","shenna","shepard","shephard","sheppard","shera","sheree","sherell","sherer","sheri","sherice","sheridan","sherie","sherika","sherill","sherilyn","sherise","sherita","sherlene","sherley","sherly","sherlyn","sherman","sheron","sherrell","sherrer","sherri","sherrie","sherril","sherrill","sherrod","sherron","sherryl","sherwin","sherwood","shery","sheryl","sheryll","shetler","shick","shiela","shifflett","shiflett","shila","shiloh","shinn","shipe","shipley","shipp","shippy","shira","shirely","shirey","shirl","shirlee","shirleen","shirlene","shirley","shirly","shively","shizue","shizuko","shockey","shockley","shoemake","shoffner","shona","shonda","shondra","shonna","shonta","shoop","shortridge","shoshana","shotwell","shoup","shouse","showalter","shrader","shreve","shropshire","shroyer","shrum","shu","shubert","shuler","shull","shults","shultz","shumaker","shuman","shumate","shumpert","shumway","shupe","shuster","shutt","shyla","sibert","sibley","sibyl","sickler","sidney","siebert","siegel","siegfried","sievers","sifuentes","sigler","sigman","sigmon","signe","sigrid","sikora","silas","silva","silvana","silveira","silverman","silverstein","silvey","silvia","simard","simas","simmon","simmons","simms","simon","simona","simonds","simone","simoneau","simoneaux","simonne","simons","simonson","simonton","simpkins","simpson","sinclair","sindy","singh","singletary","singley","siobhan","sirena","sirois","sisco","sisk","sisneros","sisson","sistrunk","sitton","siu","sixta","sizemore","skaggs","skeen","skeens","skelton","skidmore","skiles","skye","slagle","slaton","slavin","slayton","sloat","slocum","slone","slover","slusher","slyvia","smalley","smallwood","smedley","smelser","smitherman","smithson","smtih","smyth","smythe","snapp","snavely","snodgrass","snowden","snyder","soares","sobel","socorro","sofia","sohn","soila","soileau","sokol","solange","solberg","soledad","solis","soliz","soloman","solomon","solorio","solorzano","somer","somers","somerville","sommer","sommers","sommerville","sona","sondra","songer","sonia","sonja","sonnier","sonya","soper","sophia","sophie","sophy","soraya","sorensen","sorenson","soria","soriano","sorrell","sorrells","sosa","sotelo","soto","soucy","soukup","soule","sousa","southard","southerland","southwick","southworth","souza","sowder","sowell","spalding","spann","spano","sparkman","spaulding","specht","spector","speight","spellman","sperry","spiegel","spielman","spiers","spiker","spillman","spinelli","spitler","spitzer","spivey","spooner","spradlin","spradling","spraggins","sprague","spratt","sprayberry","spriggs","sproul","sprouse","spruill","spurgeon","spurlock","staats","stacee","stacey","staci","stacia","stacie","stackhouse","stacy","stadler","stafford","stagg","staggs","stagner","stahl","staley","stallard","stallworth","stalnaker","stambaugh","stamey","stamm","stancil","standifer","standley","standridge","stanfield","stanfill","stanford","stanger","stanley","stansberry","stansbury","stanton","stapleton","starkey","starla","starnes","starr","stasia","staten","staton","staub","stauffer","stclair","stcyr","steadman","stearns","stebbins","steck","stedman","steele","steelman","stefani","stefania","stefanie","stefany","steffanie","steffen","steffens","stegall","steger","steib","steiger","steinbach","steinberg","steiner","steinke","steinman","steinmetz","stella","stelly","stenson","stepanie","stephaine","stephan","stephane","stephani","stephania","stephanie","stephany","stephen","stephenie","stephens","stephenson","stephine","stephnie","stepp","sternberg","stetson","steven","stevenson","steverson","stevie","stewart","stgermain","sthilaire","stickney","stidham","stier","stiffler","stillman","stillwell","stiltner","stilwell","stine","stines","stinnett","stinson","stites","stith","stitt","stjohn","stlaurent","stlouis","stockdale","stockton","stockwell","stoddard","stoffel","stogner","stoll","stollings","stoltz","stoltzfus","stonge","stott","stotts","stouffer","stovall","stowe","stowell","stpeter","stpierre","strachan","strader","strahan","straka","straley","strasser","stratton","straub","strauss","strawn","strawser","streeter","streit","stribling","stricker","strickland","strickler","stricklin","stringfellow","strobel","stroh","strom","stroman","stromberg","strother","strouse","struble","strunk","stuart","stubblefield","stuckey","studer","stultz","stumpf","sturdivant","sturges","sturgill","sturgis","sturm","sturtevant","stutz","stutzman","suanne","suarez","suazo","sublett","sudduth","sudie","sueann","suellen","suggs","suh","suiter","suk","sulema","sullins","sullivan","sumiko","summerlin","summerville","sumner","sumrall","sundberg","sunderland","sunni","surber","surratt","susan","susana","susann","susanna","susannah","susanne","susie","sussman","susy","suter","sutherland","sutphin","sutter","sutton","suzan","suzann","suzanna","suzanne","suzette","suzi","suzie","suzuki","suzy","svetlana","svitlana","svoboda","swafford","swaim","swaney","swanger","swann","swanner","swanson","swarey","swartz","swearingen","sweatt","sweitzer","swenson","swett","swick","swiger","swindell","swinford","swinney","swinson","swint","swinton","switzer","swope","sybil","syble","sydney","sydnor","sylvester","sylvia","sylvie","symons","synder","synthia","syreeta","szabo","szymanski","tabatha","tabb","taber","tabetha","tabitha","tackett","tafoya","taft","taggart","tague","taina","taisha","tajuana","takahashi","takako","takisha","talamantes","talavera","talbert","talbott","talia","taliaferro","talisha","talitha","talkington","tallent","talley","tallman","talton","tamala","tamar","tamara","tamatha","tamayo","tambra","tameika","tameka","tamekia","tamela","tamera","tamesha","tamez","tami","tamica","tamie","tamika","tamiko","tamisha","tammara","tammera","tammi","tammie","tammy","tamra","tana","tanaka","tandra","tandy","taneka","tanesha","tangela","tanguay","tania","tanika","tanisha","tanja","tankersley","tanna","tanya","tapia","tapley","tapp","tara","tarah","tarango","tarbox","tardif","tardiff","taren","tari","tarpley","tarr","tarra","tarrant","tarsha","tarver","taryn","tasha","tashia","tashina","tasia","tatiana","tatro","tatum","tatyana","taunya","tavares","tavarez","taveras","tawana","tawanda","tawanna","tawna","tawnya","taylor","tayna","teague","teasley","tedford","teena","teets","tegan","teisha","teixeira","tejada","tejeda","telford","telles","tellez","tello","telma","temeka","temika","tempie","templeton","templin","tena","tenesha","tenisha","tennant","tenney","tennie","tennille","tennison","tennyson","tenorio","teodora","teofila","tera","teran","tereasa","teresa","terese","teresia","teresita","teressa","teri","terica","terina","terisa","terra","terrazas","terrell","terresa","terri","terrie","terrill","terrilyn","terry","terwilliger","tesch","tesha","tess","tessa","tessie","tessier","testerman","teter","tetreault","thach","thacker","thai","thalia","thames","thanh","thao","tharp","tharpe","thaxton","thayer","thea","theda","theis","theisen","theiss","thelen","thelma","theo","theobald","theodora","theodore","theola","theresa","therese","theresia","theressa","theriault","theriot","therrien","thersa","thi","thibault","thibeault","thibodeau","thibodeaux","thiel","thiele","thielen","thies","thigpen","thom","thoma","thomas","thomasena","thomasina","thomasine","thomason","thomasson","thompkins","thompson","thomsen","thomson","thora","thornberry","thornburg","thorne","thornhill","thornton","thorson","thorton","threadgill","threatt","thresa","throckmorton","thu","thurber","thurman","thurmond","thurston","thuy","tia","tiana","tianna","tibbetts","tibbs","tidwell","tiera","tierney","tierra","tiesha","tifany","tiffaney","tiffani","tiffanie","tiffany","tiffiny","tighe","tijerina","tijuana","tilda","tilghman","tillery","tillett","tilley","tillie","tillis","tillman","tillotson","tilton","timberlake","timika","timm","timmerman","timmons","timms","timothy","tims","tina","tincher","tindall","tindle","tingley","tinisha","tinney","tinsley","tippett","tipton","tirado","tisa","tisdale","tish","tisha","titus","tobar","tobey","tobi","tobias","tobie","tobin","toby","toccara","todd","toi","toland","tolbert","toledo","tolentino","toler","toliver","tolle","tollefson","tolley","tolliver","tolman","tolson","tomas","tomasa","tomblin","tomeka","tomi","tomika","tomiko","tomlin","tomlinson","tommie","tommy","tommye","tomoko","tompkins","tona","tonda","tonette","toni","tonia","tonie","tonisha","tonita","tonja","tony","tonya","toole","tooley","toombs","toomer","toomey","tora","torgerson","tori","torie","toro","torre","torrence","torres","torrey","torrez","torri","torrie","tory","toscano","tosha","toshia","toshiko","toth","totten","toussaint","tova","tovar","towanda","towe","towle","towne","towner","townes","townley","townsend","townsley","toya","tracee","tracey","traci","tracie","tracy","trahan","trainor","tramel","trammell","tran","trang","trantham","trapp","trask","travers","travis","trawick","traylor","traynor","treadway","treadwell","treasa","treece","treena","trejo","tremblay","trena","trent","tresa","tressa","tressie","treva","trevino","trexler","tricia","trigg","trimble","trina","trinh","trinidad","triplett","tripp","trish","trisha","trista","tristan","trombley","trost","trotman","trott","trottier","troup","troutman","trowbridge","troxell","troxler","troy","troyer","truax","trudeau","trudi","trudie","trudy","trueblood","truelove","truesdale","truett","truitt","trujillo","trula","truman","truong","trussell","tsai","tsang","tse","tso","tsosie","tubbs","tucci","tudor","tuggle","tula","tull","tullis","tully","tunnell","tunstall","tupper","turcotte","turgeon","turk","turley","turman","turnage","turnbow","turnbull","turney","turpin","tutt","tuttle","tuyet","twana","twanda","twanna","twigg","twila","twilley","twitty","twombly","twomey","twyla","twyman","tyesha","tyisha","tyler","tyndall","tyner","tynisha","tyra","tyree","tyrrell","tyson","tyus","uhl","ulibarri","ullman","ulloa","ullrich","ulmer","ulrich","ulrike","underhill","ung","unger","unknow","unruh","upchurch","upshaw","upton","urbina","urias","uribe","urquhart","urrutia","ursula","usha","ussery","ute","utley","vaca","vaccaro","vachon","vada","vaden","vadnais","vaillancourt","val","valadez","valarie","valda","valdes","valdez","valdivia","valdovinos","valencia","valene","valente","valenti","valentin","valentina","valentino","valenzuela","valeri","valeria","valerie","valerio","valero","valery","valladares","valle","vallee","vallejo","valles","vallie","valliere","valorie","valrie","valverde","vanatta","vanburen","vanbuskirk","vance","vancleave","vanda","vandenberg","vanderpool","vandiver","vandusen","vandyke","vanegas","vanesa","vanessa","vanetta","vanhook","vanhoose","vanhorn","vanhouten","vania","vanita","vankirk","vanlandingham","vanmeter","vann","vanna","vannatta","vannesa","vanness","vannessa","vannoy","vanover","vanpelt","vanscoy","vansickle","vantassel","vanwinkle","vanzandt","vanzant","varela","varga","vargas","vargo","varnado","varner","varney","vashti","vasiliki","vasques","vasquez","vassallo","vassar","vaughan","vaughn","vaught","vazquez","veach","veasey","veda","veilleux","velarde","velasco","velasquez","velazquez","velda","velez","velia","veliz","vella","velma","veloz","velva","vena","venable","venegas","venessa","venetta","venice","venita","vennie","ventura","veola","vera","verda","verdell","verdie","verdugo","verduzco","vereen","verena","vergara","vergie","verla","verlene","verlie","verline","vermillion","verna","vernell","vernetta","vernia","vernice","vernie","vernita","vernon","verona","veronica","veronika","veronique","verret","versie","vertie","vesta","veta","vetter","vicenta","vick","vickers","vickery","vickey","vicki","vickie","vicky","victoria","victorina","vida","vidal","vidrine","vieira","viera","vierra","vigue","viki","vikki","villagomez","villalba","villalobos","villalpando","villanueva","villareal","villarreal","villasenor","villatoro","villegas","villeneuve","vilma","vincent","vincenza","vinita","vinnie","vinson","violeta","violette","virgen","virgie","virgil","virgina","virginia","visser","vitale","vivan","vivian","viviana","vivien","vivienne","voelker","vogel","vogler","vogt","voight","voigt","volkman","vollmer","volpe","volz","voncile","vonda","vonnie","voorhees","voss","vowell","voyles","vue","vuong","wachter","waddell","wadley","wadsworth","wagner","wagstaff","wahl","wai","waite","waites","wakefield","walcott","walczak","walden","waldman","waldon","waldron","waldrop","waldrup","wallace","wallen","walley","wallin","wallis","walsh","walston","walter","walters","walther","waltman","walton","waltraud","walz","wampler","wanda","waneta","wanetta","wanita","wardell","wardlaw","warfield","wargo","warnke","warnock","warr","warrick","warrington","warwick","washburn","washington","wasson","watanabe","waterhouse","watford","watkins","watson","watters","watterson","wava","wayland","wayman","wayne","weatherby","weatherford","weathersby","weatherspoon","webb","webber","weddle","weeden","weekley","weese","wegner","wei","weidman","weidner","weigand","weigel","weiland","weiler","weimer","weinberg","weinberger","weiner","weinstein","weintraub","weis","weisberg","weise","weiser","weisman","weiss","weissman","weitzel","welborn","weldon","welker","weller","wellington","wellman","welton","welty","wendel","wendell","wendi","wendie","wendling","wendolyn","wendt","wendy","wenger","wenona","wentworth","wentz","wentzel","wenzel","werner","werth","wertz","wescott","wesley","wessel","wessels","wesson","westberry","westbrook","westbrooks","westcott","westerfield","westerman","westfall","westlund","westmoreland","weston","westover","westphal","wethington","wetmore","wetzel","wexler","whalen","whaley","wharton","whatley","wheatley","wheaton","wheelock","whelan","whipple","whisenant","whisenhunt","whisler","whitacre","whitaker","whitcomb","whitehead","whitehouse","whitehurst","whiteley","whiteman","whitesell","whiteside","whitfield","whitford","whitley","whitlock","whitman","whitmer","whitmire","whitmore","whitney","whitson","whitt","whittaker","whitted","whittemore","whitten","whittier","whittington","whitton","whitworth","whorton","whyte","wickham","wicklund","wickman","wideman","widmer","widner","wiegand","wieland","wiener","wiese","wigfall","wiggins","wiggs","wigley","wilbanks","wilber","wilborn","wilbourn","wilbur","wilburn","wilcher","wilcox","wilda","wilde","wildman","wiley","wilfong","wilford","wilhelm","wilhelmina","wilhemina","wilhite","wilhoit","wilk","wilke","wilkens","wilkerson","wilkes","wilkey","wilkie","wilkins","wilkinson","wilks","willa","willaims","willams","willard","wille","willena","willene","willett","willetta","willette","willhite","willia","william","williams","williamson","willie","williemae","williford","willingham","willis","willison","willman","willodean","willoughby","willson","wilma","wilmot","wilmoth","wilson","wilton","wimberly","wimbush","wimer","wimmer","winburn","winchell","winchester","windham","windom","windsor","winegar","winfield","winfrey","wingard","wingate","wingfield","wingo","winifred","winkelman","winkler","winn","winnie","winnifred","winona","winslow","winstead","winston","winton","wirth","wiseman","wisner","wisniewski","witcher","witham","witherspoon","withrow","witkowski","witmer","witt","witte","witten","wittman","wofford","wojcik","wolcott","wolfe","wolfenbarger","wolff","wolfgang","wolford","wolfson","wolter","wolters","womack","wonda","wong","woodall","woodard","woodbury","woodford","woodham","woodley","woodring","woodrow","woodrum","woodson","woodworth","woolard","wooldridge","woolery","wooley","woolf","woolfolk","woolley","woolridge","woosley","wooster","wooten","wooton","worden","worley","worrell","worsham","worsley","wortham","worthen","worthington","wortman","wozniak","wray","wrenn","wulf","wunderlich","wurth","wyant","wyatt","wyche","wyckoff","wylie","wyman","wynell","wynne","wynona","wyrick","wysocki","xenia","xiao","xiomara","xiong","xochitl","xuan","yadira","yaeko","yael","yahaira","yajaira","yamada","yamamoto","yan","yancey","yancy","yandell","yanez","yanira","yarber","yarborough","yarbrough","yasmin","yasmine","yasuko","yates","yazzie","ybarra","yeager","yee","yeh","yelena","yepez","yer","yesenia","yessenia","yetta","yeung","yevette","yi","yim","ying","yingling","yoakum","yockey","yocum","yoder","yoel","yoho","yoko","yolanda","yolande","yolando","yolonda","yong","yoo","yoon","yoshida","yoshie","yoshiko","yost","youlanda","youmans","youngblood","youngman","youngs","yount","younts","yu","yuen","yuette","yuk","yuki","yukiko","yuko","yulanda","yun","yung","yuonne","yuri","yuriko","yvette","yvone","yvonne","zachary","zack","zada","zahn","zaida","zajac","zak","zamarripa","zambrano","zamora","zamudio","zana","zandra","zaragoza","zarate","zavala","zayas","zeigler","zelaya","zelda","zella","zeller","zellers","zelma","zena","zenaida","zendejas","zenia","zenobia","zepeda","zeringue","zetta","zhang","zhao","ziegler","zielinski","zimmerman","zimmermann","zina","zink","zinn","zita","zito","zoe","zofia","zoila","zola","zona","zonia","zook","zora","zoraida","zorn","zuber","zucker","zula","zulema","zulma","zumwalt","zuniga"]});var ts=M(Gn=>{"use strict";Object.defineProperty(Gn,"__esModule",{value:!0});Gn.NameRedactor=void 0;var bu=as(),_u=/(^|\.\s+)(dear|hi|hello|greetings|hey|hey there)/gi,ku=/(thx|thanks|thank you|regards|best|[a-z]+ly|[a-z]+ regards|all the best|happy [a-z]+ing|take care|have a [a-z]+ (weekend|night|day))/gi,Et=new RegExp("((("+_u.source+")|("+ku.source+"\\s*[,.!]*))[\\s-]*)","gi"),ep=new RegExp("( ?(([A-Z][a-z]+)|([A-Z]\\.)))+([,.]|[,.]?$)","gm"),Cu=new RegExp("\\b(\\s*)(\\s*("+bu.join("|")+"))+\\b","gim"),ap=class{replaceWith;constructor(n="PERSON_NAME"){this.replaceWith=n}redact(n){Et.lastIndex=0,ep.lastIndex=0;let i=Et.exec(n);for(;i!==null;){ep.lastIndex=Et.lastIndex;let p=ep.exec(n);if(p!==null&&p.index===Et.lastIndex){let l=p[5]===null?"":p[5];n=n.slice(0,p.index)+this.replaceWith+l+n.slice(p.index+p[0].length)}i=Et.exec(n)}return n=n.replace(Cu,"$1"+this.replaceWith),n}};Gn.NameRedactor=ap});var ns=M(oe=>{"use strict";Object.defineProperty(oe,"__esModule",{value:!0});oe.url=oe.digits=oe.credentials=oe.password=oe.username=oe.emailAddress=oe.usSocialSecurityNumber=oe.ipAddress=oe.phoneNumber=oe.zipcode=oe.streetAddress=oe.creditCardNumber=void 0;var Su=/(apt|bldg|dept|fl|hngr|lot|pier|rm|ste|slip|trlr|unit|#)\.? *[a-z0-9-]+\b/gi,Tu=/P\.? ?O\.? *Box +\d+/gi,xu=/(street|st|road|rd|avenue|ave|drive|dr|loop|court|ct|circle|cir|lane|ln|boulevard|blvd|way)\.?\b/gi;oe.creditCardNumber=/\d{4}[ -]?\d{4}[ -]?\d{4}[ -]?\d{4}|\d{4}[ -]?\d{6}[ -]?\d{4}\d?/g;oe.streetAddress=new RegExp("(\\d+\\s*(\\w+ ){1,2}"+xu.source+"(\\s+"+Su.source+")?)|("+Tu.source+")","gi");oe.zipcode=/\b\d{5}\b(-\d{4})?\b/g;oe.phoneNumber=/(\(?\+?[0-9]{1,2}\)?[-. ]?)?(\(?[0-9]{3}\)?|[0-9]{3})[-. ]?([0-9]{3}[-. ]?[0-9]{4}|\b[A-Z0-9]{7}\b)/g;oe.ipAddress=/(\d{1,3}(\.\d{1,3}){3}|[0-9A-F]{4}(:[0-9A-F]{4}){5}(::|(:0000)+))/gi;oe.usSocialSecurityNumber=/\b\d{3}[ -.]\d{2}[ -.]\d{4}\b/g;oe.emailAddress=/([a-z0-9_\-.+]+)@\w+(\.\w+)*/gi;oe.username=/(user( ?name)?|login): \S+/gi;oe.password=/(pass(word|phrase)?|secret): \S+/gi;oe.credentials=/(login( cred(ential)?s| info(rmation)?)?|cred(ential)?s) ?:\s*\S+\s+\/?\s*\S+/gi;oe.digits=/\b\d{4,}\b/g;oe.url=/([^\s:/?#]+):\/\/([^/?#\s]*)([^?#\s]*)(\?([^#\s]*))?(#([^\s]*))?/g});var rs=M(Jn=>{"use strict";Object.defineProperty(Jn,"__esModule",{value:!0});Jn.SimpleRegexpRedactor=void 0;var tp=class{regexpMatcher;replaceWith;constructor({replaceWith:n,regexpPattern:i}){this.replaceWith=n,this.regexpMatcher=i}redact(n){return n.replace(this.regexpMatcher,this.replaceWith)}};Jn.SimpleRegexpRedactor=tp});var np=M(Yn=>{"use strict";Object.defineProperty(Yn,"__esModule",{value:!0});Yn.isSimpleRegexpCustomRedactorConfig=Nu;Yn.isSyncRedactor=Au;function Nu(a){return typeof a.regexpPattern<"u"}function Au(a){return typeof a.redact=="function"}});var ip=M(rp=>{"use strict";Object.defineProperty(rp,"__esModule",{value:!0});rp.composeChildRedactors=Eu;var Pu=es(),Ru=ts(),is=ns(),ls=rs(),Du=np();function ps(a){return(0,Du.isSimpleRegexpCustomRedactorConfig)(a)?new ls.SimpleRegexpRedactor({regexpPattern:a.regexpPattern,replaceWith:a.replaceWith}):a}function Eu(a={}){let n=[];a.customRedactors&&a.customRedactors.before&&a.customRedactors.before.map(ps).forEach(i=>n.push(i));for(let i of Object.keys(is))(!a.builtInRedactors||!a.builtInRedactors[i]||a.builtInRedactors[i].enabled!==!1)&&n.push(new ls.SimpleRegexpRedactor({regexpPattern:is[i],replaceWith:a.globalReplaceWith||(0,Pu.snakeCase)(i).toUpperCase()}));return(!a.builtInRedactors||!a.builtInRedactors.names||a.builtInRedactors.names.enabled!==!1)&&n.push(new Ru.NameRedactor(a.globalReplaceWith)),a.customRedactors&&a.customRedactors.after&&a.customRedactors.after.map(ps).forEach(i=>n.push(i)),n}});var os=M(Zn=>{"use strict";Object.defineProperty(Zn,"__esModule",{value:!0});Zn.SyncCompositeRedactor=void 0;var Iu=ip(),pp=class{childRedactors=[];constructor(n){this.childRedactors=(0,Iu.composeChildRedactors)(n)}redact=n=>{for(let i of this.childRedactors)n=i.redact(n);return n}};Zn.SyncCompositeRedactor=pp});var ds=M(Xn=>{"use strict";Object.defineProperty(Xn,"__esModule",{value:!0});Xn.AsyncCompositeRedactor=void 0;var Ou=ip(),zu=np(),lp=class{childRedactors=[];constructor(n){this.childRedactors=(0,Ou.composeChildRedactors)(n)}redactAsync=async n=>{for(let i of this.childRedactors)(0,zu.isSyncRedactor)(i)?n=i.redact(n):n=await i.redactAsync(n);return n}};Xn.AsyncCompositeRedactor=lp});var op=M(q1=>{"use strict";Object.defineProperty(q1,"__esModule",{value:!0});q1.AsyncRedactor=q1.SyncRedactor=void 0;var Mu=os();Object.defineProperty(q1,"SyncRedactor",{enumerable:!0,get:function(){return Mu.SyncCompositeRedactor}});var Vu=ds();Object.defineProperty(q1,"AsyncRedactor",{enumerable:!0,get:function(){return Vu.AsyncCompositeRedactor}})});var sp=M(Qn=>{"use strict";Object.defineProperty(Qn,"__esModule",{value:!0});Qn.PiiRedactor=void 0;var ju=op(),dp=class{redactor;constructor(){this.redactor=new ju.SyncRedactor({builtInRedactors:{digits:{enabled:!1}}})}redactText(n){return this.redactor.redact(n)}redact(n){return n==null?n:Array.isArray(n)?n.map(i=>this.redact(i)):typeof n=="object"?Object.fromEntries(Object.entries(n).map(([i,p])=>[i,this.redact(p)])):typeof n=="string"?this.redactText(n):this.redactText(new String(n).valueOf())}};Qn.PiiRedactor=dp});var up=M(w1=>{"use strict";Object.defineProperty(w1,"__esModule",{value:!0});w1.f=It;w1.formatTemplate=Uu;w1.getTemplate=Fu;w1.objectTemplate=mp;w1.isObjectTemplate=$u;var Bu=/({[a-zA-Z0-9_[\].]+})/g,ss=/{([a-zA-Z0-9_[\].]+)}/g,Lu=/\\{([a-zA-Z0-9_[\].]+)\\}/g,qu="chat_history",ms="role";function It(a,...n){if(n.length>0)throw new Error("No inline variables: Use {} syntax, instead of ${}");let p=(typeof a=="string"?[a]:a).join(""),l=Array.from(new Set(p.split(Bu).map(s=>ss.exec(s)?.[1]).filter(s=>!!s)));return{[ja]:s=>p.replace(ss,(c,f)=>{if(s[f]===void 0)throw new Error(`Can't format template, missing variable: ${f}`);return s[f]}).replace(Lu,(c,f)=>`{${f}}`),[U1]:Object.freeze(l),[Ot]:p}}var ja=Symbol("format"),Ot=Symbol("template"),U1=Symbol("variables");function Uu(a,n){let i=a[ja];return i(n)}function Fu(a){return a[Ot]}function mp(a){let n=er(a);function i(l){return a==null||typeof a=="number"?a:typeof a=="string"?It(a)[ja](l):Array.isArray(a)?a.flatMap(s=>Ku(s)?Wu(s,l):mp(s)[ja](l)):Object.fromEntries(Object.entries(a).map(([s,c])=>[It(s)[ja](l),mp(c)[ja](l)]))}if(typeof a=="string")return{[ja]:i,[U1]:n,[Ot]:a,toString:()=>a};if(typeof a!="object")throw new Error("Can only generate object templates for objects or strings");let p=structuredClone(a);return p[ja]=i,p[U1]=Object.freeze(n),p[Ot]=a,p}function $u(a){return ja in a&&U1 in a&&Ot in a}function er(a){return a==null||typeof a=="number"?[]:typeof a=="string"?It(a)[U1]:Array.isArray(a)?a.flatMap(n=>er(n)):Object.entries(a).flatMap(([,n])=>typeof n=="string"?It(n)[U1]:er(n))}function Ku(a){return a==null||typeof a=="number"||typeof a=="string"||Array.isArray(a)?!1:ms in a?a[ms]===qu:!1}function Wu(a,n){let i=er(a);if(i.length===0)throw new Error("Expected to find a variable in the content of the chat_history role, but none was found");return i.flatMap(l=>{let s=n[l];if(!s)throw new Error(`No value was found in 'templateParams' for the variable '${l}'. Ensure you have a corresponding entry in 'templateParams'.`);return s})}});var hp=M(zt=>{"use strict";Object.defineProperty(zt,"__esModule",{value:!0});zt.getResolvedStream=Gu;zt.getResolvedMessages=Zu;zt.getResolvedPrompt=Xu;var Hu=require("@anthropic-ai/sdk/streaming"),F1=up();async function Gu(a,n,i,p){if(n){let s=await a,c=new cp(s,p,i);return{returnValue:c,finalResultPromise:c.finishPromise}}let l=await a;return l.libretto||(l.libretto={}),l.libretto.feedbackKey=i,p?{returnValue:await a,finalResultPromise:Promise.resolve(Ju(l))}:{returnValue:await a,finalResultPromise:Promise.resolve(Yu(l))}}function Ju(a){if(!a.content)return{resolvedResponse:null};let n={usage:a.usage,stop_reason:a.stop_reason},i=a.content.filter(l=>l.type==="text");i?.length>1&&console.warn("Unexpected multiple text messages in chat response, resolving to the first one");let p=a.content.filter(l=>l.type==="tool_use");return{resolvedResponse:i[0]?.text,toolUseBlocks:p??void 0,responseMetrics:n}}function Yu(a){return a?a.completion?{resolvedResponse:a.completion,responseMetrics:{stop_reason:a.stop_reason}}:{resolvedResponse:void 0}:{resolvedResponse:null,responseMetrics:{usage:void 0,stop_reason:void 0}}}function Zu(a,n){if((0,F1.isObjectTemplate)(a)){if(!n)throw new Error("Template requires params, but none were provided");return{messages:(0,F1.formatTemplate)(a,n),template:(0,F1.getTemplate)(a)}}return{messages:a,template:null}}function Xu(a,n){if(typeof a=="string")return{prompt:a,template:null};if(!a||Array.isArray(a))return a?(typeof a[0]=="number"&&console.warn("Cannot use token numbers in prompt arrays"),{prompt:a.join(""),template:null}):{prompt:a,template:null};if(!a)return{prompt:a,template:null};if((0,F1.isObjectTemplate)(a)){if(!n)throw new Error("Template requires params, but none were provided");return{prompt:(0,F1.formatTemplate)(a,n),template:(0,F1.getTemplate)(a)}}return{prompt:a,template:null}}var cp=class extends Hu.Stream{finishPromise;resolveIterator;accumulatedResult=[];responseUsage;finishReason;isChat;feedbackKey;constructor(n,i,p){super(n.iterator,n.controller),this.isChat=!!i,this.finishPromise=new Promise(l=>this.resolveIterator=l),this.feedbackKey=p}async*[Symbol.asyncIterator](){let n=super[Symbol.asyncIterator](),i={[Symbol.asyncIterator]:()=>n};try{for await(let p of i){if(this.isChat){let l=p;l.libretto||(l.libretto={}),l.libretto.feedbackKey=this.feedbackKey,l.type==="content_block_delta"&&this.accumulatedResult.push(l.delta.type==="text_delta"?l.delta.text:l.delta.partial_json),l.type==="message_delta"&&l.delta.stop_reason&&(this.finishReason=l.delta.stop_reason)}else{let l=p;l.libretto||(l.libretto={}),l.libretto.feedbackKey=this.feedbackKey,this.accumulatedResult.push(l.completion),this.finishReason=l.stop_reason}yield p}}finally{this.resolveIterator({resolvedResponse:this.accumulatedResult.join(""),responseMetrics:{usage:this.responseUsage,stop_reason:this.finishReason}})}}}});var hs=M($1=>{"use strict";var cs=$1&&$1.__importDefault||function(a){return a&&a.__esModule?a:{default:a}};Object.defineProperty($1,"__esModule",{value:!0});$1.LibrettoCompletions=void 0;var Qu=cs(require("@anthropic-ai/sdk")),e7=cs(require("crypto")),a7=ar(),t7=sp(),us=hp(),fp=class extends Qu.default.Completions{config;piiRedactor;constructor(n,i){super(n),this.config=i,i.redactPii&&(this.piiRedactor=new t7.PiiRedactor)}create(n,i){return this._create(n,i)}async _create(n,i){let p=Date.now(),{libretto:l,prompt:s,stream:c,...f}=n,{prompt:h,template:b}=(0,us.getResolvedPrompt)(s,l?.templateParams),C=super.create({...f,prompt:h,stream:c},i),x=Array.isArray(h)?null:h,E=l?.promptTemplateName??this.config.promptTemplateName;if(!E&&!this.config.allowUnnamedPrompts)return C;let O=l?.feedbackKey??e7.default.randomUUID(),{finalResultPromise:R,returnValue:q}=await(0,us.getResolvedStream)(C,c,O,!1);return R.then(async({resolvedResponse:F,responseMetrics:U})=>{let j=Date.now()-p,Q=l?.templateParams??{};if(this.piiRedactor)try{F=this.piiRedactor.redact(F),Q=this.piiRedactor.redact(Q)}catch(ee){console.log("Failed to redact PII",ee)}await(0,a7.send_event)({responseTime:j,response:F,responseMetrics:U,params:Q,apiKey:l?.apiKey??this.config.apiKey??process.env.LIBRETTO_API_KEY,promptTemplateText:b??x,promptTemplateName:E,apiName:l?.promptTemplateName??this.config.promptTemplateName,prompt:{},chatId:l?.chatId??this.config.chatId,chainId:l?.chainId??l?.parentEventId,context:l?.context,feedbackKey:O,modelParameters:{modelProvider:"anthropic",modelType:"completion",...f}})}),q}};$1.LibrettoCompletions=fp});var vs=M(K1=>{"use strict";var fs=K1&&K1.__importDefault||function(a){return a&&a.__esModule?a:{default:a}};Object.defineProperty(K1,"__esModule",{value:!0});K1.LibrettoMessages=void 0;var n7=fs(require("@anthropic-ai/sdk")),r7=fs(require("crypto")),gs=ar(),i7=sp(),gp=hp();function p7(a,n){if(!a)return;let i=a;return Array.isArray(i)&&(i=(0,gs.objectTemplate)(i.map(p=>p.text).join(`
`))),(0,gp.getResolvedPrompt)(i,n)}var vp=class extends n7.default.Messages{config;piiRedactor;constructor(n,i){super(n),this.config=i,i.redactPii&&(this.piiRedactor=new i7.PiiRedactor)}create(n,i){return this._create(n,i)}async _create(n,i){let p=Date.now(),{libretto:l,messages:s,system:c,stream:f,...h}=n,b=p7(c,l?.templateParams),{messages:C,template:x}=(0,gp.getResolvedMessages)(s,l?.templateParams),E=super.create({...h,system:b?.prompt,messages:C,stream:f},i),O=l?.promptTemplateName??this.config.promptTemplateName;if(!O&&!this.config.allowUnnamedPrompts)return E;let R=l?.feedbackKey??r7.default.randomUUID(),{finalResultPromise:q,returnValue:F}=await(0,gp.getResolvedStream)(E,f,R,!0);return q.then(async({resolvedResponse:U,responseMetrics:j,toolUseBlocks:Q})=>{let ee=Date.now()-p,ae=l?.templateParams??{};if(this.piiRedactor)try{U=this.piiRedactor.redact(U),ae=this.piiRedactor.redact(ae)}catch(ze){console.log("Failed to redact PII",ze)}let be=x?.map(ze=>ze)??[];if(be?.length&&b){let ze={role:"system",content:b.template??b.prompt};be.unshift(ze)}await(0,gs.send_event)({responseTime:ee,response:U,rawResponse:F,toolCalls:Q,tools:n.tools,responseMetrics:j,params:ae,apiKey:l?.apiKey??this.config.apiKey??process.env.LIBRETTO_API_KEY,promptTemplateChat:ae?.promptTemplateChat??be??C,promptTemplateName:O,apiName:l?.promptTemplateName??this.config.promptTemplateName,prompt:{},chatId:l?.chatId??this.config.chatId,chainId:l?.chainId??l?.parentEventId,context:l?.context,feedbackKey:R,modelParameters:{modelProvider:"anthropic",modelType:"chat",...h}})}),F}};K1.LibrettoMessages=vp});var ys=M(W1=>{"use strict";var l7=W1&&W1.__importDefault||function(a){return a&&a.__esModule?a:{default:a}};Object.defineProperty(W1,"__esModule",{value:!0});W1.Anthropic=void 0;var o7=l7(require("@anthropic-ai/sdk")),d7=hs(),s7=vs(),yp=class extends o7.default{constructor(n){super(n);let i=n?.libretto??{};this.messages=new s7.LibrettoMessages(this,i),this.completions=new d7.LibrettoCompletions(this,i)}};W1.Anthropic=yp});var ws=M(Mt=>{"use strict";Object.defineProperty(Mt,"__esModule",{value:!0});Mt.send_event=m7;Mt.sendFeedback=u7;Mt.updateChain=c7;function wp(a,n){return process.env[n]?process.env[n]:`${process.env.LIBRETTO_API_PREFIX??"https://app.getlibretto.com/api"}/${a}`}async function m7(a){if(!a.apiKey){console.warn("No LIBRETTO_API_KEY provided, no event will be sent");return}let n=wp("event","LIBRETTO_REPORTING_URL"),i=JSON.stringify(a);try{let p=await fetch(n,{method:"POST",body:i,headers:{"Content-Type":"application/json"}}),l=await bp(p);if(!p.ok)throw new Error(`Failed to send event: ${JSON.stringify(l)}`);return l}catch(p){console.error("Failed to send event to libretto: ",p)}}async function bp(a){try{return await a.json()}catch(n){throw new Error(`Unparseable response: ${a.status} ${a.statusText} ${n}`)}}async function u7(a){if(!a.feedbackKey){console.warn("Could not send feedback to Libretto: missing feedback key");return}if(a.apiKey=a.apiKey??process.env.LIBRETTO_API_KEY,!a.apiKey){console.warn("Could not send feedback to Libretto: missing API key");return}let n=Object.fromEntries(Object.entries(a).map(([s,c])=>s==="feedbackKey"?["feedback_key",c]:s==="betterResponse"?["better_response",c]:[s,c])),i=wp("feedback","LIBRETTO_FEEDBACK_URL"),p=await fetch(i,{method:"POST",body:JSON.stringify(n),headers:{"Content-Type":"application/json"}}),l=await bp(p);if(!p.ok)throw new Error(`Failed to send feedback: ${JSON.stringify(l)}`);return l}async function c7(a){if(!a.id){console.warn("[Libretto] Could not update chain: missing id");return}if(a.apiKey=a.apiKey??process.env.LIBRETTO_API_KEY,!a.apiKey){console.warn("[Libretto] Could not update chain: missing API key");return}let n=wp("v1/updateChain","LIBRETTO_UPDATE_CHAIN_URL"),i=await fetch(n,{method:"POST",body:JSON.stringify(a),headers:{"Content-Type":"application/json"}}),p=await bp(i);if(!i.ok)throw new Error(`[Libretto] Failed to update chain: ${JSON.stringify(p)}`);return p}});var ar=M(oa=>{"use strict";Object.defineProperty(oa,"__esModule",{value:!0});oa.objectTemplate=oa.f=oa.sendFeedback=oa.send_event=oa.Anthropic=void 0;var h7=ys();Object.defineProperty(oa,"Anthropic",{enumerable:!0,get:function(){return h7.Anthropic}});var bs=ws();Object.defineProperty(oa,"send_event",{enumerable:!0,get:function(){return bs.send_event}});Object.defineProperty(oa,"sendFeedback",{enumerable:!0,get:function(){return bs.sendFeedback}});var _s=up();Object.defineProperty(oa,"f",{enumerable:!0,get:function(){return _s.f}});Object.defineProperty(oa,"objectTemplate",{enumerable:!0,get:function(){return _s.objectTemplate}})});var Ls=M((ev,Bs)=>{"use strict";var he={};Bs.exports=he;function js(a){return a<0?-1:1}function ec(a){return a%1===.5&&!(a&1)?Math.floor(a):Math.round(a)}function a1(a,n){n.unsigned||--a;let i=n.unsigned?0:-Math.pow(2,a),p=Math.pow(2,a)-1,l=n.moduloBitLength?Math.pow(2,n.moduloBitLength):Math.pow(2,a),s=n.moduloBitLength?Math.pow(2,n.moduloBitLength-1):Math.pow(2,a-1);return function(c,f){f||(f={});let h=+c;if(f.enforceRange){if(!Number.isFinite(h))throw new TypeError("Argument is not a finite number");if(h=js(h)*Math.floor(Math.abs(h)),h<i||h>p)throw new TypeError("Argument is not in byte range");return h}if(!isNaN(h)&&f.clamp)return h=ec(h),h<i&&(h=i),h>p&&(h=p),h;if(!Number.isFinite(h)||h===0)return 0;if(h=js(h)*Math.floor(Math.abs(h)),h=h%l,!n.unsigned&&h>=s)return h-l;if(n.unsigned){if(h<0)h+=l;else if(h===-0)return 0}return h}}he.void=function(){};he.boolean=function(a){return!!a};he.byte=a1(8,{unsigned:!1});he.octet=a1(8,{unsigned:!0});he.short=a1(16,{unsigned:!1});he["unsigned short"]=a1(16,{unsigned:!0});he.long=a1(32,{unsigned:!1});he["unsigned long"]=a1(32,{unsigned:!0});he["long long"]=a1(32,{unsigned:!1,moduloBitLength:64});he["unsigned long long"]=a1(32,{unsigned:!0,moduloBitLength:64});he.double=function(a){let n=+a;if(!Number.isFinite(n))throw new TypeError("Argument is not a finite floating-point value");return n};he["unrestricted double"]=function(a){let n=+a;if(isNaN(n))throw new TypeError("Argument is NaN");return n};he.float=he.double;he["unrestricted float"]=he["unrestricted double"];he.DOMString=function(a,n){return n||(n={}),n.treatNullAsEmptyString&&a===null?"":String(a)};he.ByteString=function(a,n){let i=String(a),p;for(let l=0;(p=i.codePointAt(l))!==void 0;++l)if(p>255)throw new TypeError("Argument is not a valid bytestring");return i};he.USVString=function(a){let n=String(a),i=n.length,p=[];for(let l=0;l<i;++l){let s=n.charCodeAt(l);if(s<55296||s>57343)p.push(String.fromCodePoint(s));else if(56320<=s&&s<=57343)p.push(String.fromCodePoint(65533));else if(l===i-1)p.push(String.fromCodePoint(65533));else{let c=n.charCodeAt(l+1);if(56320<=c&&c<=57343){let f=s&1023,h=c&1023;p.push(String.fromCodePoint(65536+1024*f+h)),++l}else p.push(String.fromCodePoint(65533))}}return p.join("")};he.Date=function(a,n){if(!(a instanceof Date))throw new TypeError("Argument is not a Date object");if(!isNaN(a))return a};he.RegExp=function(a,n){return a instanceof RegExp||(a=new RegExp(a)),a}});var qs=M((av,t1)=>{"use strict";t1.exports.mixin=function(n,i){let p=Object.getOwnPropertyNames(i);for(let l=0;l<p.length;++l)Object.defineProperty(n,p[l],Object.getOwnPropertyDescriptor(i,p[l]))};t1.exports.wrapperSymbol=Symbol("wrapper");t1.exports.implSymbol=Symbol("impl");t1.exports.wrapperForImpl=function(a){return a[t1.exports.wrapperSymbol]};t1.exports.implForWrapper=function(a){return a[t1.exports.implSymbol]}});var Us=M((tv,ac)=>{ac.exports=[[[0,44],"disallowed_STD3_valid"],[[45,46],"valid"],[[47,47],"disallowed_STD3_valid"],[[48,57],"valid"],[[58,64],"disallowed_STD3_valid"],[[65,65],"mapped",[97]],[[66,66],"mapped",[98]],[[67,67],"mapped",[99]],[[68,68],"mapped",[100]],[[69,69],"mapped",[101]],[[70,70],"mapped",[102]],[[71,71],"mapped",[103]],[[72,72],"mapped",[104]],[[73,73],"mapped",[105]],[[74,74],"mapped",[106]],[[75,75],"mapped",[107]],[[76,76],"mapped",[108]],[[77,77],"mapped",[109]],[[78,78],"mapped",[110]],[[79,79],"mapped",[111]],[[80,80],"mapped",[112]],[[81,81],"mapped",[113]],[[82,82],"mapped",[114]],[[83,83],"mapped",[115]],[[84,84],"mapped",[116]],[[85,85],"mapped",[117]],[[86,86],"mapped",[118]],[[87,87],"mapped",[119]],[[88,88],"mapped",[120]],[[89,89],"mapped",[121]],[[90,90],"mapped",[122]],[[91,96],"disallowed_STD3_valid"],[[97,122],"valid"],[[123,127],"disallowed_STD3_valid"],[[128,159],"disallowed"],[[160,160],"disallowed_STD3_mapped",[32]],[[161,167],"valid",[],"NV8"],[[168,168],"disallowed_STD3_mapped",[32,776]],[[169,169],"valid",[],"NV8"],[[170,170],"mapped",[97]],[[171,172],"valid",[],"NV8"],[[173,173],"ignored"],[[174,174],"valid",[],"NV8"],[[175,175],"disallowed_STD3_mapped",[32,772]],[[176,177],"valid",[],"NV8"],[[178,178],"mapped",[50]],[[179,179],"mapped",[51]],[[180,180],"disallowed_STD3_mapped",[32,769]],[[181,181],"mapped",[956]],[[182,182],"valid",[],"NV8"],[[183,183],"valid"],[[184,184],"disallowed_STD3_mapped",[32,807]],[[185,185],"mapped",[49]],[[186,186],"mapped",[111]],[[187,187],"valid",[],"NV8"],[[188,188],"mapped",[49,8260,52]],[[189,189],"mapped",[49,8260,50]],[[190,190],"mapped",[51,8260,52]],[[191,191],"valid",[],"NV8"],[[192,192],"mapped",[224]],[[193,193],"mapped",[225]],[[194,194],"mapped",[226]],[[195,195],"mapped",[227]],[[196,196],"mapped",[228]],[[197,197],"mapped",[229]],[[198,198],"mapped",[230]],[[199,199],"mapped",[231]],[[200,200],"mapped",[232]],[[201,201],"mapped",[233]],[[202,202],"mapped",[234]],[[203,203],"mapped",[235]],[[204,204],"mapped",[236]],[[205,205],"mapped",[237]],[[206,206],"mapped",[238]],[[207,207],"mapped",[239]],[[208,208],"mapped",[240]],[[209,209],"mapped",[241]],[[210,210],"mapped",[242]],[[211,211],"mapped",[243]],[[212,212],"mapped",[244]],[[213,213],"mapped",[245]],[[214,214],"mapped",[246]],[[215,215],"valid",[],"NV8"],[[216,216],"mapped",[248]],[[217,217],"mapped",[249]],[[218,218],"mapped",[250]],[[219,219],"mapped",[251]],[[220,220],"mapped",[252]],[[221,221],"mapped",[253]],[[222,222],"mapped",[254]],[[223,223],"deviation",[115,115]],[[224,246],"valid"],[[247,247],"valid",[],"NV8"],[[248,255],"valid"],[[256,256],"mapped",[257]],[[257,257],"valid"],[[258,258],"mapped",[259]],[[259,259],"valid"],[[260,260],"mapped",[261]],[[261,261],"valid"],[[262,262],"mapped",[263]],[[263,263],"valid"],[[264,264],"mapped",[265]],[[265,265],"valid"],[[266,266],"mapped",[267]],[[267,267],"valid"],[[268,268],"mapped",[269]],[[269,269],"valid"],[[270,270],"mapped",[271]],[[271,271],"valid"],[[272,272],"mapped",[273]],[[273,273],"valid"],[[274,274],"mapped",[275]],[[275,275],"valid"],[[276,276],"mapped",[277]],[[277,277],"valid"],[[278,278],"mapped",[279]],[[279,279],"valid"],[[280,280],"mapped",[281]],[[281,281],"valid"],[[282,282],"mapped",[283]],[[283,283],"valid"],[[284,284],"mapped",[285]],[[285,285],"valid"],[[286,286],"mapped",[287]],[[287,287],"valid"],[[288,288],"mapped",[289]],[[289,289],"valid"],[[290,290],"mapped",[291]],[[291,291],"valid"],[[292,292],"mapped",[293]],[[293,293],"valid"],[[294,294],"mapped",[295]],[[295,295],"valid"],[[296,296],"mapped",[297]],[[297,297],"valid"],[[298,298],"mapped",[299]],[[299,299],"valid"],[[300,300],"mapped",[301]],[[301,301],"valid"],[[302,302],"mapped",[303]],[[303,303],"valid"],[[304,304],"mapped",[105,775]],[[305,305],"valid"],[[306,307],"mapped",[105,106]],[[308,308],"mapped",[309]],[[309,309],"valid"],[[310,310],"mapped",[311]],[[311,312],"valid"],[[313,313],"mapped",[314]],[[314,314],"valid"],[[315,315],"mapped",[316]],[[316,316],"valid"],[[317,317],"mapped",[318]],[[318,318],"valid"],[[319,320],"mapped",[108,183]],[[321,321],"mapped",[322]],[[322,322],"valid"],[[323,323],"mapped",[324]],[[324,324],"valid"],[[325,325],"mapped",[326]],[[326,326],"valid"],[[327,327],"mapped",[328]],[[328,328],"valid"],[[329,329],"mapped",[700,110]],[[330,330],"mapped",[331]],[[331,331],"valid"],[[332,332],"mapped",[333]],[[333,333],"valid"],[[334,334],"mapped",[335]],[[335,335],"valid"],[[336,336],"mapped",[337]],[[337,337],"valid"],[[338,338],"mapped",[339]],[[339,339],"valid"],[[340,340],"mapped",[341]],[[341,341],"valid"],[[342,342],"mapped",[343]],[[343,343],"valid"],[[344,344],"mapped",[345]],[[345,345],"valid"],[[346,346],"mapped",[347]],[[347,347],"valid"],[[348,348],"mapped",[349]],[[349,349],"valid"],[[350,350],"mapped",[351]],[[351,351],"valid"],[[352,352],"mapped",[353]],[[353,353],"valid"],[[354,354],"mapped",[355]],[[355,355],"valid"],[[356,356],"mapped",[357]],[[357,357],"valid"],[[358,358],"mapped",[359]],[[359,359],"valid"],[[360,360],"mapped",[361]],[[361,361],"valid"],[[362,362],"mapped",[363]],[[363,363],"valid"],[[364,364],"mapped",[365]],[[365,365],"valid"],[[366,366],"mapped",[367]],[[367,367],"valid"],[[368,368],"mapped",[369]],[[369,369],"valid"],[[370,370],"mapped",[371]],[[371,371],"valid"],[[372,372],"mapped",[373]],[[373,373],"valid"],[[374,374],"mapped",[375]],[[375,375],"valid"],[[376,376],"mapped",[255]],[[377,377],"mapped",[378]],[[378,378],"valid"],[[379,379],"mapped",[380]],[[380,380],"valid"],[[381,381],"mapped",[382]],[[382,382],"valid"],[[383,383],"mapped",[115]],[[384,384],"valid"],[[385,385],"mapped",[595]],[[386,386],"mapped",[387]],[[387,387],"valid"],[[388,388],"mapped",[389]],[[389,389],"valid"],[[390,390],"mapped",[596]],[[391,391],"mapped",[392]],[[392,392],"valid"],[[393,393],"mapped",[598]],[[394,394],"mapped",[599]],[[395,395],"mapped",[396]],[[396,397],"valid"],[[398,398],"mapped",[477]],[[399,399],"mapped",[601]],[[400,400],"mapped",[603]],[[401,401],"mapped",[402]],[[402,402],"valid"],[[403,403],"mapped",[608]],[[404,404],"mapped",[611]],[[405,405],"valid"],[[406,406],"mapped",[617]],[[407,407],"mapped",[616]],[[408,408],"mapped",[409]],[[409,411],"valid"],[[412,412],"mapped",[623]],[[413,413],"mapped",[626]],[[414,414],"valid"],[[415,415],"mapped",[629]],[[416,416],"mapped",[417]],[[417,417],"valid"],[[418,418],"mapped",[419]],[[419,419],"valid"],[[420,420],"mapped",[421]],[[421,421],"valid"],[[422,422],"mapped",[640]],[[423,423],"mapped",[424]],[[424,424],"valid"],[[425,425],"mapped",[643]],[[426,427],"valid"],[[428,428],"mapped",[429]],[[429,429],"valid"],[[430,430],"mapped",[648]],[[431,431],"mapped",[432]],[[432,432],"valid"],[[433,433],"mapped",[650]],[[434,434],"mapped",[651]],[[435,435],"mapped",[436]],[[436,436],"valid"],[[437,437],"mapped",[438]],[[438,438],"valid"],[[439,439],"mapped",[658]],[[440,440],"mapped",[441]],[[441,443],"valid"],[[444,444],"mapped",[445]],[[445,451],"valid"],[[452,454],"mapped",[100,382]],[[455,457],"mapped",[108,106]],[[458,460],"mapped",[110,106]],[[461,461],"mapped",[462]],[[462,462],"valid"],[[463,463],"mapped",[464]],[[464,464],"valid"],[[465,465],"mapped",[466]],[[466,466],"valid"],[[467,467],"mapped",[468]],[[468,468],"valid"],[[469,469],"mapped",[470]],[[470,470],"valid"],[[471,471],"mapped",[472]],[[472,472],"valid"],[[473,473],"mapped",[474]],[[474,474],"valid"],[[475,475],"mapped",[476]],[[476,477],"valid"],[[478,478],"mapped",[479]],[[479,479],"valid"],[[480,480],"mapped",[481]],[[481,481],"valid"],[[482,482],"mapped",[483]],[[483,483],"valid"],[[484,484],"mapped",[485]],[[485,485],"valid"],[[486,486],"mapped",[487]],[[487,487],"valid"],[[488,488],"mapped",[489]],[[489,489],"valid"],[[490,490],"mapped",[491]],[[491,491],"valid"],[[492,492],"mapped",[493]],[[493,493],"valid"],[[494,494],"mapped",[495]],[[495,496],"valid"],[[497,499],"mapped",[100,122]],[[500,500],"mapped",[501]],[[501,501],"valid"],[[502,502],"mapped",[405]],[[503,503],"mapped",[447]],[[504,504],"mapped",[505]],[[505,505],"valid"],[[506,506],"mapped",[507]],[[507,507],"valid"],[[508,508],"mapped",[509]],[[509,509],"valid"],[[510,510],"mapped",[511]],[[511,511],"valid"],[[512,512],"mapped",[513]],[[513,513],"valid"],[[514,514],"mapped",[515]],[[515,515],"valid"],[[516,516],"mapped",[517]],[[517,517],"valid"],[[518,518],"mapped",[519]],[[519,519],"valid"],[[520,520],"mapped",[521]],[[521,521],"valid"],[[522,522],"mapped",[523]],[[523,523],"valid"],[[524,524],"mapped",[525]],[[525,525],"valid"],[[526,526],"mapped",[527]],[[527,527],"valid"],[[528,528],"mapped",[529]],[[529,529],"valid"],[[530,530],"mapped",[531]],[[531,531],"valid"],[[532,532],"mapped",[533]],[[533,533],"valid"],[[534,534],"mapped",[535]],[[535,535],"valid"],[[536,536],"mapped",[537]],[[537,537],"valid"],[[538,538],"mapped",[539]],[[539,539],"valid"],[[540,540],"mapped",[541]],[[541,541],"valid"],[[542,542],"mapped",[543]],[[543,543],"valid"],[[544,544],"mapped",[414]],[[545,545],"valid"],[[546,546],"mapped",[547]],[[547,547],"valid"],[[548,548],"mapped",[549]],[[549,549],"valid"],[[550,550],"mapped",[551]],[[551,551],"valid"],[[552,552],"mapped",[553]],[[553,553],"valid"],[[554,554],"mapped",[555]],[[555,555],"valid"],[[556,556],"mapped",[557]],[[557,557],"valid"],[[558,558],"mapped",[559]],[[559,559],"valid"],[[560,560],"mapped",[561]],[[561,561],"valid"],[[562,562],"mapped",[563]],[[563,563],"valid"],[[564,566],"valid"],[[567,569],"valid"],[[570,570],"mapped",[11365]],[[571,571],"mapped",[572]],[[572,572],"valid"],[[573,573],"mapped",[410]],[[574,574],"mapped",[11366]],[[575,576],"valid"],[[577,577],"mapped",[578]],[[578,578],"valid"],[[579,579],"mapped",[384]],[[580,580],"mapped",[649]],[[581,581],"mapped",[652]],[[582,582],"mapped",[583]],[[583,583],"valid"],[[584,584],"mapped",[585]],[[585,585],"valid"],[[586,586],"mapped",[587]],[[587,587],"valid"],[[588,588],"mapped",[589]],[[589,589],"valid"],[[590,590],"mapped",[591]],[[591,591],"valid"],[[592,680],"valid"],[[681,685],"valid"],[[686,687],"valid"],[[688,688],"mapped",[104]],[[689,689],"mapped",[614]],[[690,690],"mapped",[106]],[[691,691],"mapped",[114]],[[692,692],"mapped",[633]],[[693,693],"mapped",[635]],[[694,694],"mapped",[641]],[[695,695],"mapped",[119]],[[696,696],"mapped",[121]],[[697,705],"valid"],[[706,709],"valid",[],"NV8"],[[710,721],"valid"],[[722,727],"valid",[],"NV8"],[[728,728],"disallowed_STD3_mapped",[32,774]],[[729,729],"disallowed_STD3_mapped",[32,775]],[[730,730],"disallowed_STD3_mapped",[32,778]],[[731,731],"disallowed_STD3_mapped",[32,808]],[[732,732],"disallowed_STD3_mapped",[32,771]],[[733,733],"disallowed_STD3_mapped",[32,779]],[[734,734],"valid",[],"NV8"],[[735,735],"valid",[],"NV8"],[[736,736],"mapped",[611]],[[737,737],"mapped",[108]],[[738,738],"mapped",[115]],[[739,739],"mapped",[120]],[[740,740],"mapped",[661]],[[741,745],"valid",[],"NV8"],[[746,747],"valid",[],"NV8"],[[748,748],"valid"],[[749,749],"valid",[],"NV8"],[[750,750],"valid"],[[751,767],"valid",[],"NV8"],[[768,831],"valid"],[[832,832],"mapped",[768]],[[833,833],"mapped",[769]],[[834,834],"valid"],[[835,835],"mapped",[787]],[[836,836],"mapped",[776,769]],[[837,837],"mapped",[953]],[[838,846],"valid"],[[847,847],"ignored"],[[848,855],"valid"],[[856,860],"valid"],[[861,863],"valid"],[[864,865],"valid"],[[866,866],"valid"],[[867,879],"valid"],[[880,880],"mapped",[881]],[[881,881],"valid"],[[882,882],"mapped",[883]],[[883,883],"valid"],[[884,884],"mapped",[697]],[[885,885],"valid"],[[886,886],"mapped",[887]],[[887,887],"valid"],[[888,889],"disallowed"],[[890,890],"disallowed_STD3_mapped",[32,953]],[[891,893],"valid"],[[894,894],"disallowed_STD3_mapped",[59]],[[895,895],"mapped",[1011]],[[896,899],"disallowed"],[[900,900],"disallowed_STD3_mapped",[32,769]],[[901,901],"disallowed_STD3_mapped",[32,776,769]],[[902,902],"mapped",[940]],[[903,903],"mapped",[183]],[[904,904],"mapped",[941]],[[905,905],"mapped",[942]],[[906,906],"mapped",[943]],[[907,907],"disallowed"],[[908,908],"mapped",[972]],[[909,909],"disallowed"],[[910,910],"mapped",[973]],[[911,911],"mapped",[974]],[[912,912],"valid"],[[913,913],"mapped",[945]],[[914,914],"mapped",[946]],[[915,915],"mapped",[947]],[[916,916],"mapped",[948]],[[917,917],"mapped",[949]],[[918,918],"mapped",[950]],[[919,919],"mapped",[951]],[[920,920],"mapped",[952]],[[921,921],"mapped",[953]],[[922,922],"mapped",[954]],[[923,923],"mapped",[955]],[[924,924],"mapped",[956]],[[925,925],"mapped",[957]],[[926,926],"mapped",[958]],[[927,927],"mapped",[959]],[[928,928],"mapped",[960]],[[929,929],"mapped",[961]],[[930,930],"disallowed"],[[931,931],"mapped",[963]],[[932,932],"mapped",[964]],[[933,933],"mapped",[965]],[[934,934],"mapped",[966]],[[935,935],"mapped",[967]],[[936,936],"mapped",[968]],[[937,937],"mapped",[969]],[[938,938],"mapped",[970]],[[939,939],"mapped",[971]],[[940,961],"valid"],[[962,962],"deviation",[963]],[[963,974],"valid"],[[975,975],"mapped",[983]],[[976,976],"mapped",[946]],[[977,977],"mapped",[952]],[[978,978],"mapped",[965]],[[979,979],"mapped",[973]],[[980,980],"mapped",[971]],[[981,981],"mapped",[966]],[[982,982],"mapped",[960]],[[983,983],"valid"],[[984,984],"mapped",[985]],[[985,985],"valid"],[[986,986],"mapped",[987]],[[987,987],"valid"],[[988,988],"mapped",[989]],[[989,989],"valid"],[[990,990],"mapped",[991]],[[991,991],"valid"],[[992,992],"mapped",[993]],[[993,993],"valid"],[[994,994],"mapped",[995]],[[995,995],"valid"],[[996,996],"mapped",[997]],[[997,997],"valid"],[[998,998],"mapped",[999]],[[999,999],"valid"],[[1e3,1e3],"mapped",[1001]],[[1001,1001],"valid"],[[1002,1002],"mapped",[1003]],[[1003,1003],"valid"],[[1004,1004],"mapped",[1005]],[[1005,1005],"valid"],[[1006,1006],"mapped",[1007]],[[1007,1007],"valid"],[[1008,1008],"mapped",[954]],[[1009,1009],"mapped",[961]],[[1010,1010],"mapped",[963]],[[1011,1011],"valid"],[[1012,1012],"mapped",[952]],[[1013,1013],"mapped",[949]],[[1014,1014],"valid",[],"NV8"],[[1015,1015],"mapped",[1016]],[[1016,1016],"valid"],[[1017,1017],"mapped",[963]],[[1018,1018],"mapped",[1019]],[[1019,1019],"valid"],[[1020,1020],"valid"],[[1021,1021],"mapped",[891]],[[1022,1022],"mapped",[892]],[[1023,1023],"mapped",[893]],[[1024,1024],"mapped",[1104]],[[1025,1025],"mapped",[1105]],[[1026,1026],"mapped",[1106]],[[1027,1027],"mapped",[1107]],[[1028,1028],"mapped",[1108]],[[1029,1029],"mapped",[1109]],[[1030,1030],"mapped",[1110]],[[1031,1031],"mapped",[1111]],[[1032,1032],"mapped",[1112]],[[1033,1033],"mapped",[1113]],[[1034,1034],"mapped",[1114]],[[1035,1035],"mapped",[1115]],[[1036,1036],"mapped",[1116]],[[1037,1037],"mapped",[1117]],[[1038,1038],"mapped",[1118]],[[1039,1039],"mapped",[1119]],[[1040,1040],"mapped",[1072]],[[1041,1041],"mapped",[1073]],[[1042,1042],"mapped",[1074]],[[1043,1043],"mapped",[1075]],[[1044,1044],"mapped",[1076]],[[1045,1045],"mapped",[1077]],[[1046,1046],"mapped",[1078]],[[1047,1047],"mapped",[1079]],[[1048,1048],"mapped",[1080]],[[1049,1049],"mapped",[1081]],[[1050,1050],"mapped",[1082]],[[1051,1051],"mapped",[1083]],[[1052,1052],"mapped",[1084]],[[1053,1053],"mapped",[1085]],[[1054,1054],"mapped",[1086]],[[1055,1055],"mapped",[1087]],[[1056,1056],"mapped",[1088]],[[1057,1057],"mapped",[1089]],[[1058,1058],"mapped",[1090]],[[1059,1059],"mapped",[1091]],[[1060,1060],"mapped",[1092]],[[1061,1061],"mapped",[1093]],[[1062,1062],"mapped",[1094]],[[1063,1063],"mapped",[1095]],[[1064,1064],"mapped",[1096]],[[1065,1065],"mapped",[1097]],[[1066,1066],"mapped",[1098]],[[1067,1067],"mapped",[1099]],[[1068,1068],"mapped",[1100]],[[1069,1069],"mapped",[1101]],[[1070,1070],"mapped",[1102]],[[1071,1071],"mapped",[1103]],[[1072,1103],"valid"],[[1104,1104],"valid"],[[1105,1116],"valid"],[[1117,1117],"valid"],[[1118,1119],"valid"],[[1120,1120],"mapped",[1121]],[[1121,1121],"valid"],[[1122,1122],"mapped",[1123]],[[1123,1123],"valid"],[[1124,1124],"mapped",[1125]],[[1125,1125],"valid"],[[1126,1126],"mapped",[1127]],[[1127,1127],"valid"],[[1128,1128],"mapped",[1129]],[[1129,1129],"valid"],[[1130,1130],"mapped",[1131]],[[1131,1131],"valid"],[[1132,1132],"mapped",[1133]],[[1133,1133],"valid"],[[1134,1134],"mapped",[1135]],[[1135,1135],"valid"],[[1136,1136],"mapped",[1137]],[[1137,1137],"valid"],[[1138,1138],"mapped",[1139]],[[1139,1139],"valid"],[[1140,1140],"mapped",[1141]],[[1141,1141],"valid"],[[1142,1142],"mapped",[1143]],[[1143,1143],"valid"],[[1144,1144],"mapped",[1145]],[[1145,1145],"valid"],[[1146,1146],"mapped",[1147]],[[1147,1147],"valid"],[[1148,1148],"mapped",[1149]],[[1149,1149],"valid"],[[1150,1150],"mapped",[1151]],[[1151,1151],"valid"],[[1152,1152],"mapped",[1153]],[[1153,1153],"valid"],[[1154,1154],"valid",[],"NV8"],[[1155,1158],"valid"],[[1159,1159],"valid"],[[1160,1161],"valid",[],"NV8"],[[1162,1162],"mapped",[1163]],[[1163,1163],"valid"],[[1164,1164],"mapped",[1165]],[[1165,1165],"valid"],[[1166,1166],"mapped",[1167]],[[1167,1167],"valid"],[[1168,1168],"mapped",[1169]],[[1169,1169],"valid"],[[1170,1170],"mapped",[1171]],[[1171,1171],"valid"],[[1172,1172],"mapped",[1173]],[[1173,1173],"valid"],[[1174,1174],"mapped",[1175]],[[1175,1175],"valid"],[[1176,1176],"mapped",[1177]],[[1177,1177],"valid"],[[1178,1178],"mapped",[1179]],[[1179,1179],"valid"],[[1180,1180],"mapped",[1181]],[[1181,1181],"valid"],[[1182,1182],"mapped",[1183]],[[1183,1183],"valid"],[[1184,1184],"mapped",[1185]],[[1185,1185],"valid"],[[1186,1186],"mapped",[1187]],[[1187,1187],"valid"],[[1188,1188],"mapped",[1189]],[[1189,1189],"valid"],[[1190,1190],"mapped",[1191]],[[1191,1191],"valid"],[[1192,1192],"mapped",[1193]],[[1193,1193],"valid"],[[1194,1194],"mapped",[1195]],[[1195,1195],"valid"],[[1196,1196],"mapped",[1197]],[[1197,1197],"valid"],[[1198,1198],"mapped",[1199]],[[1199,1199],"valid"],[[1200,1200],"mapped",[1201]],[[1201,1201],"valid"],[[1202,1202],"mapped",[1203]],[[1203,1203],"valid"],[[1204,1204],"mapped",[1205]],[[1205,1205],"valid"],[[1206,1206],"mapped",[1207]],[[1207,1207],"valid"],[[1208,1208],"mapped",[1209]],[[1209,1209],"valid"],[[1210,1210],"mapped",[1211]],[[1211,1211],"valid"],[[1212,1212],"mapped",[1213]],[[1213,1213],"valid"],[[1214,1214],"mapped",[1215]],[[1215,1215],"valid"],[[1216,1216],"disallowed"],[[1217,1217],"mapped",[1218]],[[1218,1218],"valid"],[[1219,1219],"mapped",[1220]],[[1220,1220],"valid"],[[1221,1221],"mapped",[1222]],[[1222,1222],"valid"],[[1223,1223],"mapped",[1224]],[[1224,1224],"valid"],[[1225,1225],"mapped",[1226]],[[1226,1226],"valid"],[[1227,1227],"mapped",[1228]],[[1228,1228],"valid"],[[1229,1229],"mapped",[1230]],[[1230,1230],"valid"],[[1231,1231],"valid"],[[1232,1232],"mapped",[1233]],[[1233,1233],"valid"],[[1234,1234],"mapped",[1235]],[[1235,1235],"valid"],[[1236,1236],"mapped",[1237]],[[1237,1237],"valid"],[[1238,1238],"mapped",[1239]],[[1239,1239],"valid"],[[1240,1240],"mapped",[1241]],[[1241,1241],"valid"],[[1242,1242],"mapped",[1243]],[[1243,1243],"valid"],[[1244,1244],"mapped",[1245]],[[1245,1245],"valid"],[[1246,1246],"mapped",[1247]],[[1247,1247],"valid"],[[1248,1248],"mapped",[1249]],[[1249,1249],"valid"],[[1250,1250],"mapped",[1251]],[[1251,1251],"valid"],[[1252,1252],"mapped",[1253]],[[1253,1253],"valid"],[[1254,1254],"mapped",[1255]],[[1255,1255],"valid"],[[1256,1256],"mapped",[1257]],[[1257,1257],"valid"],[[1258,1258],"mapped",[1259]],[[1259,1259],"valid"],[[1260,1260],"mapped",[1261]],[[1261,1261],"valid"],[[1262,1262],"mapped",[1263]],[[1263,1263],"valid"],[[1264,1264],"mapped",[1265]],[[1265,1265],"valid"],[[1266,1266],"mapped",[1267]],[[1267,1267],"valid"],[[1268,1268],"mapped",[1269]],[[1269,1269],"valid"],[[1270,1270],"mapped",[1271]],[[1271,1271],"valid"],[[1272,1272],"mapped",[1273]],[[1273,1273],"valid"],[[1274,1274],"mapped",[1275]],[[1275,1275],"valid"],[[1276,1276],"mapped",[1277]],[[1277,1277],"valid"],[[1278,1278],"mapped",[1279]],[[1279,1279],"valid"],[[1280,1280],"mapped",[1281]],[[1281,1281],"valid"],[[1282,1282],"mapped",[1283]],[[1283,1283],"valid"],[[1284,1284],"mapped",[1285]],[[1285,1285],"valid"],[[1286,1286],"mapped",[1287]],[[1287,1287],"valid"],[[1288,1288],"mapped",[1289]],[[1289,1289],"valid"],[[1290,1290],"mapped",[1291]],[[1291,1291],"valid"],[[1292,1292],"mapped",[1293]],[[1293,1293],"valid"],[[1294,1294],"mapped",[1295]],[[1295,1295],"valid"],[[1296,1296],"mapped",[1297]],[[1297,1297],"valid"],[[1298,1298],"mapped",[1299]],[[1299,1299],"valid"],[[1300,1300],"mapped",[1301]],[[1301,1301],"valid"],[[1302,1302],"mapped",[1303]],[[1303,1303],"valid"],[[1304,1304],"mapped",[1305]],[[1305,1305],"valid"],[[1306,1306],"mapped",[1307]],[[1307,1307],"valid"],[[1308,1308],"mapped",[1309]],[[1309,1309],"valid"],[[1310,1310],"mapped",[1311]],[[1311,1311],"valid"],[[1312,1312],"mapped",[1313]],[[1313,1313],"valid"],[[1314,1314],"mapped",[1315]],[[1315,1315],"valid"],[[1316,1316],"mapped",[1317]],[[1317,1317],"valid"],[[1318,1318],"mapped",[1319]],[[1319,1319],"valid"],[[1320,1320],"mapped",[1321]],[[1321,1321],"valid"],[[1322,1322],"mapped",[1323]],[[1323,1323],"valid"],[[1324,1324],"mapped",[1325]],[[1325,1325],"valid"],[[1326,1326],"mapped",[1327]],[[1327,1327],"valid"],[[1328,1328],"disallowed"],[[1329,1329],"mapped",[1377]],[[1330,1330],"mapped",[1378]],[[1331,1331],"mapped",[1379]],[[1332,1332],"mapped",[1380]],[[1333,1333],"mapped",[1381]],[[1334,1334],"mapped",[1382]],[[1335,1335],"mapped",[1383]],[[1336,1336],"mapped",[1384]],[[1337,1337],"mapped",[1385]],[[1338,1338],"mapped",[1386]],[[1339,1339],"mapped",[1387]],[[1340,1340],"mapped",[1388]],[[1341,1341],"mapped",[1389]],[[1342,1342],"mapped",[1390]],[[1343,1343],"mapped",[1391]],[[1344,1344],"mapped",[1392]],[[1345,1345],"mapped",[1393]],[[1346,1346],"mapped",[1394]],[[1347,1347],"mapped",[1395]],[[1348,1348],"mapped",[1396]],[[1349,1349],"mapped",[1397]],[[1350,1350],"mapped",[1398]],[[1351,1351],"mapped",[1399]],[[1352,1352],"mapped",[1400]],[[1353,1353],"mapped",[1401]],[[1354,1354],"mapped",[1402]],[[1355,1355],"mapped",[1403]],[[1356,1356],"mapped",[1404]],[[1357,1357],"mapped",[1405]],[[1358,1358],"mapped",[1406]],[[1359,1359],"mapped",[1407]],[[1360,1360],"mapped",[1408]],[[1361,1361],"mapped",[1409]],[[1362,1362],"mapped",[1410]],[[1363,1363],"mapped",[1411]],[[1364,1364],"mapped",[1412]],[[1365,1365],"mapped",[1413]],[[1366,1366],"mapped",[1414]],[[1367,1368],"disallowed"],[[1369,1369],"valid"],[[1370,1375],"valid",[],"NV8"],[[1376,1376],"disallowed"],[[1377,1414],"valid"],[[1415,1415],"mapped",[1381,1410]],[[1416,1416],"disallowed"],[[1417,1417],"valid",[],"NV8"],[[1418,1418],"valid",[],"NV8"],[[1419,1420],"disallowed"],[[1421,1422],"valid",[],"NV8"],[[1423,1423],"valid",[],"NV8"],[[1424,1424],"disallowed"],[[1425,1441],"valid"],[[1442,1442],"valid"],[[1443,1455],"valid"],[[1456,1465],"valid"],[[1466,1466],"valid"],[[1467,1469],"valid"],[[1470,1470],"valid",[],"NV8"],[[1471,1471],"valid"],[[1472,1472],"valid",[],"NV8"],[[1473,1474],"valid"],[[1475,1475],"valid",[],"NV8"],[[1476,1476],"valid"],[[1477,1477],"valid"],[[1478,1478],"valid",[],"NV8"],[[1479,1479],"valid"],[[1480,1487],"disallowed"],[[1488,1514],"valid"],[[1515,1519],"disallowed"],[[1520,1524],"valid"],[[1525,1535],"disallowed"],[[1536,1539],"disallowed"],[[1540,1540],"disallowed"],[[1541,1541],"disallowed"],[[1542,1546],"valid",[],"NV8"],[[1547,1547],"valid",[],"NV8"],[[1548,1548],"valid",[],"NV8"],[[1549,1551],"valid",[],"NV8"],[[1552,1557],"valid"],[[1558,1562],"valid"],[[1563,1563],"valid",[],"NV8"],[[1564,1564],"disallowed"],[[1565,1565],"disallowed"],[[1566,1566],"valid",[],"NV8"],[[1567,1567],"valid",[],"NV8"],[[1568,1568],"valid"],[[1569,1594],"valid"],[[1595,1599],"valid"],[[1600,1600],"valid",[],"NV8"],[[1601,1618],"valid"],[[1619,1621],"valid"],[[1622,1624],"valid"],[[1625,1630],"valid"],[[1631,1631],"valid"],[[1632,1641],"valid"],[[1642,1645],"valid",[],"NV8"],[[1646,1647],"valid"],[[1648,1652],"valid"],[[1653,1653],"mapped",[1575,1652]],[[1654,1654],"mapped",[1608,1652]],[[1655,1655],"mapped",[1735,1652]],[[1656,1656],"mapped",[1610,1652]],[[1657,1719],"valid"],[[1720,1721],"valid"],[[1722,1726],"valid"],[[1727,1727],"valid"],[[1728,1742],"valid"],[[1743,1743],"valid"],[[1744,1747],"valid"],[[1748,1748],"valid",[],"NV8"],[[1749,1756],"valid"],[[1757,1757],"disallowed"],[[1758,1758],"valid",[],"NV8"],[[1759,1768],"valid"],[[1769,1769],"valid",[],"NV8"],[[1770,1773],"valid"],[[1774,1775],"valid"],[[1776,1785],"valid"],[[1786,1790],"valid"],[[1791,1791],"valid"],[[1792,1805],"valid",[],"NV8"],[[1806,1806],"disallowed"],[[1807,1807],"disallowed"],[[1808,1836],"valid"],[[1837,1839],"valid"],[[1840,1866],"valid"],[[1867,1868],"disallowed"],[[1869,1871],"valid"],[[1872,1901],"valid"],[[1902,1919],"valid"],[[1920,1968],"valid"],[[1969,1969],"valid"],[[1970,1983],"disallowed"],[[1984,2037],"valid"],[[2038,2042],"valid",[],"NV8"],[[2043,2047],"disallowed"],[[2048,2093],"valid"],[[2094,2095],"disallowed"],[[2096,2110],"valid",[],"NV8"],[[2111,2111],"disallowed"],[[2112,2139],"valid"],[[2140,2141],"disallowed"],[[2142,2142],"valid",[],"NV8"],[[2143,2207],"disallowed"],[[2208,2208],"valid"],[[2209,2209],"valid"],[[2210,2220],"valid"],[[2221,2226],"valid"],[[2227,2228],"valid"],[[2229,2274],"disallowed"],[[2275,2275],"valid"],[[2276,2302],"valid"],[[2303,2303],"valid"],[[2304,2304],"valid"],[[2305,2307],"valid"],[[2308,2308],"valid"],[[2309,2361],"valid"],[[2362,2363],"valid"],[[2364,2381],"valid"],[[2382,2382],"valid"],[[2383,2383],"valid"],[[2384,2388],"valid"],[[2389,2389],"valid"],[[2390,2391],"valid"],[[2392,2392],"mapped",[2325,2364]],[[2393,2393],"mapped",[2326,2364]],[[2394,2394],"mapped",[2327,2364]],[[2395,2395],"mapped",[2332,2364]],[[2396,2396],"mapped",[2337,2364]],[[2397,2397],"mapped",[2338,2364]],[[2398,2398],"mapped",[2347,2364]],[[2399,2399],"mapped",[2351,2364]],[[2400,2403],"valid"],[[2404,2405],"valid",[],"NV8"],[[2406,2415],"valid"],[[2416,2416],"valid",[],"NV8"],[[2417,2418],"valid"],[[2419,2423],"valid"],[[2424,2424],"valid"],[[2425,2426],"valid"],[[2427,2428],"valid"],[[2429,2429],"valid"],[[2430,2431],"valid"],[[2432,2432],"valid"],[[2433,2435],"valid"],[[2436,2436],"disallowed"],[[2437,2444],"valid"],[[2445,2446],"disallowed"],[[2447,2448],"valid"],[[2449,2450],"disallowed"],[[2451,2472],"valid"],[[2473,2473],"disallowed"],[[2474,2480],"valid"],[[2481,2481],"disallowed"],[[2482,2482],"valid"],[[2483,2485],"disallowed"],[[2486,2489],"valid"],[[2490,2491],"disallowed"],[[2492,2492],"valid"],[[2493,2493],"valid"],[[2494,2500],"valid"],[[2501,2502],"disallowed"],[[2503,2504],"valid"],[[2505,2506],"disallowed"],[[2507,2509],"valid"],[[2510,2510],"valid"],[[2511,2518],"disallowed"],[[2519,2519],"valid"],[[2520,2523],"disallowed"],[[2524,2524],"mapped",[2465,2492]],[[2525,2525],"mapped",[2466,2492]],[[2526,2526],"disallowed"],[[2527,2527],"mapped",[2479,2492]],[[2528,2531],"valid"],[[2532,2533],"disallowed"],[[2534,2545],"valid"],[[2546,2554],"valid",[],"NV8"],[[2555,2555],"valid",[],"NV8"],[[2556,2560],"disallowed"],[[2561,2561],"valid"],[[2562,2562],"valid"],[[2563,2563],"valid"],[[2564,2564],"disallowed"],[[2565,2570],"valid"],[[2571,2574],"disallowed"],[[2575,2576],"valid"],[[2577,2578],"disallowed"],[[2579,2600],"valid"],[[2601,2601],"disallowed"],[[2602,2608],"valid"],[[2609,2609],"disallowed"],[[2610,2610],"valid"],[[2611,2611],"mapped",[2610,2620]],[[2612,2612],"disallowed"],[[2613,2613],"valid"],[[2614,2614],"mapped",[2616,2620]],[[2615,2615],"disallowed"],[[2616,2617],"valid"],[[2618,2619],"disallowed"],[[2620,2620],"valid"],[[2621,2621],"disallowed"],[[2622,2626],"valid"],[[2627,2630],"disallowed"],[[2631,2632],"valid"],[[2633,2634],"disallowed"],[[2635,2637],"valid"],[[2638,2640],"disallowed"],[[2641,2641],"valid"],[[2642,2648],"disallowed"],[[2649,2649],"mapped",[2582,2620]],[[2650,2650],"mapped",[2583,2620]],[[2651,2651],"mapped",[2588,2620]],[[2652,2652],"valid"],[[2653,2653],"disallowed"],[[2654,2654],"mapped",[2603,2620]],[[2655,2661],"disallowed"],[[2662,2676],"valid"],[[2677,2677],"valid"],[[2678,2688],"disallowed"],[[2689,2691],"valid"],[[2692,2692],"disallowed"],[[2693,2699],"valid"],[[2700,2700],"valid"],[[2701,2701],"valid"],[[2702,2702],"disallowed"],[[2703,2705],"valid"],[[2706,2706],"disallowed"],[[2707,2728],"valid"],[[2729,2729],"disallowed"],[[2730,2736],"valid"],[[2737,2737],"disallowed"],[[2738,2739],"valid"],[[2740,2740],"disallowed"],[[2741,2745],"valid"],[[2746,2747],"disallowed"],[[2748,2757],"valid"],[[2758,2758],"disallowed"],[[2759,2761],"valid"],[[2762,2762],"disallowed"],[[2763,2765],"valid"],[[2766,2767],"disallowed"],[[2768,2768],"valid"],[[2769,2783],"disallowed"],[[2784,2784],"valid"],[[2785,2787],"valid"],[[2788,2789],"disallowed"],[[2790,2799],"valid"],[[2800,2800],"valid",[],"NV8"],[[2801,2801],"valid",[],"NV8"],[[2802,2808],"disallowed"],[[2809,2809],"valid"],[[2810,2816],"disallowed"],[[2817,2819],"valid"],[[2820,2820],"disallowed"],[[2821,2828],"valid"],[[2829,2830],"disallowed"],[[2831,2832],"valid"],[[2833,2834],"disallowed"],[[2835,2856],"valid"],[[2857,2857],"disallowed"],[[2858,2864],"valid"],[[2865,2865],"disallowed"],[[2866,2867],"valid"],[[2868,2868],"disallowed"],[[2869,2869],"valid"],[[2870,2873],"valid"],[[2874,2875],"disallowed"],[[2876,2883],"valid"],[[2884,2884],"valid"],[[2885,2886],"disallowed"],[[2887,2888],"valid"],[[2889,2890],"disallowed"],[[2891,2893],"valid"],[[2894,2901],"disallowed"],[[2902,2903],"valid"],[[2904,2907],"disallowed"],[[2908,2908],"mapped",[2849,2876]],[[2909,2909],"mapped",[2850,2876]],[[2910,2910],"disallowed"],[[2911,2913],"valid"],[[2914,2915],"valid"],[[2916,2917],"disallowed"],[[2918,2927],"valid"],[[2928,2928],"valid",[],"NV8"],[[2929,2929],"valid"],[[2930,2935],"valid",[],"NV8"],[[2936,2945],"disallowed"],[[2946,2947],"valid"],[[2948,2948],"disallowed"],[[2949,2954],"valid"],[[2955,2957],"disallowed"],[[2958,2960],"valid"],[[2961,2961],"disallowed"],[[2962,2965],"valid"],[[2966,2968],"disallowed"],[[2969,2970],"valid"],[[2971,2971],"disallowed"],[[2972,2972],"valid"],[[2973,2973],"disallowed"],[[2974,2975],"valid"],[[2976,2978],"disallowed"],[[2979,2980],"valid"],[[2981,2983],"disallowed"],[[2984,2986],"valid"],[[2987,2989],"disallowed"],[[2990,2997],"valid"],[[2998,2998],"valid"],[[2999,3001],"valid"],[[3002,3005],"disallowed"],[[3006,3010],"valid"],[[3011,3013],"disallowed"],[[3014,3016],"valid"],[[3017,3017],"disallowed"],[[3018,3021],"valid"],[[3022,3023],"disallowed"],[[3024,3024],"valid"],[[3025,3030],"disallowed"],[[3031,3031],"valid"],[[3032,3045],"disallowed"],[[3046,3046],"valid"],[[3047,3055],"valid"],[[3056,3058],"valid",[],"NV8"],[[3059,3066],"valid",[],"NV8"],[[3067,3071],"disallowed"],[[3072,3072],"valid"],[[3073,3075],"valid"],[[3076,3076],"disallowed"],[[3077,3084],"valid"],[[3085,3085],"disallowed"],[[3086,3088],"valid"],[[3089,3089],"disallowed"],[[3090,3112],"valid"],[[3113,3113],"disallowed"],[[3114,3123],"valid"],[[3124,3124],"valid"],[[3125,3129],"valid"],[[3130,3132],"disallowed"],[[3133,3133],"valid"],[[3134,3140],"valid"],[[3141,3141],"disallowed"],[[3142,3144],"valid"],[[3145,3145],"disallowed"],[[3146,3149],"valid"],[[3150,3156],"disallowed"],[[3157,3158],"valid"],[[3159,3159],"disallowed"],[[3160,3161],"valid"],[[3162,3162],"valid"],[[3163,3167],"disallowed"],[[3168,3169],"valid"],[[3170,3171],"valid"],[[3172,3173],"disallowed"],[[3174,3183],"valid"],[[3184,3191],"disallowed"],[[3192,3199],"valid",[],"NV8"],[[3200,3200],"disallowed"],[[3201,3201],"valid"],[[3202,3203],"valid"],[[3204,3204],"disallowed"],[[3205,3212],"valid"],[[3213,3213],"disallowed"],[[3214,3216],"valid"],[[3217,3217],"disallowed"],[[3218,3240],"valid"],[[3241,3241],"disallowed"],[[3242,3251],"valid"],[[3252,3252],"disallowed"],[[3253,3257],"valid"],[[3258,3259],"disallowed"],[[3260,3261],"valid"],[[3262,3268],"valid"],[[3269,3269],"disallowed"],[[3270,3272],"valid"],[[3273,3273],"disallowed"],[[3274,3277],"valid"],[[3278,3284],"disallowed"],[[3285,3286],"valid"],[[3287,3293],"disallowed"],[[3294,3294],"valid"],[[3295,3295],"disallowed"],[[3296,3297],"valid"],[[3298,3299],"valid"],[[3300,3301],"disallowed"],[[3302,3311],"valid"],[[3312,3312],"disallowed"],[[3313,3314],"valid"],[[3315,3328],"disallowed"],[[3329,3329],"valid"],[[3330,3331],"valid"],[[3332,3332],"disallowed"],[[3333,3340],"valid"],[[3341,3341],"disallowed"],[[3342,3344],"valid"],[[3345,3345],"disallowed"],[[3346,3368],"valid"],[[3369,3369],"valid"],[[3370,3385],"valid"],[[3386,3386],"valid"],[[3387,3388],"disallowed"],[[3389,3389],"valid"],[[3390,3395],"valid"],[[3396,3396],"valid"],[[3397,3397],"disallowed"],[[3398,3400],"valid"],[[3401,3401],"disallowed"],[[3402,3405],"valid"],[[3406,3406],"valid"],[[3407,3414],"disallowed"],[[3415,3415],"valid"],[[3416,3422],"disallowed"],[[3423,3423],"valid"],[[3424,3425],"valid"],[[3426,3427],"valid"],[[3428,3429],"disallowed"],[[3430,3439],"valid"],[[3440,3445],"valid",[],"NV8"],[[3446,3448],"disallowed"],[[3449,3449],"valid",[],"NV8"],[[3450,3455],"valid"],[[3456,3457],"disallowed"],[[3458,3459],"valid"],[[3460,3460],"disallowed"],[[3461,3478],"valid"],[[3479,3481],"disallowed"],[[3482,3505],"valid"],[[3506,3506],"disallowed"],[[3507,3515],"valid"],[[3516,3516],"disallowed"],[[3517,3517],"valid"],[[3518,3519],"disallowed"],[[3520,3526],"valid"],[[3527,3529],"disallowed"],[[3530,3530],"valid"],[[3531,3534],"disallowed"],[[3535,3540],"valid"],[[3541,3541],"disallowed"],[[3542,3542],"valid"],[[3543,3543],"disallowed"],[[3544,3551],"valid"],[[3552,3557],"disallowed"],[[3558,3567],"valid"],[[3568,3569],"disallowed"],[[3570,3571],"valid"],[[3572,3572],"valid",[],"NV8"],[[3573,3584],"disallowed"],[[3585,3634],"valid"],[[3635,3635],"mapped",[3661,3634]],[[3636,3642],"valid"],[[3643,3646],"disallowed"],[[3647,3647],"valid",[],"NV8"],[[3648,3662],"valid"],[[3663,3663],"valid",[],"NV8"],[[3664,3673],"valid"],[[3674,3675],"valid",[],"NV8"],[[3676,3712],"disallowed"],[[3713,3714],"valid"],[[3715,3715],"disallowed"],[[3716,3716],"valid"],[[3717,3718],"disallowed"],[[3719,3720],"valid"],[[3721,3721],"disallowed"],[[3722,3722],"valid"],[[3723,3724],"disallowed"],[[3725,3725],"valid"],[[3726,3731],"disallowed"],[[3732,3735],"valid"],[[3736,3736],"disallowed"],[[3737,3743],"valid"],[[3744,3744],"disallowed"],[[3745,3747],"valid"],[[3748,3748],"disallowed"],[[3749,3749],"valid"],[[3750,3750],"disallowed"],[[3751,3751],"valid"],[[3752,3753],"disallowed"],[[3754,3755],"valid"],[[3756,3756],"disallowed"],[[3757,3762],"valid"],[[3763,3763],"mapped",[3789,3762]],[[3764,3769],"valid"],[[3770,3770],"disallowed"],[[3771,3773],"valid"],[[3774,3775],"disallowed"],[[3776,3780],"valid"],[[3781,3781],"disallowed"],[[3782,3782],"valid"],[[3783,3783],"disallowed"],[[3784,3789],"valid"],[[3790,3791],"disallowed"],[[3792,3801],"valid"],[[3802,3803],"disallowed"],[[3804,3804],"mapped",[3755,3737]],[[3805,3805],"mapped",[3755,3745]],[[3806,3807],"valid"],[[3808,3839],"disallowed"],[[3840,3840],"valid"],[[3841,3850],"valid",[],"NV8"],[[3851,3851],"valid"],[[3852,3852],"mapped",[3851]],[[3853,3863],"valid",[],"NV8"],[[3864,3865],"valid"],[[3866,3871],"valid",[],"NV8"],[[3872,3881],"valid"],[[3882,3892],"valid",[],"NV8"],[[3893,3893],"valid"],[[3894,3894],"valid",[],"NV8"],[[3895,3895],"valid"],[[3896,3896],"valid",[],"NV8"],[[3897,3897],"valid"],[[3898,3901],"valid",[],"NV8"],[[3902,3906],"valid"],[[3907,3907],"mapped",[3906,4023]],[[3908,3911],"valid"],[[3912,3912],"disallowed"],[[3913,3916],"valid"],[[3917,3917],"mapped",[3916,4023]],[[3918,3921],"valid"],[[3922,3922],"mapped",[3921,4023]],[[3923,3926],"valid"],[[3927,3927],"mapped",[3926,4023]],[[3928,3931],"valid"],[[3932,3932],"mapped",[3931,4023]],[[3933,3944],"valid"],[[3945,3945],"mapped",[3904,4021]],[[3946,3946],"valid"],[[3947,3948],"valid"],[[3949,3952],"disallowed"],[[3953,3954],"valid"],[[3955,3955],"mapped",[3953,3954]],[[3956,3956],"valid"],[[3957,3957],"mapped",[3953,3956]],[[3958,3958],"mapped",[4018,3968]],[[3959,3959],"mapped",[4018,3953,3968]],[[3960,3960],"mapped",[4019,3968]],[[3961,3961],"mapped",[4019,3953,3968]],[[3962,3968],"valid"],[[3969,3969],"mapped",[3953,3968]],[[3970,3972],"valid"],[[3973,3973],"valid",[],"NV8"],[[3974,3979],"valid"],[[3980,3983],"valid"],[[3984,3986],"valid"],[[3987,3987],"mapped",[3986,4023]],[[3988,3989],"valid"],[[3990,3990],"valid"],[[3991,3991],"valid"],[[3992,3992],"disallowed"],[[3993,3996],"valid"],[[3997,3997],"mapped",[3996,4023]],[[3998,4001],"valid"],[[4002,4002],"mapped",[4001,4023]],[[4003,4006],"valid"],[[4007,4007],"mapped",[4006,4023]],[[4008,4011],"valid"],[[4012,4012],"mapped",[4011,4023]],[[4013,4013],"valid"],[[4014,4016],"valid"],[[4017,4023],"valid"],[[4024,4024],"valid"],[[4025,4025],"mapped",[3984,4021]],[[4026,4028],"valid"],[[4029,4029],"disallowed"],[[4030,4037],"valid",[],"NV8"],[[4038,4038],"valid"],[[4039,4044],"valid",[],"NV8"],[[4045,4045],"disallowed"],[[4046,4046],"valid",[],"NV8"],[[4047,4047],"valid",[],"NV8"],[[4048,4049],"valid",[],"NV8"],[[4050,4052],"valid",[],"NV8"],[[4053,4056],"valid",[],"NV8"],[[4057,4058],"valid",[],"NV8"],[[4059,4095],"disallowed"],[[4096,4129],"valid"],[[4130,4130],"valid"],[[4131,4135],"valid"],[[4136,4136],"valid"],[[4137,4138],"valid"],[[4139,4139],"valid"],[[4140,4146],"valid"],[[4147,4149],"valid"],[[4150,4153],"valid"],[[4154,4159],"valid"],[[4160,4169],"valid"],[[4170,4175],"valid",[],"NV8"],[[4176,4185],"valid"],[[4186,4249],"valid"],[[4250,4253],"valid"],[[4254,4255],"valid",[],"NV8"],[[4256,4293],"disallowed"],[[4294,4294],"disallowed"],[[4295,4295],"mapped",[11559]],[[4296,4300],"disallowed"],[[4301,4301],"mapped",[11565]],[[4302,4303],"disallowed"],[[4304,4342],"valid"],[[4343,4344],"valid"],[[4345,4346],"valid"],[[4347,4347],"valid",[],"NV8"],[[4348,4348],"mapped",[4316]],[[4349,4351],"valid"],[[4352,4441],"valid",[],"NV8"],[[4442,4446],"valid",[],"NV8"],[[4447,4448],"disallowed"],[[4449,4514],"valid",[],"NV8"],[[4515,4519],"valid",[],"NV8"],[[4520,4601],"valid",[],"NV8"],[[4602,4607],"valid",[],"NV8"],[[4608,4614],"valid"],[[4615,4615],"valid"],[[4616,4678],"valid"],[[4679,4679],"valid"],[[4680,4680],"valid"],[[4681,4681],"disallowed"],[[4682,4685],"valid"],[[4686,4687],"disallowed"],[[4688,4694],"valid"],[[4695,4695],"disallowed"],[[4696,4696],"valid"],[[4697,4697],"disallowed"],[[4698,4701],"valid"],[[4702,4703],"disallowed"],[[4704,4742],"valid"],[[4743,4743],"valid"],[[4744,4744],"valid"],[[4745,4745],"disallowed"],[[4746,4749],"valid"],[[4750,4751],"disallowed"],[[4752,4782],"valid"],[[4783,4783],"valid"],[[4784,4784],"valid"],[[4785,4785],"disallowed"],[[4786,4789],"valid"],[[4790,4791],"disallowed"],[[4792,4798],"valid"],[[4799,4799],"disallowed"],[[4800,4800],"valid"],[[4801,4801],"disallowed"],[[4802,4805],"valid"],[[4806,4807],"disallowed"],[[4808,4814],"valid"],[[4815,4815],"valid"],[[4816,4822],"valid"],[[4823,4823],"disallowed"],[[4824,4846],"valid"],[[4847,4847],"valid"],[[4848,4878],"valid"],[[4879,4879],"valid"],[[4880,4880],"valid"],[[4881,4881],"disallowed"],[[4882,4885],"valid"],[[4886,4887],"disallowed"],[[4888,4894],"valid"],[[4895,4895],"valid"],[[4896,4934],"valid"],[[4935,4935],"valid"],[[4936,4954],"valid"],[[4955,4956],"disallowed"],[[4957,4958],"valid"],[[4959,4959],"valid"],[[4960,4960],"valid",[],"NV8"],[[4961,4988],"valid",[],"NV8"],[[4989,4991],"disallowed"],[[4992,5007],"valid"],[[5008,5017],"valid",[],"NV8"],[[5018,5023],"disallowed"],[[5024,5108],"valid"],[[5109,5109],"valid"],[[5110,5111],"disallowed"],[[5112,5112],"mapped",[5104]],[[5113,5113],"mapped",[5105]],[[5114,5114],"mapped",[5106]],[[5115,5115],"mapped",[5107]],[[5116,5116],"mapped",[5108]],[[5117,5117],"mapped",[5109]],[[5118,5119],"disallowed"],[[5120,5120],"valid",[],"NV8"],[[5121,5740],"valid"],[[5741,5742],"valid",[],"NV8"],[[5743,5750],"valid"],[[5751,5759],"valid"],[[5760,5760],"disallowed"],[[5761,5786],"valid"],[[5787,5788],"valid",[],"NV8"],[[5789,5791],"disallowed"],[[5792,5866],"valid"],[[5867,5872],"valid",[],"NV8"],[[5873,5880],"valid"],[[5881,5887],"disallowed"],[[5888,5900],"valid"],[[5901,5901],"disallowed"],[[5902,5908],"valid"],[[5909,5919],"disallowed"],[[5920,5940],"valid"],[[5941,5942],"valid",[],"NV8"],[[5943,5951],"disallowed"],[[5952,5971],"valid"],[[5972,5983],"disallowed"],[[5984,5996],"valid"],[[5997,5997],"disallowed"],[[5998,6e3],"valid"],[[6001,6001],"disallowed"],[[6002,6003],"valid"],[[6004,6015],"disallowed"],[[6016,6067],"valid"],[[6068,6069],"disallowed"],[[6070,6099],"valid"],[[6100,6102],"valid",[],"NV8"],[[6103,6103],"valid"],[[6104,6107],"valid",[],"NV8"],[[6108,6108],"valid"],[[6109,6109],"valid"],[[6110,6111],"disallowed"],[[6112,6121],"valid"],[[6122,6127],"disallowed"],[[6128,6137],"valid",[],"NV8"],[[6138,6143],"disallowed"],[[6144,6149],"valid",[],"NV8"],[[6150,6150],"disallowed"],[[6151,6154],"valid",[],"NV8"],[[6155,6157],"ignored"],[[6158,6158],"disallowed"],[[6159,6159],"disallowed"],[[6160,6169],"valid"],[[6170,6175],"disallowed"],[[6176,6263],"valid"],[[6264,6271],"disallowed"],[[6272,6313],"valid"],[[6314,6314],"valid"],[[6315,6319],"disallowed"],[[6320,6389],"valid"],[[6390,6399],"disallowed"],[[6400,6428],"valid"],[[6429,6430],"valid"],[[6431,6431],"disallowed"],[[6432,6443],"valid"],[[6444,6447],"disallowed"],[[6448,6459],"valid"],[[6460,6463],"disallowed"],[[6464,6464],"valid",[],"NV8"],[[6465,6467],"disallowed"],[[6468,6469],"valid",[],"NV8"],[[6470,6509],"valid"],[[6510,6511],"disallowed"],[[6512,6516],"valid"],[[6517,6527],"disallowed"],[[6528,6569],"valid"],[[6570,6571],"valid"],[[6572,6575],"disallowed"],[[6576,6601],"valid"],[[6602,6607],"disallowed"],[[6608,6617],"valid"],[[6618,6618],"valid",[],"XV8"],[[6619,6621],"disallowed"],[[6622,6623],"valid",[],"NV8"],[[6624,6655],"valid",[],"NV8"],[[6656,6683],"valid"],[[6684,6685],"disallowed"],[[6686,6687],"valid",[],"NV8"],[[6688,6750],"valid"],[[6751,6751],"disallowed"],[[6752,6780],"valid"],[[6781,6782],"disallowed"],[[6783,6793],"valid"],[[6794,6799],"disallowed"],[[6800,6809],"valid"],[[6810,6815],"disallowed"],[[6816,6822],"valid",[],"NV8"],[[6823,6823],"valid"],[[6824,6829],"valid",[],"NV8"],[[6830,6831],"disallowed"],[[6832,6845],"valid"],[[6846,6846],"valid",[],"NV8"],[[6847,6911],"disallowed"],[[6912,6987],"valid"],[[6988,6991],"disallowed"],[[6992,7001],"valid"],[[7002,7018],"valid",[],"NV8"],[[7019,7027],"valid"],[[7028,7036],"valid",[],"NV8"],[[7037,7039],"disallowed"],[[7040,7082],"valid"],[[7083,7085],"valid"],[[7086,7097],"valid"],[[7098,7103],"valid"],[[7104,7155],"valid"],[[7156,7163],"disallowed"],[[7164,7167],"valid",[],"NV8"],[[7168,7223],"valid"],[[7224,7226],"disallowed"],[[7227,7231],"valid",[],"NV8"],[[7232,7241],"valid"],[[7242,7244],"disallowed"],[[7245,7293],"valid"],[[7294,7295],"valid",[],"NV8"],[[7296,7359],"disallowed"],[[7360,7367],"valid",[],"NV8"],[[7368,7375],"disallowed"],[[7376,7378],"valid"],[[7379,7379],"valid",[],"NV8"],[[7380,7410],"valid"],[[7411,7414],"valid"],[[7415,7415],"disallowed"],[[7416,7417],"valid"],[[7418,7423],"disallowed"],[[7424,7467],"valid"],[[7468,7468],"mapped",[97]],[[7469,7469],"mapped",[230]],[[7470,7470],"mapped",[98]],[[7471,7471],"valid"],[[7472,7472],"mapped",[100]],[[7473,7473],"mapped",[101]],[[7474,7474],"mapped",[477]],[[7475,7475],"mapped",[103]],[[7476,7476],"mapped",[104]],[[7477,7477],"mapped",[105]],[[7478,7478],"mapped",[106]],[[7479,7479],"mapped",[107]],[[7480,7480],"mapped",[108]],[[7481,7481],"mapped",[109]],[[7482,7482],"mapped",[110]],[[7483,7483],"valid"],[[7484,7484],"mapped",[111]],[[7485,7485],"mapped",[547]],[[7486,7486],"mapped",[112]],[[7487,7487],"mapped",[114]],[[7488,7488],"mapped",[116]],[[7489,7489],"mapped",[117]],[[7490,7490],"mapped",[119]],[[7491,7491],"mapped",[97]],[[7492,7492],"mapped",[592]],[[7493,7493],"mapped",[593]],[[7494,7494],"mapped",[7426]],[[7495,7495],"mapped",[98]],[[7496,7496],"mapped",[100]],[[7497,7497],"mapped",[101]],[[7498,7498],"mapped",[601]],[[7499,7499],"mapped",[603]],[[7500,7500],"mapped",[604]],[[7501,7501],"mapped",[103]],[[7502,7502],"valid"],[[7503,7503],"mapped",[107]],[[7504,7504],"mapped",[109]],[[7505,7505],"mapped",[331]],[[7506,7506],"mapped",[111]],[[7507,7507],"mapped",[596]],[[7508,7508],"mapped",[7446]],[[7509,7509],"mapped",[7447]],[[7510,7510],"mapped",[112]],[[7511,7511],"mapped",[116]],[[7512,7512],"mapped",[117]],[[7513,7513],"mapped",[7453]],[[7514,7514],"mapped",[623]],[[7515,7515],"mapped",[118]],[[7516,7516],"mapped",[7461]],[[7517,7517],"mapped",[946]],[[7518,7518],"mapped",[947]],[[7519,7519],"mapped",[948]],[[7520,7520],"mapped",[966]],[[7521,7521],"mapped",[967]],[[7522,7522],"mapped",[105]],[[7523,7523],"mapped",[114]],[[7524,7524],"mapped",[117]],[[7525,7525],"mapped",[118]],[[7526,7526],"mapped",[946]],[[7527,7527],"mapped",[947]],[[7528,7528],"mapped",[961]],[[7529,7529],"mapped",[966]],[[7530,7530],"mapped",[967]],[[7531,7531],"valid"],[[7532,7543],"valid"],[[7544,7544],"mapped",[1085]],[[7545,7578],"valid"],[[7579,7579],"mapped",[594]],[[7580,7580],"mapped",[99]],[[7581,7581],"mapped",[597]],[[7582,7582],"mapped",[240]],[[7583,7583],"mapped",[604]],[[7584,7584],"mapped",[102]],[[7585,7585],"mapped",[607]],[[7586,7586],"mapped",[609]],[[7587,7587],"mapped",[613]],[[7588,7588],"mapped",[616]],[[7589,7589],"mapped",[617]],[[7590,7590],"mapped",[618]],[[7591,7591],"mapped",[7547]],[[7592,7592],"mapped",[669]],[[7593,7593],"mapped",[621]],[[7594,7594],"mapped",[7557]],[[7595,7595],"mapped",[671]],[[7596,7596],"mapped",[625]],[[7597,7597],"mapped",[624]],[[7598,7598],"mapped",[626]],[[7599,7599],"mapped",[627]],[[7600,7600],"mapped",[628]],[[7601,7601],"mapped",[629]],[[7602,7602],"mapped",[632]],[[7603,7603],"mapped",[642]],[[7604,7604],"mapped",[643]],[[7605,7605],"mapped",[427]],[[7606,7606],"mapped",[649]],[[7607,7607],"mapped",[650]],[[7608,7608],"mapped",[7452]],[[7609,7609],"mapped",[651]],[[7610,7610],"mapped",[652]],[[7611,7611],"mapped",[122]],[[7612,7612],"mapped",[656]],[[7613,7613],"mapped",[657]],[[7614,7614],"mapped",[658]],[[7615,7615],"mapped",[952]],[[7616,7619],"valid"],[[7620,7626],"valid"],[[7627,7654],"valid"],[[7655,7669],"valid"],[[7670,7675],"disallowed"],[[7676,7676],"valid"],[[7677,7677],"valid"],[[7678,7679],"valid"],[[7680,7680],"mapped",[7681]],[[7681,7681],"valid"],[[7682,7682],"mapped",[7683]],[[7683,7683],"valid"],[[7684,7684],"mapped",[7685]],[[7685,7685],"valid"],[[7686,7686],"mapped",[7687]],[[7687,7687],"valid"],[[7688,7688],"mapped",[7689]],[[7689,7689],"valid"],[[7690,7690],"mapped",[7691]],[[7691,7691],"valid"],[[7692,7692],"mapped",[7693]],[[7693,7693],"valid"],[[7694,7694],"mapped",[7695]],[[7695,7695],"valid"],[[7696,7696],"mapped",[7697]],[[7697,7697],"valid"],[[7698,7698],"mapped",[7699]],[[7699,7699],"valid"],[[7700,7700],"mapped",[7701]],[[7701,7701],"valid"],[[7702,7702],"mapped",[7703]],[[7703,7703],"valid"],[[7704,7704],"mapped",[7705]],[[7705,7705],"valid"],[[7706,7706],"mapped",[7707]],[[7707,7707],"valid"],[[7708,7708],"mapped",[7709]],[[7709,7709],"valid"],[[7710,7710],"mapped",[7711]],[[7711,7711],"valid"],[[7712,7712],"mapped",[7713]],[[7713,7713],"valid"],[[7714,7714],"mapped",[7715]],[[7715,7715],"valid"],[[7716,7716],"mapped",[7717]],[[7717,7717],"valid"],[[7718,7718],"mapped",[7719]],[[7719,7719],"valid"],[[7720,7720],"mapped",[7721]],[[7721,7721],"valid"],[[7722,7722],"mapped",[7723]],[[7723,7723],"valid"],[[7724,7724],"mapped",[7725]],[[7725,7725],"valid"],[[7726,7726],"mapped",[7727]],[[7727,7727],"valid"],[[7728,7728],"mapped",[7729]],[[7729,7729],"valid"],[[7730,7730],"mapped",[7731]],[[7731,7731],"valid"],[[7732,7732],"mapped",[7733]],[[7733,7733],"valid"],[[7734,7734],"mapped",[7735]],[[7735,7735],"valid"],[[7736,7736],"mapped",[7737]],[[7737,7737],"valid"],[[7738,7738],"mapped",[7739]],[[7739,7739],"valid"],[[7740,7740],"mapped",[7741]],[[7741,7741],"valid"],[[7742,7742],"mapped",[7743]],[[7743,7743],"valid"],[[7744,7744],"mapped",[7745]],[[7745,7745],"valid"],[[7746,7746],"mapped",[7747]],[[7747,7747],"valid"],[[7748,7748],"mapped",[7749]],[[7749,7749],"valid"],[[7750,7750],"mapped",[7751]],[[7751,7751],"valid"],[[7752,7752],"mapped",[7753]],[[7753,7753],"valid"],[[7754,7754],"mapped",[7755]],[[7755,7755],"valid"],[[7756,7756],"mapped",[7757]],[[7757,7757],"valid"],[[7758,7758],"mapped",[7759]],[[7759,7759],"valid"],[[7760,7760],"mapped",[7761]],[[7761,7761],"valid"],[[7762,7762],"mapped",[7763]],[[7763,7763],"valid"],[[7764,7764],"mapped",[7765]],[[7765,7765],"valid"],[[7766,7766],"mapped",[7767]],[[7767,7767],"valid"],[[7768,7768],"mapped",[7769]],[[7769,7769],"valid"],[[7770,7770],"mapped",[7771]],[[7771,7771],"valid"],[[7772,7772],"mapped",[7773]],[[7773,7773],"valid"],[[7774,7774],"mapped",[7775]],[[7775,7775],"valid"],[[7776,7776],"mapped",[7777]],[[7777,7777],"valid"],[[7778,7778],"mapped",[7779]],[[7779,7779],"valid"],[[7780,7780],"mapped",[7781]],[[7781,7781],"valid"],[[7782,7782],"mapped",[7783]],[[7783,7783],"valid"],[[7784,7784],"mapped",[7785]],[[7785,7785],"valid"],[[7786,7786],"mapped",[7787]],[[7787,7787],"valid"],[[7788,7788],"mapped",[7789]],[[7789,7789],"valid"],[[7790,7790],"mapped",[7791]],[[7791,7791],"valid"],[[7792,7792],"mapped",[7793]],[[7793,7793],"valid"],[[7794,7794],"mapped",[7795]],[[7795,7795],"valid"],[[7796,7796],"mapped",[7797]],[[7797,7797],"valid"],[[7798,7798],"mapped",[7799]],[[7799,7799],"valid"],[[7800,7800],"mapped",[7801]],[[7801,7801],"valid"],[[7802,7802],"mapped",[7803]],[[7803,7803],"valid"],[[7804,7804],"mapped",[7805]],[[7805,7805],"valid"],[[7806,7806],"mapped",[7807]],[[7807,7807],"valid"],[[7808,7808],"mapped",[7809]],[[7809,7809],"valid"],[[7810,7810],"mapped",[7811]],[[7811,7811],"valid"],[[7812,7812],"mapped",[7813]],[[7813,7813],"valid"],[[7814,7814],"mapped",[7815]],[[7815,7815],"valid"],[[7816,7816],"mapped",[7817]],[[7817,7817],"valid"],[[7818,7818],"mapped",[7819]],[[7819,7819],"valid"],[[7820,7820],"mapped",[7821]],[[7821,7821],"valid"],[[7822,7822],"mapped",[7823]],[[7823,7823],"valid"],[[7824,7824],"mapped",[7825]],[[7825,7825],"valid"],[[7826,7826],"mapped",[7827]],[[7827,7827],"valid"],[[7828,7828],"mapped",[7829]],[[7829,7833],"valid"],[[7834,7834],"mapped",[97,702]],[[7835,7835],"mapped",[7777]],[[7836,7837],"valid"],[[7838,7838],"mapped",[115,115]],[[7839,7839],"valid"],[[7840,7840],"mapped",[7841]],[[7841,7841],"valid"],[[7842,7842],"mapped",[7843]],[[7843,7843],"valid"],[[7844,7844],"mapped",[7845]],[[7845,7845],"valid"],[[7846,7846],"mapped",[7847]],[[7847,7847],"valid"],[[7848,7848],"mapped",[7849]],[[7849,7849],"valid"],[[7850,7850],"mapped",[7851]],[[7851,7851],"valid"],[[7852,7852],"mapped",[7853]],[[7853,7853],"valid"],[[7854,7854],"mapped",[7855]],[[7855,7855],"valid"],[[7856,7856],"mapped",[7857]],[[7857,7857],"valid"],[[7858,7858],"mapped",[7859]],[[7859,7859],"valid"],[[7860,7860],"mapped",[7861]],[[7861,7861],"valid"],[[7862,7862],"mapped",[7863]],[[7863,7863],"valid"],[[7864,7864],"mapped",[7865]],[[7865,7865],"valid"],[[7866,7866],"mapped",[7867]],[[7867,7867],"valid"],[[7868,7868],"mapped",[7869]],[[7869,7869],"valid"],[[7870,7870],"mapped",[7871]],[[7871,7871],"valid"],[[7872,7872],"mapped",[7873]],[[7873,7873],"valid"],[[7874,7874],"mapped",[7875]],[[7875,7875],"valid"],[[7876,7876],"mapped",[7877]],[[7877,7877],"valid"],[[7878,7878],"mapped",[7879]],[[7879,7879],"valid"],[[7880,7880],"mapped",[7881]],[[7881,7881],"valid"],[[7882,7882],"mapped",[7883]],[[7883,7883],"valid"],[[7884,7884],"mapped",[7885]],[[7885,7885],"valid"],[[7886,7886],"mapped",[7887]],[[7887,7887],"valid"],[[7888,7888],"mapped",[7889]],[[7889,7889],"valid"],[[7890,7890],"mapped",[7891]],[[7891,7891],"valid"],[[7892,7892],"mapped",[7893]],[[7893,7893],"valid"],[[7894,7894],"mapped",[7895]],[[7895,7895],"valid"],[[7896,7896],"mapped",[7897]],[[7897,7897],"valid"],[[7898,7898],"mapped",[7899]],[[7899,7899],"valid"],[[7900,7900],"mapped",[7901]],[[7901,7901],"valid"],[[7902,7902],"mapped",[7903]],[[7903,7903],"valid"],[[7904,7904],"mapped",[7905]],[[7905,7905],"valid"],[[7906,7906],"mapped",[7907]],[[7907,7907],"valid"],[[7908,7908],"mapped",[7909]],[[7909,7909],"valid"],[[7910,7910],"mapped",[7911]],[[7911,7911],"valid"],[[7912,7912],"mapped",[7913]],[[7913,7913],"valid"],[[7914,7914],"mapped",[7915]],[[7915,7915],"valid"],[[7916,7916],"mapped",[7917]],[[7917,7917],"valid"],[[7918,7918],"mapped",[7919]],[[7919,7919],"valid"],[[7920,7920],"mapped",[7921]],[[7921,7921],"valid"],[[7922,7922],"mapped",[7923]],[[7923,7923],"valid"],[[7924,7924],"mapped",[7925]],[[7925,7925],"valid"],[[7926,7926],"mapped",[7927]],[[7927,7927],"valid"],[[7928,7928],"mapped",[7929]],[[7929,7929],"valid"],[[7930,7930],"mapped",[7931]],[[7931,7931],"valid"],[[7932,7932],"mapped",[7933]],[[7933,7933],"valid"],[[7934,7934],"mapped",[7935]],[[7935,7935],"valid"],[[7936,7943],"valid"],[[7944,7944],"mapped",[7936]],[[7945,7945],"mapped",[7937]],[[7946,7946],"mapped",[7938]],[[7947,7947],"mapped",[7939]],[[7948,7948],"mapped",[7940]],[[7949,7949],"mapped",[7941]],[[7950,7950],"mapped",[7942]],[[7951,7951],"mapped",[7943]],[[7952,7957],"valid"],[[7958,7959],"disallowed"],[[7960,7960],"mapped",[7952]],[[7961,7961],"mapped",[7953]],[[7962,7962],"mapped",[7954]],[[7963,7963],"mapped",[7955]],[[7964,7964],"mapped",[7956]],[[7965,7965],"mapped",[7957]],[[7966,7967],"disallowed"],[[7968,7975],"valid"],[[7976,7976],"mapped",[7968]],[[7977,7977],"mapped",[7969]],[[7978,7978],"mapped",[7970]],[[7979,7979],"mapped",[7971]],[[7980,7980],"mapped",[7972]],[[7981,7981],"mapped",[7973]],[[7982,7982],"mapped",[7974]],[[7983,7983],"mapped",[7975]],[[7984,7991],"valid"],[[7992,7992],"mapped",[7984]],[[7993,7993],"mapped",[7985]],[[7994,7994],"mapped",[7986]],[[7995,7995],"mapped",[7987]],[[7996,7996],"mapped",[7988]],[[7997,7997],"mapped",[7989]],[[7998,7998],"mapped",[7990]],[[7999,7999],"mapped",[7991]],[[8e3,8005],"valid"],[[8006,8007],"disallowed"],[[8008,8008],"mapped",[8e3]],[[8009,8009],"mapped",[8001]],[[8010,8010],"mapped",[8002]],[[8011,8011],"mapped",[8003]],[[8012,8012],"mapped",[8004]],[[8013,8013],"mapped",[8005]],[[8014,8015],"disallowed"],[[8016,8023],"valid"],[[8024,8024],"disallowed"],[[8025,8025],"mapped",[8017]],[[8026,8026],"disallowed"],[[8027,8027],"mapped",[8019]],[[8028,8028],"disallowed"],[[8029,8029],"mapped",[8021]],[[8030,8030],"disallowed"],[[8031,8031],"mapped",[8023]],[[8032,8039],"valid"],[[8040,8040],"mapped",[8032]],[[8041,8041],"mapped",[8033]],[[8042,8042],"mapped",[8034]],[[8043,8043],"mapped",[8035]],[[8044,8044],"mapped",[8036]],[[8045,8045],"mapped",[8037]],[[8046,8046],"mapped",[8038]],[[8047,8047],"mapped",[8039]],[[8048,8048],"valid"],[[8049,8049],"mapped",[940]],[[8050,8050],"valid"],[[8051,8051],"mapped",[941]],[[8052,8052],"valid"],[[8053,8053],"mapped",[942]],[[8054,8054],"valid"],[[8055,8055],"mapped",[943]],[[8056,8056],"valid"],[[8057,8057],"mapped",[972]],[[8058,8058],"valid"],[[8059,8059],"mapped",[973]],[[8060,8060],"valid"],[[8061,8061],"mapped",[974]],[[8062,8063],"disallowed"],[[8064,8064],"mapped",[7936,953]],[[8065,8065],"mapped",[7937,953]],[[8066,8066],"mapped",[7938,953]],[[8067,8067],"mapped",[7939,953]],[[8068,8068],"mapped",[7940,953]],[[8069,8069],"mapped",[7941,953]],[[8070,8070],"mapped",[7942,953]],[[8071,8071],"mapped",[7943,953]],[[8072,8072],"mapped",[7936,953]],[[8073,8073],"mapped",[7937,953]],[[8074,8074],"mapped",[7938,953]],[[8075,8075],"mapped",[7939,953]],[[8076,8076],"mapped",[7940,953]],[[8077,8077],"mapped",[7941,953]],[[8078,8078],"mapped",[7942,953]],[[8079,8079],"mapped",[7943,953]],[[8080,8080],"mapped",[7968,953]],[[8081,8081],"mapped",[7969,953]],[[8082,8082],"mapped",[7970,953]],[[8083,8083],"mapped",[7971,953]],[[8084,8084],"mapped",[7972,953]],[[8085,8085],"mapped",[7973,953]],[[8086,8086],"mapped",[7974,953]],[[8087,8087],"mapped",[7975,953]],[[8088,8088],"mapped",[7968,953]],[[8089,8089],"mapped",[7969,953]],[[8090,8090],"mapped",[7970,953]],[[8091,8091],"mapped",[7971,953]],[[8092,8092],"mapped",[7972,953]],[[8093,8093],"mapped",[7973,953]],[[8094,8094],"mapped",[7974,953]],[[8095,8095],"mapped",[7975,953]],[[8096,8096],"mapped",[8032,953]],[[8097,8097],"mapped",[8033,953]],[[8098,8098],"mapped",[8034,953]],[[8099,8099],"mapped",[8035,953]],[[8100,8100],"mapped",[8036,953]],[[8101,8101],"mapped",[8037,953]],[[8102,8102],"mapped",[8038,953]],[[8103,8103],"mapped",[8039,953]],[[8104,8104],"mapped",[8032,953]],[[8105,8105],"mapped",[8033,953]],[[8106,8106],"mapped",[8034,953]],[[8107,8107],"mapped",[8035,953]],[[8108,8108],"mapped",[8036,953]],[[8109,8109],"mapped",[8037,953]],[[8110,8110],"mapped",[8038,953]],[[8111,8111],"mapped",[8039,953]],[[8112,8113],"valid"],[[8114,8114],"mapped",[8048,953]],[[8115,8115],"mapped",[945,953]],[[8116,8116],"mapped",[940,953]],[[8117,8117],"disallowed"],[[8118,8118],"valid"],[[8119,8119],"mapped",[8118,953]],[[8120,8120],"mapped",[8112]],[[8121,8121],"mapped",[8113]],[[8122,8122],"mapped",[8048]],[[8123,8123],"mapped",[940]],[[8124,8124],"mapped",[945,953]],[[8125,8125],"disallowed_STD3_mapped",[32,787]],[[8126,8126],"mapped",[953]],[[8127,8127],"disallowed_STD3_mapped",[32,787]],[[8128,8128],"disallowed_STD3_mapped",[32,834]],[[8129,8129],"disallowed_STD3_mapped",[32,776,834]],[[8130,8130],"mapped",[8052,953]],[[8131,8131],"mapped",[951,953]],[[8132,8132],"mapped",[942,953]],[[8133,8133],"disallowed"],[[8134,8134],"valid"],[[8135,8135],"mapped",[8134,953]],[[8136,8136],"mapped",[8050]],[[8137,8137],"mapped",[941]],[[8138,8138],"mapped",[8052]],[[8139,8139],"mapped",[942]],[[8140,8140],"mapped",[951,953]],[[8141,8141],"disallowed_STD3_mapped",[32,787,768]],[[8142,8142],"disallowed_STD3_mapped",[32,787,769]],[[8143,8143],"disallowed_STD3_mapped",[32,787,834]],[[8144,8146],"valid"],[[8147,8147],"mapped",[912]],[[8148,8149],"disallowed"],[[8150,8151],"valid"],[[8152,8152],"mapped",[8144]],[[8153,8153],"mapped",[8145]],[[8154,8154],"mapped",[8054]],[[8155,8155],"mapped",[943]],[[8156,8156],"disallowed"],[[8157,8157],"disallowed_STD3_mapped",[32,788,768]],[[8158,8158],"disallowed_STD3_mapped",[32,788,769]],[[8159,8159],"disallowed_STD3_mapped",[32,788,834]],[[8160,8162],"valid"],[[8163,8163],"mapped",[944]],[[8164,8167],"valid"],[[8168,8168],"mapped",[8160]],[[8169,8169],"mapped",[8161]],[[8170,8170],"mapped",[8058]],[[8171,8171],"mapped",[973]],[[8172,8172],"mapped",[8165]],[[8173,8173],"disallowed_STD3_mapped",[32,776,768]],[[8174,8174],"disallowed_STD3_mapped",[32,776,769]],[[8175,8175],"disallowed_STD3_mapped",[96]],[[8176,8177],"disallowed"],[[8178,8178],"mapped",[8060,953]],[[8179,8179],"mapped",[969,953]],[[8180,8180],"mapped",[974,953]],[[8181,8181],"disallowed"],[[8182,8182],"valid"],[[8183,8183],"mapped",[8182,953]],[[8184,8184],"mapped",[8056]],[[8185,8185],"mapped",[972]],[[8186,8186],"mapped",[8060]],[[8187,8187],"mapped",[974]],[[8188,8188],"mapped",[969,953]],[[8189,8189],"disallowed_STD3_mapped",[32,769]],[[8190,8190],"disallowed_STD3_mapped",[32,788]],[[8191,8191],"disallowed"],[[8192,8202],"disallowed_STD3_mapped",[32]],[[8203,8203],"ignored"],[[8204,8205],"deviation",[]],[[8206,8207],"disallowed"],[[8208,8208],"valid",[],"NV8"],[[8209,8209],"mapped",[8208]],[[8210,8214],"valid",[],"NV8"],[[8215,8215],"disallowed_STD3_mapped",[32,819]],[[8216,8227],"valid",[],"NV8"],[[8228,8230],"disallowed"],[[8231,8231],"valid",[],"NV8"],[[8232,8238],"disallowed"],[[8239,8239],"disallowed_STD3_mapped",[32]],[[8240,8242],"valid",[],"NV8"],[[8243,8243],"mapped",[8242,8242]],[[8244,8244],"mapped",[8242,8242,8242]],[[8245,8245],"valid",[],"NV8"],[[8246,8246],"mapped",[8245,8245]],[[8247,8247],"mapped",[8245,8245,8245]],[[8248,8251],"valid",[],"NV8"],[[8252,8252],"disallowed_STD3_mapped",[33,33]],[[8253,8253],"valid",[],"NV8"],[[8254,8254],"disallowed_STD3_mapped",[32,773]],[[8255,8262],"valid",[],"NV8"],[[8263,8263],"disallowed_STD3_mapped",[63,63]],[[8264,8264],"disallowed_STD3_mapped",[63,33]],[[8265,8265],"disallowed_STD3_mapped",[33,63]],[[8266,8269],"valid",[],"NV8"],[[8270,8274],"valid",[],"NV8"],[[8275,8276],"valid",[],"NV8"],[[8277,8278],"valid",[],"NV8"],[[8279,8279],"mapped",[8242,8242,8242,8242]],[[8280,8286],"valid",[],"NV8"],[[8287,8287],"disallowed_STD3_mapped",[32]],[[8288,8288],"ignored"],[[8289,8291],"disallowed"],[[8292,8292],"ignored"],[[8293,8293],"disallowed"],[[8294,8297],"disallowed"],[[8298,8303],"disallowed"],[[8304,8304],"mapped",[48]],[[8305,8305],"mapped",[105]],[[8306,8307],"disallowed"],[[8308,8308],"mapped",[52]],[[8309,8309],"mapped",[53]],[[8310,8310],"mapped",[54]],[[8311,8311],"mapped",[55]],[[8312,8312],"mapped",[56]],[[8313,8313],"mapped",[57]],[[8314,8314],"disallowed_STD3_mapped",[43]],[[8315,8315],"mapped",[8722]],[[8316,8316],"disallowed_STD3_mapped",[61]],[[8317,8317],"disallowed_STD3_mapped",[40]],[[8318,8318],"disallowed_STD3_mapped",[41]],[[8319,8319],"mapped",[110]],[[8320,8320],"mapped",[48]],[[8321,8321],"mapped",[49]],[[8322,8322],"mapped",[50]],[[8323,8323],"mapped",[51]],[[8324,8324],"mapped",[52]],[[8325,8325],"mapped",[53]],[[8326,8326],"mapped",[54]],[[8327,8327],"mapped",[55]],[[8328,8328],"mapped",[56]],[[8329,8329],"mapped",[57]],[[8330,8330],"disallowed_STD3_mapped",[43]],[[8331,8331],"mapped",[8722]],[[8332,8332],"disallowed_STD3_mapped",[61]],[[8333,8333],"disallowed_STD3_mapped",[40]],[[8334,8334],"disallowed_STD3_mapped",[41]],[[8335,8335],"disallowed"],[[8336,8336],"mapped",[97]],[[8337,8337],"mapped",[101]],[[8338,8338],"mapped",[111]],[[8339,8339],"mapped",[120]],[[8340,8340],"mapped",[601]],[[8341,8341],"mapped",[104]],[[8342,8342],"mapped",[107]],[[8343,8343],"mapped",[108]],[[8344,8344],"mapped",[109]],[[8345,8345],"mapped",[110]],[[8346,8346],"mapped",[112]],[[8347,8347],"mapped",[115]],[[8348,8348],"mapped",[116]],[[8349,8351],"disallowed"],[[8352,8359],"valid",[],"NV8"],[[8360,8360],"mapped",[114,115]],[[8361,8362],"valid",[],"NV8"],[[8363,8363],"valid",[],"NV8"],[[8364,8364],"valid",[],"NV8"],[[8365,8367],"valid",[],"NV8"],[[8368,8369],"valid",[],"NV8"],[[8370,8373],"valid",[],"NV8"],[[8374,8376],"valid",[],"NV8"],[[8377,8377],"valid",[],"NV8"],[[8378,8378],"valid",[],"NV8"],[[8379,8381],"valid",[],"NV8"],[[8382,8382],"valid",[],"NV8"],[[8383,8399],"disallowed"],[[8400,8417],"valid",[],"NV8"],[[8418,8419],"valid",[],"NV8"],[[8420,8426],"valid",[],"NV8"],[[8427,8427],"valid",[],"NV8"],[[8428,8431],"valid",[],"NV8"],[[8432,8432],"valid",[],"NV8"],[[8433,8447],"disallowed"],[[8448,8448],"disallowed_STD3_mapped",[97,47,99]],[[8449,8449],"disallowed_STD3_mapped",[97,47,115]],[[8450,8450],"mapped",[99]],[[8451,8451],"mapped",[176,99]],[[8452,8452],"valid",[],"NV8"],[[8453,8453],"disallowed_STD3_mapped",[99,47,111]],[[8454,8454],"disallowed_STD3_mapped",[99,47,117]],[[8455,8455],"mapped",[603]],[[8456,8456],"valid",[],"NV8"],[[8457,8457],"mapped",[176,102]],[[8458,8458],"mapped",[103]],[[8459,8462],"mapped",[104]],[[8463,8463],"mapped",[295]],[[8464,8465],"mapped",[105]],[[8466,8467],"mapped",[108]],[[8468,8468],"valid",[],"NV8"],[[8469,8469],"mapped",[110]],[[8470,8470],"mapped",[110,111]],[[8471,8472],"valid",[],"NV8"],[[8473,8473],"mapped",[112]],[[8474,8474],"mapped",[113]],[[8475,8477],"mapped",[114]],[[8478,8479],"valid",[],"NV8"],[[8480,8480],"mapped",[115,109]],[[8481,8481],"mapped",[116,101,108]],[[8482,8482],"mapped",[116,109]],[[8483,8483],"valid",[],"NV8"],[[8484,8484],"mapped",[122]],[[8485,8485],"valid",[],"NV8"],[[8486,8486],"mapped",[969]],[[8487,8487],"valid",[],"NV8"],[[8488,8488],"mapped",[122]],[[8489,8489],"valid",[],"NV8"],[[8490,8490],"mapped",[107]],[[8491,8491],"mapped",[229]],[[8492,8492],"mapped",[98]],[[8493,8493],"mapped",[99]],[[8494,8494],"valid",[],"NV8"],[[8495,8496],"mapped",[101]],[[8497,8497],"mapped",[102]],[[8498,8498],"disallowed"],[[8499,8499],"mapped",[109]],[[8500,8500],"mapped",[111]],[[8501,8501],"mapped",[1488]],[[8502,8502],"mapped",[1489]],[[8503,8503],"mapped",[1490]],[[8504,8504],"mapped",[1491]],[[8505,8505],"mapped",[105]],[[8506,8506],"valid",[],"NV8"],[[8507,8507],"mapped",[102,97,120]],[[8508,8508],"mapped",[960]],[[8509,8510],"mapped",[947]],[[8511,8511],"mapped",[960]],[[8512,8512],"mapped",[8721]],[[8513,8516],"valid",[],"NV8"],[[8517,8518],"mapped",[100]],[[8519,8519],"mapped",[101]],[[8520,8520],"mapped",[105]],[[8521,8521],"mapped",[106]],[[8522,8523],"valid",[],"NV8"],[[8524,8524],"valid",[],"NV8"],[[8525,8525],"valid",[],"NV8"],[[8526,8526],"valid"],[[8527,8527],"valid",[],"NV8"],[[8528,8528],"mapped",[49,8260,55]],[[8529,8529],"mapped",[49,8260,57]],[[8530,8530],"mapped",[49,8260,49,48]],[[8531,8531],"mapped",[49,8260,51]],[[8532,8532],"mapped",[50,8260,51]],[[8533,8533],"mapped",[49,8260,53]],[[8534,8534],"mapped",[50,8260,53]],[[8535,8535],"mapped",[51,8260,53]],[[8536,8536],"mapped",[52,8260,53]],[[8537,8537],"mapped",[49,8260,54]],[[8538,8538],"mapped",[53,8260,54]],[[8539,8539],"mapped",[49,8260,56]],[[8540,8540],"mapped",[51,8260,56]],[[8541,8541],"mapped",[53,8260,56]],[[8542,8542],"mapped",[55,8260,56]],[[8543,8543],"mapped",[49,8260]],[[8544,8544],"mapped",[105]],[[8545,8545],"mapped",[105,105]],[[8546,8546],"mapped",[105,105,105]],[[8547,8547],"mapped",[105,118]],[[8548,8548],"mapped",[118]],[[8549,8549],"mapped",[118,105]],[[8550,8550],"mapped",[118,105,105]],[[8551,8551],"mapped",[118,105,105,105]],[[8552,8552],"mapped",[105,120]],[[8553,8553],"mapped",[120]],[[8554,8554],"mapped",[120,105]],[[8555,8555],"mapped",[120,105,105]],[[8556,8556],"mapped",[108]],[[8557,8557],"mapped",[99]],[[8558,8558],"mapped",[100]],[[8559,8559],"mapped",[109]],[[8560,8560],"mapped",[105]],[[8561,8561],"mapped",[105,105]],[[8562,8562],"mapped",[105,105,105]],[[8563,8563],"mapped",[105,118]],[[8564,8564],"mapped",[118]],[[8565,8565],"mapped",[118,105]],[[8566,8566],"mapped",[118,105,105]],[[8567,8567],"mapped",[118,105,105,105]],[[8568,8568],"mapped",[105,120]],[[8569,8569],"mapped",[120]],[[8570,8570],"mapped",[120,105]],[[8571,8571],"mapped",[120,105,105]],[[8572,8572],"mapped",[108]],[[8573,8573],"mapped",[99]],[[8574,8574],"mapped",[100]],[[8575,8575],"mapped",[109]],[[8576,8578],"valid",[],"NV8"],[[8579,8579],"disallowed"],[[8580,8580],"valid"],[[8581,8584],"valid",[],"NV8"],[[8585,8585],"mapped",[48,8260,51]],[[8586,8587],"valid",[],"NV8"],[[8588,8591],"disallowed"],[[8592,8682],"valid",[],"NV8"],[[8683,8691],"valid",[],"NV8"],[[8692,8703],"valid",[],"NV8"],[[8704,8747],"valid",[],"NV8"],[[8748,8748],"mapped",[8747,8747]],[[8749,8749],"mapped",[8747,8747,8747]],[[8750,8750],"valid",[],"NV8"],[[8751,8751],"mapped",[8750,8750]],[[8752,8752],"mapped",[8750,8750,8750]],[[8753,8799],"valid",[],"NV8"],[[8800,8800],"disallowed_STD3_valid"],[[8801,8813],"valid",[],"NV8"],[[8814,8815],"disallowed_STD3_valid"],[[8816,8945],"valid",[],"NV8"],[[8946,8959],"valid",[],"NV8"],[[8960,8960],"valid",[],"NV8"],[[8961,8961],"valid",[],"NV8"],[[8962,9e3],"valid",[],"NV8"],[[9001,9001],"mapped",[12296]],[[9002,9002],"mapped",[12297]],[[9003,9082],"valid",[],"NV8"],[[9083,9083],"valid",[],"NV8"],[[9084,9084],"valid",[],"NV8"],[[9085,9114],"valid",[],"NV8"],[[9115,9166],"valid",[],"NV8"],[[9167,9168],"valid",[],"NV8"],[[9169,9179],"valid",[],"NV8"],[[9180,9191],"valid",[],"NV8"],[[9192,9192],"valid",[],"NV8"],[[9193,9203],"valid",[],"NV8"],[[9204,9210],"valid",[],"NV8"],[[9211,9215],"disallowed"],[[9216,9252],"valid",[],"NV8"],[[9253,9254],"valid",[],"NV8"],[[9255,9279],"disallowed"],[[9280,9290],"valid",[],"NV8"],[[9291,9311],"disallowed"],[[9312,9312],"mapped",[49]],[[9313,9313],"mapped",[50]],[[9314,9314],"mapped",[51]],[[9315,9315],"mapped",[52]],[[9316,9316],"mapped",[53]],[[9317,9317],"mapped",[54]],[[9318,9318],"mapped",[55]],[[9319,9319],"mapped",[56]],[[9320,9320],"mapped",[57]],[[9321,9321],"mapped",[49,48]],[[9322,9322],"mapped",[49,49]],[[9323,9323],"mapped",[49,50]],[[9324,9324],"mapped",[49,51]],[[9325,9325],"mapped",[49,52]],[[9326,9326],"mapped",[49,53]],[[9327,9327],"mapped",[49,54]],[[9328,9328],"mapped",[49,55]],[[9329,9329],"mapped",[49,56]],[[9330,9330],"mapped",[49,57]],[[9331,9331],"mapped",[50,48]],[[9332,9332],"disallowed_STD3_mapped",[40,49,41]],[[9333,9333],"disallowed_STD3_mapped",[40,50,41]],[[9334,9334],"disallowed_STD3_mapped",[40,51,41]],[[9335,9335],"disallowed_STD3_mapped",[40,52,41]],[[9336,9336],"disallowed_STD3_mapped",[40,53,41]],[[9337,9337],"disallowed_STD3_mapped",[40,54,41]],[[9338,9338],"disallowed_STD3_mapped",[40,55,41]],[[9339,9339],"disallowed_STD3_mapped",[40,56,41]],[[9340,9340],"disallowed_STD3_mapped",[40,57,41]],[[9341,9341],"disallowed_STD3_mapped",[40,49,48,41]],[[9342,9342],"disallowed_STD3_mapped",[40,49,49,41]],[[9343,9343],"disallowed_STD3_mapped",[40,49,50,41]],[[9344,9344],"disallowed_STD3_mapped",[40,49,51,41]],[[9345,9345],"disallowed_STD3_mapped",[40,49,52,41]],[[9346,9346],"disallowed_STD3_mapped",[40,49,53,41]],[[9347,9347],"disallowed_STD3_mapped",[40,49,54,41]],[[9348,9348],"disallowed_STD3_mapped",[40,49,55,41]],[[9349,9349],"disallowed_STD3_mapped",[40,49,56,41]],[[9350,9350],"disallowed_STD3_mapped",[40,49,57,41]],[[9351,9351],"disallowed_STD3_mapped",[40,50,48,41]],[[9352,9371],"disallowed"],[[9372,9372],"disallowed_STD3_mapped",[40,97,41]],[[9373,9373],"disallowed_STD3_mapped",[40,98,41]],[[9374,9374],"disallowed_STD3_mapped",[40,99,41]],[[9375,9375],"disallowed_STD3_mapped",[40,100,41]],[[9376,9376],"disallowed_STD3_mapped",[40,101,41]],[[9377,9377],"disallowed_STD3_mapped",[40,102,41]],[[9378,9378],"disallowed_STD3_mapped",[40,103,41]],[[9379,9379],"disallowed_STD3_mapped",[40,104,41]],[[9380,9380],"disallowed_STD3_mapped",[40,105,41]],[[9381,9381],"disallowed_STD3_mapped",[40,106,41]],[[9382,9382],"disallowed_STD3_mapped",[40,107,41]],[[9383,9383],"disallowed_STD3_mapped",[40,108,41]],[[9384,9384],"disallowed_STD3_mapped",[40,109,41]],[[9385,9385],"disallowed_STD3_mapped",[40,110,41]],[[9386,9386],"disallowed_STD3_mapped",[40,111,41]],[[9387,9387],"disallowed_STD3_mapped",[40,112,41]],[[9388,9388],"disallowed_STD3_mapped",[40,113,41]],[[9389,9389],"disallowed_STD3_mapped",[40,114,41]],[[9390,9390],"disallowed_STD3_mapped",[40,115,41]],[[9391,9391],"disallowed_STD3_mapped",[40,116,41]],[[9392,9392],"disallowed_STD3_mapped",[40,117,41]],[[9393,9393],"disallowed_STD3_mapped",[40,118,41]],[[9394,9394],"disallowed_STD3_mapped",[40,119,41]],[[9395,9395],"disallowed_STD3_mapped",[40,120,41]],[[9396,9396],"disallowed_STD3_mapped",[40,121,41]],[[9397,9397],"disallowed_STD3_mapped",[40,122,41]],[[9398,9398],"mapped",[97]],[[9399,9399],"mapped",[98]],[[9400,9400],"mapped",[99]],[[9401,9401],"mapped",[100]],[[9402,9402],"mapped",[101]],[[9403,9403],"mapped",[102]],[[9404,9404],"mapped",[103]],[[9405,9405],"mapped",[104]],[[9406,9406],"mapped",[105]],[[9407,9407],"mapped",[106]],[[9408,9408],"mapped",[107]],[[9409,9409],"mapped",[108]],[[9410,9410],"mapped",[109]],[[9411,9411],"mapped",[110]],[[9412,9412],"mapped",[111]],[[9413,9413],"mapped",[112]],[[9414,9414],"mapped",[113]],[[9415,9415],"mapped",[114]],[[9416,9416],"mapped",[115]],[[9417,9417],"mapped",[116]],[[9418,9418],"mapped",[117]],[[9419,9419],"mapped",[118]],[[9420,9420],"mapped",[119]],[[9421,9421],"mapped",[120]],[[9422,9422],"mapped",[121]],[[9423,9423],"mapped",[122]],[[9424,9424],"mapped",[97]],[[9425,9425],"mapped",[98]],[[9426,9426],"mapped",[99]],[[9427,9427],"mapped",[100]],[[9428,9428],"mapped",[101]],[[9429,9429],"mapped",[102]],[[9430,9430],"mapped",[103]],[[9431,9431],"mapped",[104]],[[9432,9432],"mapped",[105]],[[9433,9433],"mapped",[106]],[[9434,9434],"mapped",[107]],[[9435,9435],"mapped",[108]],[[9436,9436],"mapped",[109]],[[9437,9437],"mapped",[110]],[[9438,9438],"mapped",[111]],[[9439,9439],"mapped",[112]],[[9440,9440],"mapped",[113]],[[9441,9441],"mapped",[114]],[[9442,9442],"mapped",[115]],[[9443,9443],"mapped",[116]],[[9444,9444],"mapped",[117]],[[9445,9445],"mapped",[118]],[[9446,9446],"mapped",[119]],[[9447,9447],"mapped",[120]],[[9448,9448],"mapped",[121]],[[9449,9449],"mapped",[122]],[[9450,9450],"mapped",[48]],[[9451,9470],"valid",[],"NV8"],[[9471,9471],"valid",[],"NV8"],[[9472,9621],"valid",[],"NV8"],[[9622,9631],"valid",[],"NV8"],[[9632,9711],"valid",[],"NV8"],[[9712,9719],"valid",[],"NV8"],[[9720,9727],"valid",[],"NV8"],[[9728,9747],"valid",[],"NV8"],[[9748,9749],"valid",[],"NV8"],[[9750,9751],"valid",[],"NV8"],[[9752,9752],"valid",[],"NV8"],[[9753,9753],"valid",[],"NV8"],[[9754,9839],"valid",[],"NV8"],[[9840,9841],"valid",[],"NV8"],[[9842,9853],"valid",[],"NV8"],[[9854,9855],"valid",[],"NV8"],[[9856,9865],"valid",[],"NV8"],[[9866,9873],"valid",[],"NV8"],[[9874,9884],"valid",[],"NV8"],[[9885,9885],"valid",[],"NV8"],[[9886,9887],"valid",[],"NV8"],[[9888,9889],"valid",[],"NV8"],[[9890,9905],"valid",[],"NV8"],[[9906,9906],"valid",[],"NV8"],[[9907,9916],"valid",[],"NV8"],[[9917,9919],"valid",[],"NV8"],[[9920,9923],"valid",[],"NV8"],[[9924,9933],"valid",[],"NV8"],[[9934,9934],"valid",[],"NV8"],[[9935,9953],"valid",[],"NV8"],[[9954,9954],"valid",[],"NV8"],[[9955,9955],"valid",[],"NV8"],[[9956,9959],"valid",[],"NV8"],[[9960,9983],"valid",[],"NV8"],[[9984,9984],"valid",[],"NV8"],[[9985,9988],"valid",[],"NV8"],[[9989,9989],"valid",[],"NV8"],[[9990,9993],"valid",[],"NV8"],[[9994,9995],"valid",[],"NV8"],[[9996,10023],"valid",[],"NV8"],[[10024,10024],"valid",[],"NV8"],[[10025,10059],"valid",[],"NV8"],[[10060,10060],"valid",[],"NV8"],[[10061,10061],"valid",[],"NV8"],[[10062,10062],"valid",[],"NV8"],[[10063,10066],"valid",[],"NV8"],[[10067,10069],"valid",[],"NV8"],[[10070,10070],"valid",[],"NV8"],[[10071,10071],"valid",[],"NV8"],[[10072,10078],"valid",[],"NV8"],[[10079,10080],"valid",[],"NV8"],[[10081,10087],"valid",[],"NV8"],[[10088,10101],"valid",[],"NV8"],[[10102,10132],"valid",[],"NV8"],[[10133,10135],"valid",[],"NV8"],[[10136,10159],"valid",[],"NV8"],[[10160,10160],"valid",[],"NV8"],[[10161,10174],"valid",[],"NV8"],[[10175,10175],"valid",[],"NV8"],[[10176,10182],"valid",[],"NV8"],[[10183,10186],"valid",[],"NV8"],[[10187,10187],"valid",[],"NV8"],[[10188,10188],"valid",[],"NV8"],[[10189,10189],"valid",[],"NV8"],[[10190,10191],"valid",[],"NV8"],[[10192,10219],"valid",[],"NV8"],[[10220,10223],"valid",[],"NV8"],[[10224,10239],"valid",[],"NV8"],[[10240,10495],"valid",[],"NV8"],[[10496,10763],"valid",[],"NV8"],[[10764,10764],"mapped",[8747,8747,8747,8747]],[[10765,10867],"valid",[],"NV8"],[[10868,10868],"disallowed_STD3_mapped",[58,58,61]],[[10869,10869],"disallowed_STD3_mapped",[61,61]],[[10870,10870],"disallowed_STD3_mapped",[61,61,61]],[[10871,10971],"valid",[],"NV8"],[[10972,10972],"mapped",[10973,824]],[[10973,11007],"valid",[],"NV8"],[[11008,11021],"valid",[],"NV8"],[[11022,11027],"valid",[],"NV8"],[[11028,11034],"valid",[],"NV8"],[[11035,11039],"valid",[],"NV8"],[[11040,11043],"valid",[],"NV8"],[[11044,11084],"valid",[],"NV8"],[[11085,11087],"valid",[],"NV8"],[[11088,11092],"valid",[],"NV8"],[[11093,11097],"valid",[],"NV8"],[[11098,11123],"valid",[],"NV8"],[[11124,11125],"disallowed"],[[11126,11157],"valid",[],"NV8"],[[11158,11159],"disallowed"],[[11160,11193],"valid",[],"NV8"],[[11194,11196],"disallowed"],[[11197,11208],"valid",[],"NV8"],[[11209,11209],"disallowed"],[[11210,11217],"valid",[],"NV8"],[[11218,11243],"disallowed"],[[11244,11247],"valid",[],"NV8"],[[11248,11263],"disallowed"],[[11264,11264],"mapped",[11312]],[[11265,11265],"mapped",[11313]],[[11266,11266],"mapped",[11314]],[[11267,11267],"mapped",[11315]],[[11268,11268],"mapped",[11316]],[[11269,11269],"mapped",[11317]],[[11270,11270],"mapped",[11318]],[[11271,11271],"mapped",[11319]],[[11272,11272],"mapped",[11320]],[[11273,11273],"mapped",[11321]],[[11274,11274],"mapped",[11322]],[[11275,11275],"mapped",[11323]],[[11276,11276],"mapped",[11324]],[[11277,11277],"mapped",[11325]],[[11278,11278],"mapped",[11326]],[[11279,11279],"mapped",[11327]],[[11280,11280],"mapped",[11328]],[[11281,11281],"mapped",[11329]],[[11282,11282],"mapped",[11330]],[[11283,11283],"mapped",[11331]],[[11284,11284],"mapped",[11332]],[[11285,11285],"mapped",[11333]],[[11286,11286],"mapped",[11334]],[[11287,11287],"mapped",[11335]],[[11288,11288],"mapped",[11336]],[[11289,11289],"mapped",[11337]],[[11290,11290],"mapped",[11338]],[[11291,11291],"mapped",[11339]],[[11292,11292],"mapped",[11340]],[[11293,11293],"mapped",[11341]],[[11294,11294],"mapped",[11342]],[[11295,11295],"mapped",[11343]],[[11296,11296],"mapped",[11344]],[[11297,11297],"mapped",[11345]],[[11298,11298],"mapped",[11346]],[[11299,11299],"mapped",[11347]],[[11300,11300],"mapped",[11348]],[[11301,11301],"mapped",[11349]],[[11302,11302],"mapped",[11350]],[[11303,11303],"mapped",[11351]],[[11304,11304],"mapped",[11352]],[[11305,11305],"mapped",[11353]],[[11306,11306],"mapped",[11354]],[[11307,11307],"mapped",[11355]],[[11308,11308],"mapped",[11356]],[[11309,11309],"mapped",[11357]],[[11310,11310],"mapped",[11358]],[[11311,11311],"disallowed"],[[11312,11358],"valid"],[[11359,11359],"disallowed"],[[11360,11360],"mapped",[11361]],[[11361,11361],"valid"],[[11362,11362],"mapped",[619]],[[11363,11363],"mapped",[7549]],[[11364,11364],"mapped",[637]],[[11365,11366],"valid"],[[11367,11367],"mapped",[11368]],[[11368,11368],"valid"],[[11369,11369],"mapped",[11370]],[[11370,11370],"valid"],[[11371,11371],"mapped",[11372]],[[11372,11372],"valid"],[[11373,11373],"mapped",[593]],[[11374,11374],"mapped",[625]],[[11375,11375],"mapped",[592]],[[11376,11376],"mapped",[594]],[[11377,11377],"valid"],[[11378,11378],"mapped",[11379]],[[11379,11379],"valid"],[[11380,11380],"valid"],[[11381,11381],"mapped",[11382]],[[11382,11383],"valid"],[[11384,11387],"valid"],[[11388,11388],"mapped",[106]],[[11389,11389],"mapped",[118]],[[11390,11390],"mapped",[575]],[[11391,11391],"mapped",[576]],[[11392,11392],"mapped",[11393]],[[11393,11393],"valid"],[[11394,11394],"mapped",[11395]],[[11395,11395],"valid"],[[11396,11396],"mapped",[11397]],[[11397,11397],"valid"],[[11398,11398],"mapped",[11399]],[[11399,11399],"valid"],[[11400,11400],"mapped",[11401]],[[11401,11401],"valid"],[[11402,11402],"mapped",[11403]],[[11403,11403],"valid"],[[11404,11404],"mapped",[11405]],[[11405,11405],"valid"],[[11406,11406],"mapped",[11407]],[[11407,11407],"valid"],[[11408,11408],"mapped",[11409]],[[11409,11409],"valid"],[[11410,11410],"mapped",[11411]],[[11411,11411],"valid"],[[11412,11412],"mapped",[11413]],[[11413,11413],"valid"],[[11414,11414],"mapped",[11415]],[[11415,11415],"valid"],[[11416,11416],"mapped",[11417]],[[11417,11417],"valid"],[[11418,11418],"mapped",[11419]],[[11419,11419],"valid"],[[11420,11420],"mapped",[11421]],[[11421,11421],"valid"],[[11422,11422],"mapped",[11423]],[[11423,11423],"valid"],[[11424,11424],"mapped",[11425]],[[11425,11425],"valid"],[[11426,11426],"mapped",[11427]],[[11427,11427],"valid"],[[11428,11428],"mapped",[11429]],[[11429,11429],"valid"],[[11430,11430],"mapped",[11431]],[[11431,11431],"valid"],[[11432,11432],"mapped",[11433]],[[11433,11433],"valid"],[[11434,11434],"mapped",[11435]],[[11435,11435],"valid"],[[11436,11436],"mapped",[11437]],[[11437,11437],"valid"],[[11438,11438],"mapped",[11439]],[[11439,11439],"valid"],[[11440,11440],"mapped",[11441]],[[11441,11441],"valid"],[[11442,11442],"mapped",[11443]],[[11443,11443],"valid"],[[11444,11444],"mapped",[11445]],[[11445,11445],"valid"],[[11446,11446],"mapped",[11447]],[[11447,11447],"valid"],[[11448,11448],"mapped",[11449]],[[11449,11449],"valid"],[[11450,11450],"mapped",[11451]],[[11451,11451],"valid"],[[11452,11452],"mapped",[11453]],[[11453,11453],"valid"],[[11454,11454],"mapped",[11455]],[[11455,11455],"valid"],[[11456,11456],"mapped",[11457]],[[11457,11457],"valid"],[[11458,11458],"mapped",[11459]],[[11459,11459],"valid"],[[11460,11460],"mapped",[11461]],[[11461,11461],"valid"],[[11462,11462],"mapped",[11463]],[[11463,11463],"valid"],[[11464,11464],"mapped",[11465]],[[11465,11465],"valid"],[[11466,11466],"mapped",[11467]],[[11467,11467],"valid"],[[11468,11468],"mapped",[11469]],[[11469,11469],"valid"],[[11470,11470],"mapped",[11471]],[[11471,11471],"valid"],[[11472,11472],"mapped",[11473]],[[11473,11473],"valid"],[[11474,11474],"mapped",[11475]],[[11475,11475],"valid"],[[11476,11476],"mapped",[11477]],[[11477,11477],"valid"],[[11478,11478],"mapped",[11479]],[[11479,11479],"valid"],[[11480,11480],"mapped",[11481]],[[11481,11481],"valid"],[[11482,11482],"mapped",[11483]],[[11483,11483],"valid"],[[11484,11484],"mapped",[11485]],[[11485,11485],"valid"],[[11486,11486],"mapped",[11487]],[[11487,11487],"valid"],[[11488,11488],"mapped",[11489]],[[11489,11489],"valid"],[[11490,11490],"mapped",[11491]],[[11491,11492],"valid"],[[11493,11498],"valid",[],"NV8"],[[11499,11499],"mapped",[11500]],[[11500,11500],"valid"],[[11501,11501],"mapped",[11502]],[[11502,11505],"valid"],[[11506,11506],"mapped",[11507]],[[11507,11507],"valid"],[[11508,11512],"disallowed"],[[11513,11519],"valid",[],"NV8"],[[11520,11557],"valid"],[[11558,11558],"disallowed"],[[11559,11559],"valid"],[[11560,11564],"disallowed"],[[11565,11565],"valid"],[[11566,11567],"disallowed"],[[11568,11621],"valid"],[[11622,11623],"valid"],[[11624,11630],"disallowed"],[[11631,11631],"mapped",[11617]],[[11632,11632],"valid",[],"NV8"],[[11633,11646],"disallowed"],[[11647,11647],"valid"],[[11648,11670],"valid"],[[11671,11679],"disallowed"],[[11680,11686],"valid"],[[11687,11687],"disallowed"],[[11688,11694],"valid"],[[11695,11695],"disallowed"],[[11696,11702],"valid"],[[11703,11703],"disallowed"],[[11704,11710],"valid"],[[11711,11711],"disallowed"],[[11712,11718],"valid"],[[11719,11719],"disallowed"],[[11720,11726],"valid"],[[11727,11727],"disallowed"],[[11728,11734],"valid"],[[11735,11735],"disallowed"],[[11736,11742],"valid"],[[11743,11743],"disallowed"],[[11744,11775],"valid"],[[11776,11799],"valid",[],"NV8"],[[11800,11803],"valid",[],"NV8"],[[11804,11805],"valid",[],"NV8"],[[11806,11822],"valid",[],"NV8"],[[11823,11823],"valid"],[[11824,11824],"valid",[],"NV8"],[[11825,11825],"valid",[],"NV8"],[[11826,11835],"valid",[],"NV8"],[[11836,11842],"valid",[],"NV8"],[[11843,11903],"disallowed"],[[11904,11929],"valid",[],"NV8"],[[11930,11930],"disallowed"],[[11931,11934],"valid",[],"NV8"],[[11935,11935],"mapped",[27597]],[[11936,12018],"valid",[],"NV8"],[[12019,12019],"mapped",[40863]],[[12020,12031],"disallowed"],[[12032,12032],"mapped",[19968]],[[12033,12033],"mapped",[20008]],[[12034,12034],"mapped",[20022]],[[12035,12035],"mapped",[20031]],[[12036,12036],"mapped",[20057]],[[12037,12037],"mapped",[20101]],[[12038,12038],"mapped",[20108]],[[12039,12039],"mapped",[20128]],[[12040,12040],"mapped",[20154]],[[12041,12041],"mapped",[20799]],[[12042,12042],"mapped",[20837]],[[12043,12043],"mapped",[20843]],[[12044,12044],"mapped",[20866]],[[12045,12045],"mapped",[20886]],[[12046,12046],"mapped",[20907]],[[12047,12047],"mapped",[20960]],[[12048,12048],"mapped",[20981]],[[12049,12049],"mapped",[20992]],[[12050,12050],"mapped",[21147]],[[12051,12051],"mapped",[21241]],[[12052,12052],"mapped",[21269]],[[12053,12053],"mapped",[21274]],[[12054,12054],"mapped",[21304]],[[12055,12055],"mapped",[21313]],[[12056,12056],"mapped",[21340]],[[12057,12057],"mapped",[21353]],[[12058,12058],"mapped",[21378]],[[12059,12059],"mapped",[21430]],[[12060,12060],"mapped",[21448]],[[12061,12061],"mapped",[21475]],[[12062,12062],"mapped",[22231]],[[12063,12063],"mapped",[22303]],[[12064,12064],"mapped",[22763]],[[12065,12065],"mapped",[22786]],[[12066,12066],"mapped",[22794]],[[12067,12067],"mapped",[22805]],[[12068,12068],"mapped",[22823]],[[12069,12069],"mapped",[22899]],[[12070,12070],"mapped",[23376]],[[12071,12071],"mapped",[23424]],[[12072,12072],"mapped",[23544]],[[12073,12073],"mapped",[23567]],[[12074,12074],"mapped",[23586]],[[12075,12075],"mapped",[23608]],[[12076,12076],"mapped",[23662]],[[12077,12077],"mapped",[23665]],[[12078,12078],"mapped",[24027]],[[12079,12079],"mapped",[24037]],[[12080,12080],"mapped",[24049]],[[12081,12081],"mapped",[24062]],[[12082,12082],"mapped",[24178]],[[12083,12083],"mapped",[24186]],[[12084,12084],"mapped",[24191]],[[12085,12085],"mapped",[24308]],[[12086,12086],"mapped",[24318]],[[12087,12087],"mapped",[24331]],[[12088,12088],"mapped",[24339]],[[12089,12089],"mapped",[24400]],[[12090,12090],"mapped",[24417]],[[12091,12091],"mapped",[24435]],[[12092,12092],"mapped",[24515]],[[12093,12093],"mapped",[25096]],[[12094,12094],"mapped",[25142]],[[12095,12095],"mapped",[25163]],[[12096,12096],"mapped",[25903]],[[12097,12097],"mapped",[25908]],[[12098,12098],"mapped",[25991]],[[12099,12099],"mapped",[26007]],[[12100,12100],"mapped",[26020]],[[12101,12101],"mapped",[26041]],[[12102,12102],"mapped",[26080]],[[12103,12103],"mapped",[26085]],[[12104,12104],"mapped",[26352]],[[12105,12105],"mapped",[26376]],[[12106,12106],"mapped",[26408]],[[12107,12107],"mapped",[27424]],[[12108,12108],"mapped",[27490]],[[12109,12109],"mapped",[27513]],[[12110,12110],"mapped",[27571]],[[12111,12111],"mapped",[27595]],[[12112,12112],"mapped",[27604]],[[12113,12113],"mapped",[27611]],[[12114,12114],"mapped",[27663]],[[12115,12115],"mapped",[27668]],[[12116,12116],"mapped",[27700]],[[12117,12117],"mapped",[28779]],[[12118,12118],"mapped",[29226]],[[12119,12119],"mapped",[29238]],[[12120,12120],"mapped",[29243]],[[12121,12121],"mapped",[29247]],[[12122,12122],"mapped",[29255]],[[12123,12123],"mapped",[29273]],[[12124,12124],"mapped",[29275]],[[12125,12125],"mapped",[29356]],[[12126,12126],"mapped",[29572]],[[12127,12127],"mapped",[29577]],[[12128,12128],"mapped",[29916]],[[12129,12129],"mapped",[29926]],[[12130,12130],"mapped",[29976]],[[12131,12131],"mapped",[29983]],[[12132,12132],"mapped",[29992]],[[12133,12133],"mapped",[3e4]],[[12134,12134],"mapped",[30091]],[[12135,12135],"mapped",[30098]],[[12136,12136],"mapped",[30326]],[[12137,12137],"mapped",[30333]],[[12138,12138],"mapped",[30382]],[[12139,12139],"mapped",[30399]],[[12140,12140],"mapped",[30446]],[[12141,12141],"mapped",[30683]],[[12142,12142],"mapped",[30690]],[[12143,12143],"mapped",[30707]],[[12144,12144],"mapped",[31034]],[[12145,12145],"mapped",[31160]],[[12146,12146],"mapped",[31166]],[[12147,12147],"mapped",[31348]],[[12148,12148],"mapped",[31435]],[[12149,12149],"mapped",[31481]],[[12150,12150],"mapped",[31859]],[[12151,12151],"mapped",[31992]],[[12152,12152],"mapped",[32566]],[[12153,12153],"mapped",[32593]],[[12154,12154],"mapped",[32650]],[[12155,12155],"mapped",[32701]],[[12156,12156],"mapped",[32769]],[[12157,12157],"mapped",[32780]],[[12158,12158],"mapped",[32786]],[[12159,12159],"mapped",[32819]],[[12160,12160],"mapped",[32895]],[[12161,12161],"mapped",[32905]],[[12162,12162],"mapped",[33251]],[[12163,12163],"mapped",[33258]],[[12164,12164],"mapped",[33267]],[[12165,12165],"mapped",[33276]],[[12166,12166],"mapped",[33292]],[[12167,12167],"mapped",[33307]],[[12168,12168],"mapped",[33311]],[[12169,12169],"mapped",[33390]],[[12170,12170],"mapped",[33394]],[[12171,12171],"mapped",[33400]],[[12172,12172],"mapped",[34381]],[[12173,12173],"mapped",[34411]],[[12174,12174],"mapped",[34880]],[[12175,12175],"mapped",[34892]],[[12176,12176],"mapped",[34915]],[[12177,12177],"mapped",[35198]],[[12178,12178],"mapped",[35211]],[[12179,12179],"mapped",[35282]],[[12180,12180],"mapped",[35328]],[[12181,12181],"mapped",[35895]],[[12182,12182],"mapped",[35910]],[[12183,12183],"mapped",[35925]],[[12184,12184],"mapped",[35960]],[[12185,12185],"mapped",[35997]],[[12186,12186],"mapped",[36196]],[[12187,12187],"mapped",[36208]],[[12188,12188],"mapped",[36275]],[[12189,12189],"mapped",[36523]],[[12190,12190],"mapped",[36554]],[[12191,12191],"mapped",[36763]],[[12192,12192],"mapped",[36784]],[[12193,12193],"mapped",[36789]],[[12194,12194],"mapped",[37009]],[[12195,12195],"mapped",[37193]],[[12196,12196],"mapped",[37318]],[[12197,12197],"mapped",[37324]],[[12198,12198],"mapped",[37329]],[[12199,12199],"mapped",[38263]],[[12200,12200],"mapped",[38272]],[[12201,12201],"mapped",[38428]],[[12202,12202],"mapped",[38582]],[[12203,12203],"mapped",[38585]],[[12204,12204],"mapped",[38632]],[[12205,12205],"mapped",[38737]],[[12206,12206],"mapped",[38750]],[[12207,12207],"mapped",[38754]],[[12208,12208],"mapped",[38761]],[[12209,12209],"mapped",[38859]],[[12210,12210],"mapped",[38893]],[[12211,12211],"mapped",[38899]],[[12212,12212],"mapped",[38913]],[[12213,12213],"mapped",[39080]],[[12214,12214],"mapped",[39131]],[[12215,12215],"mapped",[39135]],[[12216,12216],"mapped",[39318]],[[12217,12217],"mapped",[39321]],[[12218,12218],"mapped",[39340]],[[12219,12219],"mapped",[39592]],[[12220,12220],"mapped",[39640]],[[12221,12221],"mapped",[39647]],[[12222,12222],"mapped",[39717]],[[12223,12223],"mapped",[39727]],[[12224,12224],"mapped",[39730]],[[12225,12225],"mapped",[39740]],[[12226,12226],"mapped",[39770]],[[12227,12227],"mapped",[40165]],[[12228,12228],"mapped",[40565]],[[12229,12229],"mapped",[40575]],[[12230,12230],"mapped",[40613]],[[12231,12231],"mapped",[40635]],[[12232,12232],"mapped",[40643]],[[12233,12233],"mapped",[40653]],[[12234,12234],"mapped",[40657]],[[12235,12235],"mapped",[40697]],[[12236,12236],"mapped",[40701]],[[12237,12237],"mapped",[40718]],[[12238,12238],"mapped",[40723]],[[12239,12239],"mapped",[40736]],[[12240,12240],"mapped",[40763]],[[12241,12241],"mapped",[40778]],[[12242,12242],"mapped",[40786]],[[12243,12243],"mapped",[40845]],[[12244,12244],"mapped",[40860]],[[12245,12245],"mapped",[40864]],[[12246,12271],"disallowed"],[[12272,12283],"disallowed"],[[12284,12287],"disallowed"],[[12288,12288],"disallowed_STD3_mapped",[32]],[[12289,12289],"valid",[],"NV8"],[[12290,12290],"mapped",[46]],[[12291,12292],"valid",[],"NV8"],[[12293,12295],"valid"],[[12296,12329],"valid",[],"NV8"],[[12330,12333],"valid"],[[12334,12341],"valid",[],"NV8"],[[12342,12342],"mapped",[12306]],[[12343,12343],"valid",[],"NV8"],[[12344,12344],"mapped",[21313]],[[12345,12345],"mapped",[21316]],[[12346,12346],"mapped",[21317]],[[12347,12347],"valid",[],"NV8"],[[12348,12348],"valid"],[[12349,12349],"valid",[],"NV8"],[[12350,12350],"valid",[],"NV8"],[[12351,12351],"valid",[],"NV8"],[[12352,12352],"disallowed"],[[12353,12436],"valid"],[[12437,12438],"valid"],[[12439,12440],"disallowed"],[[12441,12442],"valid"],[[12443,12443],"disallowed_STD3_mapped",[32,12441]],[[12444,12444],"disallowed_STD3_mapped",[32,12442]],[[12445,12446],"valid"],[[12447,12447],"mapped",[12424,12426]],[[12448,12448],"valid",[],"NV8"],[[12449,12542],"valid"],[[12543,12543],"mapped",[12467,12488]],[[12544,12548],"disallowed"],[[12549,12588],"valid"],[[12589,12589],"valid"],[[12590,12592],"disallowed"],[[12593,12593],"mapped",[4352]],[[12594,12594],"mapped",[4353]],[[12595,12595],"mapped",[4522]],[[12596,12596],"mapped",[4354]],[[12597,12597],"mapped",[4524]],[[12598,12598],"mapped",[4525]],[[12599,12599],"mapped",[4355]],[[12600,12600],"mapped",[4356]],[[12601,12601],"mapped",[4357]],[[12602,12602],"mapped",[4528]],[[12603,12603],"mapped",[4529]],[[12604,12604],"mapped",[4530]],[[12605,12605],"mapped",[4531]],[[12606,12606],"mapped",[4532]],[[12607,12607],"mapped",[4533]],[[12608,12608],"mapped",[4378]],[[12609,12609],"mapped",[4358]],[[12610,12610],"mapped",[4359]],[[12611,12611],"mapped",[4360]],[[12612,12612],"mapped",[4385]],[[12613,12613],"mapped",[4361]],[[12614,12614],"mapped",[4362]],[[12615,12615],"mapped",[4363]],[[12616,12616],"mapped",[4364]],[[12617,12617],"mapped",[4365]],[[12618,12618],"mapped",[4366]],[[12619,12619],"mapped",[4367]],[[12620,12620],"mapped",[4368]],[[12621,12621],"mapped",[4369]],[[12622,12622],"mapped",[4370]],[[12623,12623],"mapped",[4449]],[[12624,12624],"mapped",[4450]],[[12625,12625],"mapped",[4451]],[[12626,12626],"mapped",[4452]],[[12627,12627],"mapped",[4453]],[[12628,12628],"mapped",[4454]],[[12629,12629],"mapped",[4455]],[[12630,12630],"mapped",[4456]],[[12631,12631],"mapped",[4457]],[[12632,12632],"mapped",[4458]],[[12633,12633],"mapped",[4459]],[[12634,12634],"mapped",[4460]],[[12635,12635],"mapped",[4461]],[[12636,12636],"mapped",[4462]],[[12637,12637],"mapped",[4463]],[[12638,12638],"mapped",[4464]],[[12639,12639],"mapped",[4465]],[[12640,12640],"mapped",[4466]],[[12641,12641],"mapped",[4467]],[[12642,12642],"mapped",[4468]],[[12643,12643],"mapped",[4469]],[[12644,12644],"disallowed"],[[12645,12645],"mapped",[4372]],[[12646,12646],"mapped",[4373]],[[12647,12647],"mapped",[4551]],[[12648,12648],"mapped",[4552]],[[12649,12649],"mapped",[4556]],[[12650,12650],"mapped",[4558]],[[12651,12651],"mapped",[4563]],[[12652,12652],"mapped",[4567]],[[12653,12653],"mapped",[4569]],[[12654,12654],"mapped",[4380]],[[12655,12655],"mapped",[4573]],[[12656,12656],"mapped",[4575]],[[12657,12657],"mapped",[4381]],[[12658,12658],"mapped",[4382]],[[12659,12659],"mapped",[4384]],[[12660,12660],"mapped",[4386]],[[12661,12661],"mapped",[4387]],[[12662,12662],"mapped",[4391]],[[12663,12663],"mapped",[4393]],[[12664,12664],"mapped",[4395]],[[12665,12665],"mapped",[4396]],[[12666,12666],"mapped",[4397]],[[12667,12667],"mapped",[4398]],[[12668,12668],"mapped",[4399]],[[12669,12669],"mapped",[4402]],[[12670,12670],"mapped",[4406]],[[12671,12671],"mapped",[4416]],[[12672,12672],"mapped",[4423]],[[12673,12673],"mapped",[4428]],[[12674,12674],"mapped",[4593]],[[12675,12675],"mapped",[4594]],[[12676,12676],"mapped",[4439]],[[12677,12677],"mapped",[4440]],[[12678,12678],"mapped",[4441]],[[12679,12679],"mapped",[4484]],[[12680,12680],"mapped",[4485]],[[12681,12681],"mapped",[4488]],[[12682,12682],"mapped",[4497]],[[12683,12683],"mapped",[4498]],[[12684,12684],"mapped",[4500]],[[12685,12685],"mapped",[4510]],[[12686,12686],"mapped",[4513]],[[12687,12687],"disallowed"],[[12688,12689],"valid",[],"NV8"],[[12690,12690],"mapped",[19968]],[[12691,12691],"mapped",[20108]],[[12692,12692],"mapped",[19977]],[[12693,12693],"mapped",[22235]],[[12694,12694],"mapped",[19978]],[[12695,12695],"mapped",[20013]],[[12696,12696],"mapped",[19979]],[[12697,12697],"mapped",[30002]],[[12698,12698],"mapped",[20057]],[[12699,12699],"mapped",[19993]],[[12700,12700],"mapped",[19969]],[[12701,12701],"mapped",[22825]],[[12702,12702],"mapped",[22320]],[[12703,12703],"mapped",[20154]],[[12704,12727],"valid"],[[12728,12730],"valid"],[[12731,12735],"disallowed"],[[12736,12751],"valid",[],"NV8"],[[12752,12771],"valid",[],"NV8"],[[12772,12783],"disallowed"],[[12784,12799],"valid"],[[12800,12800],"disallowed_STD3_mapped",[40,4352,41]],[[12801,12801],"disallowed_STD3_mapped",[40,4354,41]],[[12802,12802],"disallowed_STD3_mapped",[40,4355,41]],[[12803,12803],"disallowed_STD3_mapped",[40,4357,41]],[[12804,12804],"disallowed_STD3_mapped",[40,4358,41]],[[12805,12805],"disallowed_STD3_mapped",[40,4359,41]],[[12806,12806],"disallowed_STD3_mapped",[40,4361,41]],[[12807,12807],"disallowed_STD3_mapped",[40,4363,41]],[[12808,12808],"disallowed_STD3_mapped",[40,4364,41]],[[12809,12809],"disallowed_STD3_mapped",[40,4366,41]],[[12810,12810],"disallowed_STD3_mapped",[40,4367,41]],[[12811,12811],"disallowed_STD3_mapped",[40,4368,41]],[[12812,12812],"disallowed_STD3_mapped",[40,4369,41]],[[12813,12813],"disallowed_STD3_mapped",[40,4370,41]],[[12814,12814],"disallowed_STD3_mapped",[40,44032,41]],[[12815,12815],"disallowed_STD3_mapped",[40,45208,41]],[[12816,12816],"disallowed_STD3_mapped",[40,45796,41]],[[12817,12817],"disallowed_STD3_mapped",[40,46972,41]],[[12818,12818],"disallowed_STD3_mapped",[40,47560,41]],[[12819,12819],"disallowed_STD3_mapped",[40,48148,41]],[[12820,12820],"disallowed_STD3_mapped",[40,49324,41]],[[12821,12821],"disallowed_STD3_mapped",[40,50500,41]],[[12822,12822],"disallowed_STD3_mapped",[40,51088,41]],[[12823,12823],"disallowed_STD3_mapped",[40,52264,41]],[[12824,12824],"disallowed_STD3_mapped",[40,52852,41]],[[12825,12825],"disallowed_STD3_mapped",[40,53440,41]],[[12826,12826],"disallowed_STD3_mapped",[40,54028,41]],[[12827,12827],"disallowed_STD3_mapped",[40,54616,41]],[[12828,12828],"disallowed_STD3_mapped",[40,51452,41]],[[12829,12829],"disallowed_STD3_mapped",[40,50724,51204,41]],[[12830,12830],"disallowed_STD3_mapped",[40,50724,54980,41]],[[12831,12831],"disallowed"],[[12832,12832],"disallowed_STD3_mapped",[40,19968,41]],[[12833,12833],"disallowed_STD3_mapped",[40,20108,41]],[[12834,12834],"disallowed_STD3_mapped",[40,19977,41]],[[12835,12835],"disallowed_STD3_mapped",[40,22235,41]],[[12836,12836],"disallowed_STD3_mapped",[40,20116,41]],[[12837,12837],"disallowed_STD3_mapped",[40,20845,41]],[[12838,12838],"disallowed_STD3_mapped",[40,19971,41]],[[12839,12839],"disallowed_STD3_mapped",[40,20843,41]],[[12840,12840],"disallowed_STD3_mapped",[40,20061,41]],[[12841,12841],"disallowed_STD3_mapped",[40,21313,41]],[[12842,12842],"disallowed_STD3_mapped",[40,26376,41]],[[12843,12843],"disallowed_STD3_mapped",[40,28779,41]],[[12844,12844],"disallowed_STD3_mapped",[40,27700,41]],[[12845,12845],"disallowed_STD3_mapped",[40,26408,41]],[[12846,12846],"disallowed_STD3_mapped",[40,37329,41]],[[12847,12847],"disallowed_STD3_mapped",[40,22303,41]],[[12848,12848],"disallowed_STD3_mapped",[40,26085,41]],[[12849,12849],"disallowed_STD3_mapped",[40,26666,41]],[[12850,12850],"disallowed_STD3_mapped",[40,26377,41]],[[12851,12851],"disallowed_STD3_mapped",[40,31038,41]],[[12852,12852],"disallowed_STD3_mapped",[40,21517,41]],[[12853,12853],"disallowed_STD3_mapped",[40,29305,41]],[[12854,12854],"disallowed_STD3_mapped",[40,36001,41]],[[12855,12855],"disallowed_STD3_mapped",[40,31069,41]],[[12856,12856],"disallowed_STD3_mapped",[40,21172,41]],[[12857,12857],"disallowed_STD3_mapped",[40,20195,41]],[[12858,12858],"disallowed_STD3_mapped",[40,21628,41]],[[12859,12859],"disallowed_STD3_mapped",[40,23398,41]],[[12860,12860],"disallowed_STD3_mapped",[40,30435,41]],[[12861,12861],"disallowed_STD3_mapped",[40,20225,41]],[[12862,12862],"disallowed_STD3_mapped",[40,36039,41]],[[12863,12863],"disallowed_STD3_mapped",[40,21332,41]],[[12864,12864],"disallowed_STD3_mapped",[40,31085,41]],[[12865,12865],"disallowed_STD3_mapped",[40,20241,41]],[[12866,12866],"disallowed_STD3_mapped",[40,33258,41]],[[12867,12867],"disallowed_STD3_mapped",[40,33267,41]],[[12868,12868],"mapped",[21839]],[[12869,12869],"mapped",[24188]],[[12870,12870],"mapped",[25991]],[[12871,12871],"mapped",[31631]],[[12872,12879],"valid",[],"NV8"],[[12880,12880],"mapped",[112,116,101]],[[12881,12881],"mapped",[50,49]],[[12882,12882],"mapped",[50,50]],[[12883,12883],"mapped",[50,51]],[[12884,12884],"mapped",[50,52]],[[12885,12885],"mapped",[50,53]],[[12886,12886],"mapped",[50,54]],[[12887,12887],"mapped",[50,55]],[[12888,12888],"mapped",[50,56]],[[12889,12889],"mapped",[50,57]],[[12890,12890],"mapped",[51,48]],[[12891,12891],"mapped",[51,49]],[[12892,12892],"mapped",[51,50]],[[12893,12893],"mapped",[51,51]],[[12894,12894],"mapped",[51,52]],[[12895,12895],"mapped",[51,53]],[[12896,12896],"mapped",[4352]],[[12897,12897],"mapped",[4354]],[[12898,12898],"mapped",[4355]],[[12899,12899],"mapped",[4357]],[[12900,12900],"mapped",[4358]],[[12901,12901],"mapped",[4359]],[[12902,12902],"mapped",[4361]],[[12903,12903],"mapped",[4363]],[[12904,12904],"mapped",[4364]],[[12905,12905],"mapped",[4366]],[[12906,12906],"mapped",[4367]],[[12907,12907],"mapped",[4368]],[[12908,12908],"mapped",[4369]],[[12909,12909],"mapped",[4370]],[[12910,12910],"mapped",[44032]],[[12911,12911],"mapped",[45208]],[[12912,12912],"mapped",[45796]],[[12913,12913],"mapped",[46972]],[[12914,12914],"mapped",[47560]],[[12915,12915],"mapped",[48148]],[[12916,12916],"mapped",[49324]],[[12917,12917],"mapped",[50500]],[[12918,12918],"mapped",[51088]],[[12919,12919],"mapped",[52264]],[[12920,12920],"mapped",[52852]],[[12921,12921],"mapped",[53440]],[[12922,12922],"mapped",[54028]],[[12923,12923],"mapped",[54616]],[[12924,12924],"mapped",[52280,44256]],[[12925,12925],"mapped",[51452,51032]],[[12926,12926],"mapped",[50864]],[[12927,12927],"valid",[],"NV8"],[[12928,12928],"mapped",[19968]],[[12929,12929],"mapped",[20108]],[[12930,12930],"mapped",[19977]],[[12931,12931],"mapped",[22235]],[[12932,12932],"mapped",[20116]],[[12933,12933],"mapped",[20845]],[[12934,12934],"mapped",[19971]],[[12935,12935],"mapped",[20843]],[[12936,12936],"mapped",[20061]],[[12937,12937],"mapped",[21313]],[[12938,12938],"mapped",[26376]],[[12939,12939],"mapped",[28779]],[[12940,12940],"mapped",[27700]],[[12941,12941],"mapped",[26408]],[[12942,12942],"mapped",[37329]],[[12943,12943],"mapped",[22303]],[[12944,12944],"mapped",[26085]],[[12945,12945],"mapped",[26666]],[[12946,12946],"mapped",[26377]],[[12947,12947],"mapped",[31038]],[[12948,12948],"mapped",[21517]],[[12949,12949],"mapped",[29305]],[[12950,12950],"mapped",[36001]],[[12951,12951],"mapped",[31069]],[[12952,12952],"mapped",[21172]],[[12953,12953],"mapped",[31192]],[[12954,12954],"mapped",[30007]],[[12955,12955],"mapped",[22899]],[[12956,12956],"mapped",[36969]],[[12957,12957],"mapped",[20778]],[[12958,12958],"mapped",[21360]],[[12959,12959],"mapped",[27880]],[[12960,12960],"mapped",[38917]],[[12961,12961],"mapped",[20241]],[[12962,12962],"mapped",[20889]],[[12963,12963],"mapped",[27491]],[[12964,12964],"mapped",[19978]],[[12965,12965],"mapped",[20013]],[[12966,12966],"mapped",[19979]],[[12967,12967],"mapped",[24038]],[[12968,12968],"mapped",[21491]],[[12969,12969],"mapped",[21307]],[[12970,12970],"mapped",[23447]],[[12971,12971],"mapped",[23398]],[[12972,12972],"mapped",[30435]],[[12973,12973],"mapped",[20225]],[[12974,12974],"mapped",[36039]],[[12975,12975],"mapped",[21332]],[[12976,12976],"mapped",[22812]],[[12977,12977],"mapped",[51,54]],[[12978,12978],"mapped",[51,55]],[[12979,12979],"mapped",[51,56]],[[12980,12980],"mapped",[51,57]],[[12981,12981],"mapped",[52,48]],[[12982,12982],"mapped",[52,49]],[[12983,12983],"mapped",[52,50]],[[12984,12984],"mapped",[52,51]],[[12985,12985],"mapped",[52,52]],[[12986,12986],"mapped",[52,53]],[[12987,12987],"mapped",[52,54]],[[12988,12988],"mapped",[52,55]],[[12989,12989],"mapped",[52,56]],[[12990,12990],"mapped",[52,57]],[[12991,12991],"mapped",[53,48]],[[12992,12992],"mapped",[49,26376]],[[12993,12993],"mapped",[50,26376]],[[12994,12994],"mapped",[51,26376]],[[12995,12995],"mapped",[52,26376]],[[12996,12996],"mapped",[53,26376]],[[12997,12997],"mapped",[54,26376]],[[12998,12998],"mapped",[55,26376]],[[12999,12999],"mapped",[56,26376]],[[13e3,13e3],"mapped",[57,26376]],[[13001,13001],"mapped",[49,48,26376]],[[13002,13002],"mapped",[49,49,26376]],[[13003,13003],"mapped",[49,50,26376]],[[13004,13004],"mapped",[104,103]],[[13005,13005],"mapped",[101,114,103]],[[13006,13006],"mapped",[101,118]],[[13007,13007],"mapped",[108,116,100]],[[13008,13008],"mapped",[12450]],[[13009,13009],"mapped",[12452]],[[13010,13010],"mapped",[12454]],[[13011,13011],"mapped",[12456]],[[13012,13012],"mapped",[12458]],[[13013,13013],"mapped",[12459]],[[13014,13014],"mapped",[12461]],[[13015,13015],"mapped",[12463]],[[13016,13016],"mapped",[12465]],[[13017,13017],"mapped",[12467]],[[13018,13018],"mapped",[12469]],[[13019,13019],"mapped",[12471]],[[13020,13020],"mapped",[12473]],[[13021,13021],"mapped",[12475]],[[13022,13022],"mapped",[12477]],[[13023,13023],"mapped",[12479]],[[13024,13024],"mapped",[12481]],[[13025,13025],"mapped",[12484]],[[13026,13026],"mapped",[12486]],[[13027,13027],"mapped",[12488]],[[13028,13028],"mapped",[12490]],[[13029,13029],"mapped",[12491]],[[13030,13030],"mapped",[12492]],[[13031,13031],"mapped",[12493]],[[13032,13032],"mapped",[12494]],[[13033,13033],"mapped",[12495]],[[13034,13034],"mapped",[12498]],[[13035,13035],"mapped",[12501]],[[13036,13036],"mapped",[12504]],[[13037,13037],"mapped",[12507]],[[13038,13038],"mapped",[12510]],[[13039,13039],"mapped",[12511]],[[13040,13040],"mapped",[12512]],[[13041,13041],"mapped",[12513]],[[13042,13042],"mapped",[12514]],[[13043,13043],"mapped",[12516]],[[13044,13044],"mapped",[12518]],[[13045,13045],"mapped",[12520]],[[13046,13046],"mapped",[12521]],[[13047,13047],"mapped",[12522]],[[13048,13048],"mapped",[12523]],[[13049,13049],"mapped",[12524]],[[13050,13050],"mapped",[12525]],[[13051,13051],"mapped",[12527]],[[13052,13052],"mapped",[12528]],[[13053,13053],"mapped",[12529]],[[13054,13054],"mapped",[12530]],[[13055,13055],"disallowed"],[[13056,13056],"mapped",[12450,12497,12540,12488]],[[13057,13057],"mapped",[12450,12523,12501,12449]],[[13058,13058],"mapped",[12450,12531,12506,12450]],[[13059,13059],"mapped",[12450,12540,12523]],[[13060,13060],"mapped",[12452,12491,12531,12464]],[[13061,13061],"mapped",[12452,12531,12481]],[[13062,13062],"mapped",[12454,12457,12531]],[[13063,13063],"mapped",[12456,12473,12463,12540,12489]],[[13064,13064],"mapped",[12456,12540,12459,12540]],[[13065,13065],"mapped",[12458,12531,12473]],[[13066,13066],"mapped",[12458,12540,12512]],[[13067,13067],"mapped",[12459,12452,12522]],[[13068,13068],"mapped",[12459,12521,12483,12488]],[[13069,13069],"mapped",[12459,12525,12522,12540]],[[13070,13070],"mapped",[12460,12525,12531]],[[13071,13071],"mapped",[12460,12531,12510]],[[13072,13072],"mapped",[12462,12460]],[[13073,13073],"mapped",[12462,12491,12540]],[[13074,13074],"mapped",[12461,12517,12522,12540]],[[13075,13075],"mapped",[12462,12523,12480,12540]],[[13076,13076],"mapped",[12461,12525]],[[13077,13077],"mapped",[12461,12525,12464,12521,12512]],[[13078,13078],"mapped",[12461,12525,12513,12540,12488,12523]],[[13079,13079],"mapped",[12461,12525,12527,12483,12488]],[[13080,13080],"mapped",[12464,12521,12512]],[[13081,13081],"mapped",[12464,12521,12512,12488,12531]],[[13082,13082],"mapped",[12463,12523,12476,12452,12525]],[[13083,13083],"mapped",[12463,12525,12540,12493]],[[13084,13084],"mapped",[12465,12540,12473]],[[13085,13085],"mapped",[12467,12523,12490]],[[13086,13086],"mapped",[12467,12540,12509]],[[13087,13087],"mapped",[12469,12452,12463,12523]],[[13088,13088],"mapped",[12469,12531,12481,12540,12512]],[[13089,13089],"mapped",[12471,12522,12531,12464]],[[13090,13090],"mapped",[12475,12531,12481]],[[13091,13091],"mapped",[12475,12531,12488]],[[13092,13092],"mapped",[12480,12540,12473]],[[13093,13093],"mapped",[12487,12471]],[[13094,13094],"mapped",[12489,12523]],[[13095,13095],"mapped",[12488,12531]],[[13096,13096],"mapped",[12490,12494]],[[13097,13097],"mapped",[12494,12483,12488]],[[13098,13098],"mapped",[12495,12452,12484]],[[13099,13099],"mapped",[12497,12540,12475,12531,12488]],[[13100,13100],"mapped",[12497,12540,12484]],[[13101,13101],"mapped",[12496,12540,12524,12523]],[[13102,13102],"mapped",[12500,12450,12473,12488,12523]],[[13103,13103],"mapped",[12500,12463,12523]],[[13104,13104],"mapped",[12500,12467]],[[13105,13105],"mapped",[12499,12523]],[[13106,13106],"mapped",[12501,12449,12521,12483,12489]],[[13107,13107],"mapped",[12501,12451,12540,12488]],[[13108,13108],"mapped",[12502,12483,12471,12455,12523]],[[13109,13109],"mapped",[12501,12521,12531]],[[13110,13110],"mapped",[12504,12463,12479,12540,12523]],[[13111,13111],"mapped",[12506,12477]],[[13112,13112],"mapped",[12506,12491,12498]],[[13113,13113],"mapped",[12504,12523,12484]],[[13114,13114],"mapped",[12506,12531,12473]],[[13115,13115],"mapped",[12506,12540,12472]],[[13116,13116],"mapped",[12505,12540,12479]],[[13117,13117],"mapped",[12509,12452,12531,12488]],[[13118,13118],"mapped",[12508,12523,12488]],[[13119,13119],"mapped",[12507,12531]],[[13120,13120],"mapped",[12509,12531,12489]],[[13121,13121],"mapped",[12507,12540,12523]],[[13122,13122],"mapped",[12507,12540,12531]],[[13123,13123],"mapped",[12510,12452,12463,12525]],[[13124,13124],"mapped",[12510,12452,12523]],[[13125,13125],"mapped",[12510,12483,12495]],[[13126,13126],"mapped",[12510,12523,12463]],[[13127,13127],"mapped",[12510,12531,12471,12519,12531]],[[13128,13128],"mapped",[12511,12463,12525,12531]],[[13129,13129],"mapped",[12511,12522]],[[13130,13130],"mapped",[12511,12522,12496,12540,12523]],[[13131,13131],"mapped",[12513,12460]],[[13132,13132],"mapped",[12513,12460,12488,12531]],[[13133,13133],"mapped",[12513,12540,12488,12523]],[[13134,13134],"mapped",[12516,12540,12489]],[[13135,13135],"mapped",[12516,12540,12523]],[[13136,13136],"mapped",[12518,12450,12531]],[[13137,13137],"mapped",[12522,12483,12488,12523]],[[13138,13138],"mapped",[12522,12521]],[[13139,13139],"mapped",[12523,12500,12540]],[[13140,13140],"mapped",[12523,12540,12502,12523]],[[13141,13141],"mapped",[12524,12512]],[[13142,13142],"mapped",[12524,12531,12488,12466,12531]],[[13143,13143],"mapped",[12527,12483,12488]],[[13144,13144],"mapped",[48,28857]],[[13145,13145],"mapped",[49,28857]],[[13146,13146],"mapped",[50,28857]],[[13147,13147],"mapped",[51,28857]],[[13148,13148],"mapped",[52,28857]],[[13149,13149],"mapped",[53,28857]],[[13150,13150],"mapped",[54,28857]],[[13151,13151],"mapped",[55,28857]],[[13152,13152],"mapped",[56,28857]],[[13153,13153],"mapped",[57,28857]],[[13154,13154],"mapped",[49,48,28857]],[[13155,13155],"mapped",[49,49,28857]],[[13156,13156],"mapped",[49,50,28857]],[[13157,13157],"mapped",[49,51,28857]],[[13158,13158],"mapped",[49,52,28857]],[[13159,13159],"mapped",[49,53,28857]],[[13160,13160],"mapped",[49,54,28857]],[[13161,13161],"mapped",[49,55,28857]],[[13162,13162],"mapped",[49,56,28857]],[[13163,13163],"mapped",[49,57,28857]],[[13164,13164],"mapped",[50,48,28857]],[[13165,13165],"mapped",[50,49,28857]],[[13166,13166],"mapped",[50,50,28857]],[[13167,13167],"mapped",[50,51,28857]],[[13168,13168],"mapped",[50,52,28857]],[[13169,13169],"mapped",[104,112,97]],[[13170,13170],"mapped",[100,97]],[[13171,13171],"mapped",[97,117]],[[13172,13172],"mapped",[98,97,114]],[[13173,13173],"mapped",[111,118]],[[13174,13174],"mapped",[112,99]],[[13175,13175],"mapped",[100,109]],[[13176,13176],"mapped",[100,109,50]],[[13177,13177],"mapped",[100,109,51]],[[13178,13178],"mapped",[105,117]],[[13179,13179],"mapped",[24179,25104]],[[13180,13180],"mapped",[26157,21644]],[[13181,13181],"mapped",[22823,27491]],[[13182,13182],"mapped",[26126,27835]],[[13183,13183],"mapped",[26666,24335,20250,31038]],[[13184,13184],"mapped",[112,97]],[[13185,13185],"mapped",[110,97]],[[13186,13186],"mapped",[956,97]],[[13187,13187],"mapped",[109,97]],[[13188,13188],"mapped",[107,97]],[[13189,13189],"mapped",[107,98]],[[13190,13190],"mapped",[109,98]],[[13191,13191],"mapped",[103,98]],[[13192,13192],"mapped",[99,97,108]],[[13193,13193],"mapped",[107,99,97,108]],[[13194,13194],"mapped",[112,102]],[[13195,13195],"mapped",[110,102]],[[13196,13196],"mapped",[956,102]],[[13197,13197],"mapped",[956,103]],[[13198,13198],"mapped",[109,103]],[[13199,13199],"mapped",[107,103]],[[13200,13200],"mapped",[104,122]],[[13201,13201],"mapped",[107,104,122]],[[13202,13202],"mapped",[109,104,122]],[[13203,13203],"mapped",[103,104,122]],[[13204,13204],"mapped",[116,104,122]],[[13205,13205],"mapped",[956,108]],[[13206,13206],"mapped",[109,108]],[[13207,13207],"mapped",[100,108]],[[13208,13208],"mapped",[107,108]],[[13209,13209],"mapped",[102,109]],[[13210,13210],"mapped",[110,109]],[[13211,13211],"mapped",[956,109]],[[13212,13212],"mapped",[109,109]],[[13213,13213],"mapped",[99,109]],[[13214,13214],"mapped",[107,109]],[[13215,13215],"mapped",[109,109,50]],[[13216,13216],"mapped",[99,109,50]],[[13217,13217],"mapped",[109,50]],[[13218,13218],"mapped",[107,109,50]],[[13219,13219],"mapped",[109,109,51]],[[13220,13220],"mapped",[99,109,51]],[[13221,13221],"mapped",[109,51]],[[13222,13222],"mapped",[107,109,51]],[[13223,13223],"mapped",[109,8725,115]],[[13224,13224],"mapped",[109,8725,115,50]],[[13225,13225],"mapped",[112,97]],[[13226,13226],"mapped",[107,112,97]],[[13227,13227],"mapped",[109,112,97]],[[13228,13228],"mapped",[103,112,97]],[[13229,13229],"mapped",[114,97,100]],[[13230,13230],"mapped",[114,97,100,8725,115]],[[13231,13231],"mapped",[114,97,100,8725,115,50]],[[13232,13232],"mapped",[112,115]],[[13233,13233],"mapped",[110,115]],[[13234,13234],"mapped",[956,115]],[[13235,13235],"mapped",[109,115]],[[13236,13236],"mapped",[112,118]],[[13237,13237],"mapped",[110,118]],[[13238,13238],"mapped",[956,118]],[[13239,13239],"mapped",[109,118]],[[13240,13240],"mapped",[107,118]],[[13241,13241],"mapped",[109,118]],[[13242,13242],"mapped",[112,119]],[[13243,13243],"mapped",[110,119]],[[13244,13244],"mapped",[956,119]],[[13245,13245],"mapped",[109,119]],[[13246,13246],"mapped",[107,119]],[[13247,13247],"mapped",[109,119]],[[13248,13248],"mapped",[107,969]],[[13249,13249],"mapped",[109,969]],[[13250,13250],"disallowed"],[[13251,13251],"mapped",[98,113]],[[13252,13252],"mapped",[99,99]],[[13253,13253],"mapped",[99,100]],[[13254,13254],"mapped",[99,8725,107,103]],[[13255,13255],"disallowed"],[[13256,13256],"mapped",[100,98]],[[13257,13257],"mapped",[103,121]],[[13258,13258],"mapped",[104,97]],[[13259,13259],"mapped",[104,112]],[[13260,13260],"mapped",[105,110]],[[13261,13261],"mapped",[107,107]],[[13262,13262],"mapped",[107,109]],[[13263,13263],"mapped",[107,116]],[[13264,13264],"mapped",[108,109]],[[13265,13265],"mapped",[108,110]],[[13266,13266],"mapped",[108,111,103]],[[13267,13267],"mapped",[108,120]],[[13268,13268],"mapped",[109,98]],[[13269,13269],"mapped",[109,105,108]],[[13270,13270],"mapped",[109,111,108]],[[13271,13271],"mapped",[112,104]],[[13272,13272],"disallowed"],[[13273,13273],"mapped",[112,112,109]],[[13274,13274],"mapped",[112,114]],[[13275,13275],"mapped",[115,114]],[[13276,13276],"mapped",[115,118]],[[13277,13277],"mapped",[119,98]],[[13278,13278],"mapped",[118,8725,109]],[[13279,13279],"mapped",[97,8725,109]],[[13280,13280],"mapped",[49,26085]],[[13281,13281],"mapped",[50,26085]],[[13282,13282],"mapped",[51,26085]],[[13283,13283],"mapped",[52,26085]],[[13284,13284],"mapped",[53,26085]],[[13285,13285],"mapped",[54,26085]],[[13286,13286],"mapped",[55,26085]],[[13287,13287],"mapped",[56,26085]],[[13288,13288],"mapped",[57,26085]],[[13289,13289],"mapped",[49,48,26085]],[[13290,13290],"mapped",[49,49,26085]],[[13291,13291],"mapped",[49,50,26085]],[[13292,13292],"mapped",[49,51,26085]],[[13293,13293],"mapped",[49,52,26085]],[[13294,13294],"mapped",[49,53,26085]],[[13295,13295],"mapped",[49,54,26085]],[[13296,13296],"mapped",[49,55,26085]],[[13297,13297],"mapped",[49,56,26085]],[[13298,13298],"mapped",[49,57,26085]],[[13299,13299],"mapped",[50,48,26085]],[[13300,13300],"mapped",[50,49,26085]],[[13301,13301],"mapped",[50,50,26085]],[[13302,13302],"mapped",[50,51,26085]],[[13303,13303],"mapped",[50,52,26085]],[[13304,13304],"mapped",[50,53,26085]],[[13305,13305],"mapped",[50,54,26085]],[[13306,13306],"mapped",[50,55,26085]],[[13307,13307],"mapped",[50,56,26085]],[[13308,13308],"mapped",[50,57,26085]],[[13309,13309],"mapped",[51,48,26085]],[[13310,13310],"mapped",[51,49,26085]],[[13311,13311],"mapped",[103,97,108]],[[13312,19893],"valid"],[[19894,19903],"disallowed"],[[19904,19967],"valid",[],"NV8"],[[19968,40869],"valid"],[[40870,40891],"valid"],[[40892,40899],"valid"],[[40900,40907],"valid"],[[40908,40908],"valid"],[[40909,40917],"valid"],[[40918,40959],"disallowed"],[[40960,42124],"valid"],[[42125,42127],"disallowed"],[[42128,42145],"valid",[],"NV8"],[[42146,42147],"valid",[],"NV8"],[[42148,42163],"valid",[],"NV8"],[[42164,42164],"valid",[],"NV8"],[[42165,42176],"valid",[],"NV8"],[[42177,42177],"valid",[],"NV8"],[[42178,42180],"valid",[],"NV8"],[[42181,42181],"valid",[],"NV8"],[[42182,42182],"valid",[],"NV8"],[[42183,42191],"disallowed"],[[42192,42237],"valid"],[[42238,42239],"valid",[],"NV8"],[[42240,42508],"valid"],[[42509,42511],"valid",[],"NV8"],[[42512,42539],"valid"],[[42540,42559],"disallowed"],[[42560,42560],"mapped",[42561]],[[42561,42561],"valid"],[[42562,42562],"mapped",[42563]],[[42563,42563],"valid"],[[42564,42564],"mapped",[42565]],[[42565,42565],"valid"],[[42566,42566],"mapped",[42567]],[[42567,42567],"valid"],[[42568,42568],"mapped",[42569]],[[42569,42569],"valid"],[[42570,42570],"mapped",[42571]],[[42571,42571],"valid"],[[42572,42572],"mapped",[42573]],[[42573,42573],"valid"],[[42574,42574],"mapped",[42575]],[[42575,42575],"valid"],[[42576,42576],"mapped",[42577]],[[42577,42577],"valid"],[[42578,42578],"mapped",[42579]],[[42579,42579],"valid"],[[42580,42580],"mapped",[42581]],[[42581,42581],"valid"],[[42582,42582],"mapped",[42583]],[[42583,42583],"valid"],[[42584,42584],"mapped",[42585]],[[42585,42585],"valid"],[[42586,42586],"mapped",[42587]],[[42587,42587],"valid"],[[42588,42588],"mapped",[42589]],[[42589,42589],"valid"],[[42590,42590],"mapped",[42591]],[[42591,42591],"valid"],[[42592,42592],"mapped",[42593]],[[42593,42593],"valid"],[[42594,42594],"mapped",[42595]],[[42595,42595],"valid"],[[42596,42596],"mapped",[42597]],[[42597,42597],"valid"],[[42598,42598],"mapped",[42599]],[[42599,42599],"valid"],[[42600,42600],"mapped",[42601]],[[42601,42601],"valid"],[[42602,42602],"mapped",[42603]],[[42603,42603],"valid"],[[42604,42604],"mapped",[42605]],[[42605,42607],"valid"],[[42608,42611],"valid",[],"NV8"],[[42612,42619],"valid"],[[42620,42621],"valid"],[[42622,42622],"valid",[],"NV8"],[[42623,42623],"valid"],[[42624,42624],"mapped",[42625]],[[42625,42625],"valid"],[[42626,42626],"mapped",[42627]],[[42627,42627],"valid"],[[42628,42628],"mapped",[42629]],[[42629,42629],"valid"],[[42630,42630],"mapped",[42631]],[[42631,42631],"valid"],[[42632,42632],"mapped",[42633]],[[42633,42633],"valid"],[[42634,42634],"mapped",[42635]],[[42635,42635],"valid"],[[42636,42636],"mapped",[42637]],[[42637,42637],"valid"],[[42638,42638],"mapped",[42639]],[[42639,42639],"valid"],[[42640,42640],"mapped",[42641]],[[42641,42641],"valid"],[[42642,42642],"mapped",[42643]],[[42643,42643],"valid"],[[42644,42644],"mapped",[42645]],[[42645,42645],"valid"],[[42646,42646],"mapped",[42647]],[[42647,42647],"valid"],[[42648,42648],"mapped",[42649]],[[42649,42649],"valid"],[[42650,42650],"mapped",[42651]],[[42651,42651],"valid"],[[42652,42652],"mapped",[1098]],[[42653,42653],"mapped",[1100]],[[42654,42654],"valid"],[[42655,42655],"valid"],[[42656,42725],"valid"],[[42726,42735],"valid",[],"NV8"],[[42736,42737],"valid"],[[42738,42743],"valid",[],"NV8"],[[42744,42751],"disallowed"],[[42752,42774],"valid",[],"NV8"],[[42775,42778],"valid"],[[42779,42783],"valid"],[[42784,42785],"valid",[],"NV8"],[[42786,42786],"mapped",[42787]],[[42787,42787],"valid"],[[42788,42788],"mapped",[42789]],[[42789,42789],"valid"],[[42790,42790],"mapped",[42791]],[[42791,42791],"valid"],[[42792,42792],"mapped",[42793]],[[42793,42793],"valid"],[[42794,42794],"mapped",[42795]],[[42795,42795],"valid"],[[42796,42796],"mapped",[42797]],[[42797,42797],"valid"],[[42798,42798],"mapped",[42799]],[[42799,42801],"valid"],[[42802,42802],"mapped",[42803]],[[42803,42803],"valid"],[[42804,42804],"mapped",[42805]],[[42805,42805],"valid"],[[42806,42806],"mapped",[42807]],[[42807,42807],"valid"],[[42808,42808],"mapped",[42809]],[[42809,42809],"valid"],[[42810,42810],"mapped",[42811]],[[42811,42811],"valid"],[[42812,42812],"mapped",[42813]],[[42813,42813],"valid"],[[42814,42814],"mapped",[42815]],[[42815,42815],"valid"],[[42816,42816],"mapped",[42817]],[[42817,42817],"valid"],[[42818,42818],"mapped",[42819]],[[42819,42819],"valid"],[[42820,42820],"mapped",[42821]],[[42821,42821],"valid"],[[42822,42822],"mapped",[42823]],[[42823,42823],"valid"],[[42824,42824],"mapped",[42825]],[[42825,42825],"valid"],[[42826,42826],"mapped",[42827]],[[42827,42827],"valid"],[[42828,42828],"mapped",[42829]],[[42829,42829],"valid"],[[42830,42830],"mapped",[42831]],[[42831,42831],"valid"],[[42832,42832],"mapped",[42833]],[[42833,42833],"valid"],[[42834,42834],"mapped",[42835]],[[42835,42835],"valid"],[[42836,42836],"mapped",[42837]],[[42837,42837],"valid"],[[42838,42838],"mapped",[42839]],[[42839,42839],"valid"],[[42840,42840],"mapped",[42841]],[[42841,42841],"valid"],[[42842,42842],"mapped",[42843]],[[42843,42843],"valid"],[[42844,42844],"mapped",[42845]],[[42845,42845],"valid"],[[42846,42846],"mapped",[42847]],[[42847,42847],"valid"],[[42848,42848],"mapped",[42849]],[[42849,42849],"valid"],[[42850,42850],"mapped",[42851]],[[42851,42851],"valid"],[[42852,42852],"mapped",[42853]],[[42853,42853],"valid"],[[42854,42854],"mapped",[42855]],[[42855,42855],"valid"],[[42856,42856],"mapped",[42857]],[[42857,42857],"valid"],[[42858,42858],"mapped",[42859]],[[42859,42859],"valid"],[[42860,42860],"mapped",[42861]],[[42861,42861],"valid"],[[42862,42862],"mapped",[42863]],[[42863,42863],"valid"],[[42864,42864],"mapped",[42863]],[[42865,42872],"valid"],[[42873,42873],"mapped",[42874]],[[42874,42874],"valid"],[[42875,42875],"mapped",[42876]],[[42876,42876],"valid"],[[42877,42877],"mapped",[7545]],[[42878,42878],"mapped",[42879]],[[42879,42879],"valid"],[[42880,42880],"mapped",[42881]],[[42881,42881],"valid"],[[42882,42882],"mapped",[42883]],[[42883,42883],"valid"],[[42884,42884],"mapped",[42885]],[[42885,42885],"valid"],[[42886,42886],"mapped",[42887]],[[42887,42888],"valid"],[[42889,42890],"valid",[],"NV8"],[[42891,42891],"mapped",[42892]],[[42892,42892],"valid"],[[42893,42893],"mapped",[613]],[[42894,42894],"valid"],[[42895,42895],"valid"],[[42896,42896],"mapped",[42897]],[[42897,42897],"valid"],[[42898,42898],"mapped",[42899]],[[42899,42899],"valid"],[[42900,42901],"valid"],[[42902,42902],"mapped",[42903]],[[42903,42903],"valid"],[[42904,42904],"mapped",[42905]],[[42905,42905],"valid"],[[42906,42906],"mapped",[42907]],[[42907,42907],"valid"],[[42908,42908],"mapped",[42909]],[[42909,42909],"valid"],[[42910,42910],"mapped",[42911]],[[42911,42911],"valid"],[[42912,42912],"mapped",[42913]],[[42913,42913],"valid"],[[42914,42914],"mapped",[42915]],[[42915,42915],"valid"],[[42916,42916],"mapped",[42917]],[[42917,42917],"valid"],[[42918,42918],"mapped",[42919]],[[42919,42919],"valid"],[[42920,42920],"mapped",[42921]],[[42921,42921],"valid"],[[42922,42922],"mapped",[614]],[[42923,42923],"mapped",[604]],[[42924,42924],"mapped",[609]],[[42925,42925],"mapped",[620]],[[42926,42927],"disallowed"],[[42928,42928],"mapped",[670]],[[42929,42929],"mapped",[647]],[[42930,42930],"mapped",[669]],[[42931,42931],"mapped",[43859]],[[42932,42932],"mapped",[42933]],[[42933,42933],"valid"],[[42934,42934],"mapped",[42935]],[[42935,42935],"valid"],[[42936,42998],"disallowed"],[[42999,42999],"valid"],[[43e3,43e3],"mapped",[295]],[[43001,43001],"mapped",[339]],[[43002,43002],"valid"],[[43003,43007],"valid"],[[43008,43047],"valid"],[[43048,43051],"valid",[],"NV8"],[[43052,43055],"disallowed"],[[43056,43065],"valid",[],"NV8"],[[43066,43071],"disallowed"],[[43072,43123],"valid"],[[43124,43127],"valid",[],"NV8"],[[43128,43135],"disallowed"],[[43136,43204],"valid"],[[43205,43213],"disallowed"],[[43214,43215],"valid",[],"NV8"],[[43216,43225],"valid"],[[43226,43231],"disallowed"],[[43232,43255],"valid"],[[43256,43258],"valid",[],"NV8"],[[43259,43259],"valid"],[[43260,43260],"valid",[],"NV8"],[[43261,43261],"valid"],[[43262,43263],"disallowed"],[[43264,43309],"valid"],[[43310,43311],"valid",[],"NV8"],[[43312,43347],"valid"],[[43348,43358],"disallowed"],[[43359,43359],"valid",[],"NV8"],[[43360,43388],"valid",[],"NV8"],[[43389,43391],"disallowed"],[[43392,43456],"valid"],[[43457,43469],"valid",[],"NV8"],[[43470,43470],"disallowed"],[[43471,43481],"valid"],[[43482,43485],"disallowed"],[[43486,43487],"valid",[],"NV8"],[[43488,43518],"valid"],[[43519,43519],"disallowed"],[[43520,43574],"valid"],[[43575,43583],"disallowed"],[[43584,43597],"valid"],[[43598,43599],"disallowed"],[[43600,43609],"valid"],[[43610,43611],"disallowed"],[[43612,43615],"valid",[],"NV8"],[[43616,43638],"valid"],[[43639,43641],"valid",[],"NV8"],[[43642,43643],"valid"],[[43644,43647],"valid"],[[43648,43714],"valid"],[[43715,43738],"disallowed"],[[43739,43741],"valid"],[[43742,43743],"valid",[],"NV8"],[[43744,43759],"valid"],[[43760,43761],"valid",[],"NV8"],[[43762,43766],"valid"],[[43767,43776],"disallowed"],[[43777,43782],"valid"],[[43783,43784],"disallowed"],[[43785,43790],"valid"],[[43791,43792],"disallowed"],[[43793,43798],"valid"],[[43799,43807],"disallowed"],[[43808,43814],"valid"],[[43815,43815],"disallowed"],[[43816,43822],"valid"],[[43823,43823],"disallowed"],[[43824,43866],"valid"],[[43867,43867],"valid",[],"NV8"],[[43868,43868],"mapped",[42791]],[[43869,43869],"mapped",[43831]],[[43870,43870],"mapped",[619]],[[43871,43871],"mapped",[43858]],[[43872,43875],"valid"],[[43876,43877],"valid"],[[43878,43887],"disallowed"],[[43888,43888],"mapped",[5024]],[[43889,43889],"mapped",[5025]],[[43890,43890],"mapped",[5026]],[[43891,43891],"mapped",[5027]],[[43892,43892],"mapped",[5028]],[[43893,43893],"mapped",[5029]],[[43894,43894],"mapped",[5030]],[[43895,43895],"mapped",[5031]],[[43896,43896],"mapped",[5032]],[[43897,43897],"mapped",[5033]],[[43898,43898],"mapped",[5034]],[[43899,43899],"mapped",[5035]],[[43900,43900],"mapped",[5036]],[[43901,43901],"mapped",[5037]],[[43902,43902],"mapped",[5038]],[[43903,43903],"mapped",[5039]],[[43904,43904],"mapped",[5040]],[[43905,43905],"mapped",[5041]],[[43906,43906],"mapped",[5042]],[[43907,43907],"mapped",[5043]],[[43908,43908],"mapped",[5044]],[[43909,43909],"mapped",[5045]],[[43910,43910],"mapped",[5046]],[[43911,43911],"mapped",[5047]],[[43912,43912],"mapped",[5048]],[[43913,43913],"mapped",[5049]],[[43914,43914],"mapped",[5050]],[[43915,43915],"mapped",[5051]],[[43916,43916],"mapped",[5052]],[[43917,43917],"mapped",[5053]],[[43918,43918],"mapped",[5054]],[[43919,43919],"mapped",[5055]],[[43920,43920],"mapped",[5056]],[[43921,43921],"mapped",[5057]],[[43922,43922],"mapped",[5058]],[[43923,43923],"mapped",[5059]],[[43924,43924],"mapped",[5060]],[[43925,43925],"mapped",[5061]],[[43926,43926],"mapped",[5062]],[[43927,43927],"mapped",[5063]],[[43928,43928],"mapped",[5064]],[[43929,43929],"mapped",[5065]],[[43930,43930],"mapped",[5066]],[[43931,43931],"mapped",[5067]],[[43932,43932],"mapped",[5068]],[[43933,43933],"mapped",[5069]],[[43934,43934],"mapped",[5070]],[[43935,43935],"mapped",[5071]],[[43936,43936],"mapped",[5072]],[[43937,43937],"mapped",[5073]],[[43938,43938],"mapped",[5074]],[[43939,43939],"mapped",[5075]],[[43940,43940],"mapped",[5076]],[[43941,43941],"mapped",[5077]],[[43942,43942],"mapped",[5078]],[[43943,43943],"mapped",[5079]],[[43944,43944],"mapped",[5080]],[[43945,43945],"mapped",[5081]],[[43946,43946],"mapped",[5082]],[[43947,43947],"mapped",[5083]],[[43948,43948],"mapped",[5084]],[[43949,43949],"mapped",[5085]],[[43950,43950],"mapped",[5086]],[[43951,43951],"mapped",[5087]],[[43952,43952],"mapped",[5088]],[[43953,43953],"mapped",[5089]],[[43954,43954],"mapped",[5090]],[[43955,43955],"mapped",[5091]],[[43956,43956],"mapped",[5092]],[[43957,43957],"mapped",[5093]],[[43958,43958],"mapped",[5094]],[[43959,43959],"mapped",[5095]],[[43960,43960],"mapped",[5096]],[[43961,43961],"mapped",[5097]],[[43962,43962],"mapped",[5098]],[[43963,43963],"mapped",[5099]],[[43964,43964],"mapped",[5100]],[[43965,43965],"mapped",[5101]],[[43966,43966],"mapped",[5102]],[[43967,43967],"mapped",[5103]],[[43968,44010],"valid"],[[44011,44011],"valid",[],"NV8"],[[44012,44013],"valid"],[[44014,44015],"disallowed"],[[44016,44025],"valid"],[[44026,44031],"disallowed"],[[44032,55203],"valid"],[[55204,55215],"disallowed"],[[55216,55238],"valid",[],"NV8"],[[55239,55242],"disallowed"],[[55243,55291],"valid",[],"NV8"],[[55292,55295],"disallowed"],[[55296,57343],"disallowed"],[[57344,63743],"disallowed"],[[63744,63744],"mapped",[35912]],[[63745,63745],"mapped",[26356]],[[63746,63746],"mapped",[36554]],[[63747,63747],"mapped",[36040]],[[63748,63748],"mapped",[28369]],[[63749,63749],"mapped",[20018]],[[63750,63750],"mapped",[21477]],[[63751,63752],"mapped",[40860]],[[63753,63753],"mapped",[22865]],[[63754,63754],"mapped",[37329]],[[63755,63755],"mapped",[21895]],[[63756,63756],"mapped",[22856]],[[63757,63757],"mapped",[25078]],[[63758,63758],"mapped",[30313]],[[63759,63759],"mapped",[32645]],[[63760,63760],"mapped",[34367]],[[63761,63761],"mapped",[34746]],[[63762,63762],"mapped",[35064]],[[63763,63763],"mapped",[37007]],[[63764,63764],"mapped",[27138]],[[63765,63765],"mapped",[27931]],[[63766,63766],"mapped",[28889]],[[63767,63767],"mapped",[29662]],[[63768,63768],"mapped",[33853]],[[63769,63769],"mapped",[37226]],[[63770,63770],"mapped",[39409]],[[63771,63771],"mapped",[20098]],[[63772,63772],"mapped",[21365]],[[63773,63773],"mapped",[27396]],[[63774,63774],"mapped",[29211]],[[63775,63775],"mapped",[34349]],[[63776,63776],"mapped",[40478]],[[63777,63777],"mapped",[23888]],[[63778,63778],"mapped",[28651]],[[63779,63779],"mapped",[34253]],[[63780,63780],"mapped",[35172]],[[63781,63781],"mapped",[25289]],[[63782,63782],"mapped",[33240]],[[63783,63783],"mapped",[34847]],[[63784,63784],"mapped",[24266]],[[63785,63785],"mapped",[26391]],[[63786,63786],"mapped",[28010]],[[63787,63787],"mapped",[29436]],[[63788,63788],"mapped",[37070]],[[63789,63789],"mapped",[20358]],[[63790,63790],"mapped",[20919]],[[63791,63791],"mapped",[21214]],[[63792,63792],"mapped",[25796]],[[63793,63793],"mapped",[27347]],[[63794,63794],"mapped",[29200]],[[63795,63795],"mapped",[30439]],[[63796,63796],"mapped",[32769]],[[63797,63797],"mapped",[34310]],[[63798,63798],"mapped",[34396]],[[63799,63799],"mapped",[36335]],[[63800,63800],"mapped",[38706]],[[63801,63801],"mapped",[39791]],[[63802,63802],"mapped",[40442]],[[63803,63803],"mapped",[30860]],[[63804,63804],"mapped",[31103]],[[63805,63805],"mapped",[32160]],[[63806,63806],"mapped",[33737]],[[63807,63807],"mapped",[37636]],[[63808,63808],"mapped",[40575]],[[63809,63809],"mapped",[35542]],[[63810,63810],"mapped",[22751]],[[63811,63811],"mapped",[24324]],[[63812,63812],"mapped",[31840]],[[63813,63813],"mapped",[32894]],[[63814,63814],"mapped",[29282]],[[63815,63815],"mapped",[30922]],[[63816,63816],"mapped",[36034]],[[63817,63817],"mapped",[38647]],[[63818,63818],"mapped",[22744]],[[63819,63819],"mapped",[23650]],[[63820,63820],"mapped",[27155]],[[63821,63821],"mapped",[28122]],[[63822,63822],"mapped",[28431]],[[63823,63823],"mapped",[32047]],[[63824,63824],"mapped",[32311]],[[63825,63825],"mapped",[38475]],[[63826,63826],"mapped",[21202]],[[63827,63827],"mapped",[32907]],[[63828,63828],"mapped",[20956]],[[63829,63829],"mapped",[20940]],[[63830,63830],"mapped",[31260]],[[63831,63831],"mapped",[32190]],[[63832,63832],"mapped",[33777]],[[63833,63833],"mapped",[38517]],[[63834,63834],"mapped",[35712]],[[63835,63835],"mapped",[25295]],[[63836,63836],"mapped",[27138]],[[63837,63837],"mapped",[35582]],[[63838,63838],"mapped",[20025]],[[63839,63839],"mapped",[23527]],[[63840,63840],"mapped",[24594]],[[63841,63841],"mapped",[29575]],[[63842,63842],"mapped",[30064]],[[63843,63843],"mapped",[21271]],[[63844,63844],"mapped",[30971]],[[63845,63845],"mapped",[20415]],[[63846,63846],"mapped",[24489]],[[63847,63847],"mapped",[19981]],[[63848,63848],"mapped",[27852]],[[63849,63849],"mapped",[25976]],[[63850,63850],"mapped",[32034]],[[63851,63851],"mapped",[21443]],[[63852,63852],"mapped",[22622]],[[63853,63853],"mapped",[30465]],[[63854,63854],"mapped",[33865]],[[63855,63855],"mapped",[35498]],[[63856,63856],"mapped",[27578]],[[63857,63857],"mapped",[36784]],[[63858,63858],"mapped",[27784]],[[63859,63859],"mapped",[25342]],[[63860,63860],"mapped",[33509]],[[63861,63861],"mapped",[25504]],[[63862,63862],"mapped",[30053]],[[63863,63863],"mapped",[20142]],[[63864,63864],"mapped",[20841]],[[63865,63865],"mapped",[20937]],[[63866,63866],"mapped",[26753]],[[63867,63867],"mapped",[31975]],[[63868,63868],"mapped",[33391]],[[63869,63869],"mapped",[35538]],[[63870,63870],"mapped",[37327]],[[63871,63871],"mapped",[21237]],[[63872,63872],"mapped",[21570]],[[63873,63873],"mapped",[22899]],[[63874,63874],"mapped",[24300]],[[63875,63875],"mapped",[26053]],[[63876,63876],"mapped",[28670]],[[63877,63877],"mapped",[31018]],[[63878,63878],"mapped",[38317]],[[63879,63879],"mapped",[39530]],[[63880,63880],"mapped",[40599]],[[63881,63881],"mapped",[40654]],[[63882,63882],"mapped",[21147]],[[63883,63883],"mapped",[26310]],[[63884,63884],"mapped",[27511]],[[63885,63885],"mapped",[36706]],[[63886,63886],"mapped",[24180]],[[63887,63887],"mapped",[24976]],[[63888,63888],"mapped",[25088]],[[63889,63889],"mapped",[25754]],[[63890,63890],"mapped",[28451]],[[63891,63891],"mapped",[29001]],[[63892,63892],"mapped",[29833]],[[63893,63893],"mapped",[31178]],[[63894,63894],"mapped",[32244]],[[63895,63895],"mapped",[32879]],[[63896,63896],"mapped",[36646]],[[63897,63897],"mapped",[34030]],[[63898,63898],"mapped",[36899]],[[63899,63899],"mapped",[37706]],[[63900,63900],"mapped",[21015]],[[63901,63901],"mapped",[21155]],[[63902,63902],"mapped",[21693]],[[63903,63903],"mapped",[28872]],[[63904,63904],"mapped",[35010]],[[63905,63905],"mapped",[35498]],[[63906,63906],"mapped",[24265]],[[63907,63907],"mapped",[24565]],[[63908,63908],"mapped",[25467]],[[63909,63909],"mapped",[27566]],[[63910,63910],"mapped",[31806]],[[63911,63911],"mapped",[29557]],[[63912,63912],"mapped",[20196]],[[63913,63913],"mapped",[22265]],[[63914,63914],"mapped",[23527]],[[63915,63915],"mapped",[23994]],[[63916,63916],"mapped",[24604]],[[63917,63917],"mapped",[29618]],[[63918,63918],"mapped",[29801]],[[63919,63919],"mapped",[32666]],[[63920,63920],"mapped",[32838]],[[63921,63921],"mapped",[37428]],[[63922,63922],"mapped",[38646]],[[63923,63923],"mapped",[38728]],[[63924,63924],"mapped",[38936]],[[63925,63925],"mapped",[20363]],[[63926,63926],"mapped",[31150]],[[63927,63927],"mapped",[37300]],[[63928,63928],"mapped",[38584]],[[63929,63929],"mapped",[24801]],[[63930,63930],"mapped",[20102]],[[63931,63931],"mapped",[20698]],[[63932,63932],"mapped",[23534]],[[63933,63933],"mapped",[23615]],[[63934,63934],"mapped",[26009]],[[63935,63935],"mapped",[27138]],[[63936,63936],"mapped",[29134]],[[63937,63937],"mapped",[30274]],[[63938,63938],"mapped",[34044]],[[63939,63939],"mapped",[36988]],[[63940,63940],"mapped",[40845]],[[63941,63941],"mapped",[26248]],[[63942,63942],"mapped",[38446]],[[63943,63943],"mapped",[21129]],[[63944,63944],"mapped",[26491]],[[63945,63945],"mapped",[26611]],[[63946,63946],"mapped",[27969]],[[63947,63947],"mapped",[28316]],[[63948,63948],"mapped",[29705]],[[63949,63949],"mapped",[30041]],[[63950,63950],"mapped",[30827]],[[63951,63951],"mapped",[32016]],[[63952,63952],"mapped",[39006]],[[63953,63953],"mapped",[20845]],[[63954,63954],"mapped",[25134]],[[63955,63955],"mapped",[38520]],[[63956,63956],"mapped",[20523]],[[63957,63957],"mapped",[23833]],[[63958,63958],"mapped",[28138]],[[63959,63959],"mapped",[36650]],[[63960,63960],"mapped",[24459]],[[63961,63961],"mapped",[24900]],[[63962,63962],"mapped",[26647]],[[63963,63963],"mapped",[29575]],[[63964,63964],"mapped",[38534]],[[63965,63965],"mapped",[21033]],[[63966,63966],"mapped",[21519]],[[63967,63967],"mapped",[23653]],[[63968,63968],"mapped",[26131]],[[63969,63969],"mapped",[26446]],[[63970,63970],"mapped",[26792]],[[63971,63971],"mapped",[27877]],[[63972,63972],"mapped",[29702]],[[63973,63973],"mapped",[30178]],[[63974,63974],"mapped",[32633]],[[63975,63975],"mapped",[35023]],[[63976,63976],"mapped",[35041]],[[63977,63977],"mapped",[37324]],[[63978,63978],"mapped",[38626]],[[63979,63979],"mapped",[21311]],[[63980,63980],"mapped",[28346]],[[63981,63981],"mapped",[21533]],[[63982,63982],"mapped",[29136]],[[63983,63983],"mapped",[29848]],[[63984,63984],"mapped",[34298]],[[63985,63985],"mapped",[38563]],[[63986,63986],"mapped",[40023]],[[63987,63987],"mapped",[40607]],[[63988,63988],"mapped",[26519]],[[63989,63989],"mapped",[28107]],[[63990,63990],"mapped",[33256]],[[63991,63991],"mapped",[31435]],[[63992,63992],"mapped",[31520]],[[63993,63993],"mapped",[31890]],[[63994,63994],"mapped",[29376]],[[63995,63995],"mapped",[28825]],[[63996,63996],"mapped",[35672]],[[63997,63997],"mapped",[20160]],[[63998,63998],"mapped",[33590]],[[63999,63999],"mapped",[21050]],[[64e3,64e3],"mapped",[20999]],[[64001,64001],"mapped",[24230]],[[64002,64002],"mapped",[25299]],[[64003,64003],"mapped",[31958]],[[64004,64004],"mapped",[23429]],[[64005,64005],"mapped",[27934]],[[64006,64006],"mapped",[26292]],[[64007,64007],"mapped",[36667]],[[64008,64008],"mapped",[34892]],[[64009,64009],"mapped",[38477]],[[64010,64010],"mapped",[35211]],[[64011,64011],"mapped",[24275]],[[64012,64012],"mapped",[20800]],[[64013,64013],"mapped",[21952]],[[64014,64015],"valid"],[[64016,64016],"mapped",[22618]],[[64017,64017],"valid"],[[64018,64018],"mapped",[26228]],[[64019,64020],"valid"],[[64021,64021],"mapped",[20958]],[[64022,64022],"mapped",[29482]],[[64023,64023],"mapped",[30410]],[[64024,64024],"mapped",[31036]],[[64025,64025],"mapped",[31070]],[[64026,64026],"mapped",[31077]],[[64027,64027],"mapped",[31119]],[[64028,64028],"mapped",[38742]],[[64029,64029],"mapped",[31934]],[[64030,64030],"mapped",[32701]],[[64031,64031],"valid"],[[64032,64032],"mapped",[34322]],[[64033,64033],"valid"],[[64034,64034],"mapped",[35576]],[[64035,64036],"valid"],[[64037,64037],"mapped",[36920]],[[64038,64038],"mapped",[37117]],[[64039,64041],"valid"],[[64042,64042],"mapped",[39151]],[[64043,64043],"mapped",[39164]],[[64044,64044],"mapped",[39208]],[[64045,64045],"mapped",[40372]],[[64046,64046],"mapped",[37086]],[[64047,64047],"mapped",[38583]],[[64048,64048],"mapped",[20398]],[[64049,64049],"mapped",[20711]],[[64050,64050],"mapped",[20813]],[[64051,64051],"mapped",[21193]],[[64052,64052],"mapped",[21220]],[[64053,64053],"mapped",[21329]],[[64054,64054],"mapped",[21917]],[[64055,64055],"mapped",[22022]],[[64056,64056],"mapped",[22120]],[[64057,64057],"mapped",[22592]],[[64058,64058],"mapped",[22696]],[[64059,64059],"mapped",[23652]],[[64060,64060],"mapped",[23662]],[[64061,64061],"mapped",[24724]],[[64062,64062],"mapped",[24936]],[[64063,64063],"mapped",[24974]],[[64064,64064],"mapped",[25074]],[[64065,64065],"mapped",[25935]],[[64066,64066],"mapped",[26082]],[[64067,64067],"mapped",[26257]],[[64068,64068],"mapped",[26757]],[[64069,64069],"mapped",[28023]],[[64070,64070],"mapped",[28186]],[[64071,64071],"mapped",[28450]],[[64072,64072],"mapped",[29038]],[[64073,64073],"mapped",[29227]],[[64074,64074],"mapped",[29730]],[[64075,64075],"mapped",[30865]],[[64076,64076],"mapped",[31038]],[[64077,64077],"mapped",[31049]],[[64078,64078],"mapped",[31048]],[[64079,64079],"mapped",[31056]],[[64080,64080],"mapped",[31062]],[[64081,64081],"mapped",[31069]],[[64082,64082],"mapped",[31117]],[[64083,64083],"mapped",[31118]],[[64084,64084],"mapped",[31296]],[[64085,64085],"mapped",[31361]],[[64086,64086],"mapped",[31680]],[[64087,64087],"mapped",[32244]],[[64088,64088],"mapped",[32265]],[[64089,64089],"mapped",[32321]],[[64090,64090],"mapped",[32626]],[[64091,64091],"mapped",[32773]],[[64092,64092],"mapped",[33261]],[[64093,64094],"mapped",[33401]],[[64095,64095],"mapped",[33879]],[[64096,64096],"mapped",[35088]],[[64097,64097],"mapped",[35222]],[[64098,64098],"mapped",[35585]],[[64099,64099],"mapped",[35641]],[[64100,64100],"mapped",[36051]],[[64101,64101],"mapped",[36104]],[[64102,64102],"mapped",[36790]],[[64103,64103],"mapped",[36920]],[[64104,64104],"mapped",[38627]],[[64105,64105],"mapped",[38911]],[[64106,64106],"mapped",[38971]],[[64107,64107],"mapped",[24693]],[[64108,64108],"mapped",[148206]],[[64109,64109],"mapped",[33304]],[[64110,64111],"disallowed"],[[64112,64112],"mapped",[20006]],[[64113,64113],"mapped",[20917]],[[64114,64114],"mapped",[20840]],[[64115,64115],"mapped",[20352]],[[64116,64116],"mapped",[20805]],[[64117,64117],"mapped",[20864]],[[64118,64118],"mapped",[21191]],[[64119,64119],"mapped",[21242]],[[64120,64120],"mapped",[21917]],[[64121,64121],"mapped",[21845]],[[64122,64122],"mapped",[21913]],[[64123,64123],"mapped",[21986]],[[64124,64124],"mapped",[22618]],[[64125,64125],"mapped",[22707]],[[64126,64126],"mapped",[22852]],[[64127,64127],"mapped",[22868]],[[64128,64128],"mapped",[23138]],[[64129,64129],"mapped",[23336]],[[64130,64130],"mapped",[24274]],[[64131,64131],"mapped",[24281]],[[64132,64132],"mapped",[24425]],[[64133,64133],"mapped",[24493]],[[64134,64134],"mapped",[24792]],[[64135,64135],"mapped",[24910]],[[64136,64136],"mapped",[24840]],[[64137,64137],"mapped",[24974]],[[64138,64138],"mapped",[24928]],[[64139,64139],"mapped",[25074]],[[64140,64140],"mapped",[25140]],[[64141,64141],"mapped",[25540]],[[64142,64142],"mapped",[25628]],[[64143,64143],"mapped",[25682]],[[64144,64144],"mapped",[25942]],[[64145,64145],"mapped",[26228]],[[64146,64146],"mapped",[26391]],[[64147,64147],"mapped",[26395]],[[64148,64148],"mapped",[26454]],[[64149,64149],"mapped",[27513]],[[64150,64150],"mapped",[27578]],[[64151,64151],"mapped",[27969]],[[64152,64152],"mapped",[28379]],[[64153,64153],"mapped",[28363]],[[64154,64154],"mapped",[28450]],[[64155,64155],"mapped",[28702]],[[64156,64156],"mapped",[29038]],[[64157,64157],"mapped",[30631]],[[64158,64158],"mapped",[29237]],[[64159,64159],"mapped",[29359]],[[64160,64160],"mapped",[29482]],[[64161,64161],"mapped",[29809]],[[64162,64162],"mapped",[29958]],[[64163,64163],"mapped",[30011]],[[64164,64164],"mapped",[30237]],[[64165,64165],"mapped",[30239]],[[64166,64166],"mapped",[30410]],[[64167,64167],"mapped",[30427]],[[64168,64168],"mapped",[30452]],[[64169,64169],"mapped",[30538]],[[64170,64170],"mapped",[30528]],[[64171,64171],"mapped",[30924]],[[64172,64172],"mapped",[31409]],[[64173,64173],"mapped",[31680]],[[64174,64174],"mapped",[31867]],[[64175,64175],"mapped",[32091]],[[64176,64176],"mapped",[32244]],[[64177,64177],"mapped",[32574]],[[64178,64178],"mapped",[32773]],[[64179,64179],"mapped",[33618]],[[64180,64180],"mapped",[33775]],[[64181,64181],"mapped",[34681]],[[64182,64182],"mapped",[35137]],[[64183,64183],"mapped",[35206]],[[64184,64184],"mapped",[35222]],[[64185,64185],"mapped",[35519]],[[64186,64186],"mapped",[35576]],[[64187,64187],"mapped",[35531]],[[64188,64188],"mapped",[35585]],[[64189,64189],"mapped",[35582]],[[64190,64190],"mapped",[35565]],[[64191,64191],"mapped",[35641]],[[64192,64192],"mapped",[35722]],[[64193,64193],"mapped",[36104]],[[64194,64194],"mapped",[36664]],[[64195,64195],"mapped",[36978]],[[64196,64196],"mapped",[37273]],[[64197,64197],"mapped",[37494]],[[64198,64198],"mapped",[38524]],[[64199,64199],"mapped",[38627]],[[64200,64200],"mapped",[38742]],[[64201,64201],"mapped",[38875]],[[64202,64202],"mapped",[38911]],[[64203,64203],"mapped",[38923]],[[64204,64204],"mapped",[38971]],[[64205,64205],"mapped",[39698]],[[64206,64206],"mapped",[40860]],[[64207,64207],"mapped",[141386]],[[64208,64208],"mapped",[141380]],[[64209,64209],"mapped",[144341]],[[64210,64210],"mapped",[15261]],[[64211,64211],"mapped",[16408]],[[64212,64212],"mapped",[16441]],[[64213,64213],"mapped",[152137]],[[64214,64214],"mapped",[154832]],[[64215,64215],"mapped",[163539]],[[64216,64216],"mapped",[40771]],[[64217,64217],"mapped",[40846]],[[64218,64255],"disallowed"],[[64256,64256],"mapped",[102,102]],[[64257,64257],"mapped",[102,105]],[[64258,64258],"mapped",[102,108]],[[64259,64259],"mapped",[102,102,105]],[[64260,64260],"mapped",[102,102,108]],[[64261,64262],"mapped",[115,116]],[[64263,64274],"disallowed"],[[64275,64275],"mapped",[1396,1398]],[[64276,64276],"mapped",[1396,1381]],[[64277,64277],"mapped",[1396,1387]],[[64278,64278],"mapped",[1406,1398]],[[64279,64279],"mapped",[1396,1389]],[[64280,64284],"disallowed"],[[64285,64285],"mapped",[1497,1460]],[[64286,64286],"valid"],[[64287,64287],"mapped",[1522,1463]],[[64288,64288],"mapped",[1506]],[[64289,64289],"mapped",[1488]],[[64290,64290],"mapped",[1491]],[[64291,64291],"mapped",[1492]],[[64292,64292],"mapped",[1499]],[[64293,64293],"mapped",[1500]],[[64294,64294],"mapped",[1501]],[[64295,64295],"mapped",[1512]],[[64296,64296],"mapped",[1514]],[[64297,64297],"disallowed_STD3_mapped",[43]],[[64298,64298],"mapped",[1513,1473]],[[64299,64299],"mapped",[1513,1474]],[[64300,64300],"mapped",[1513,1468,1473]],[[64301,64301],"mapped",[1513,1468,1474]],[[64302,64302],"mapped",[1488,1463]],[[64303,64303],"mapped",[1488,1464]],[[64304,64304],"mapped",[1488,1468]],[[64305,64305],"mapped",[1489,1468]],[[64306,64306],"mapped",[1490,1468]],[[64307,64307],"mapped",[1491,1468]],[[64308,64308],"mapped",[1492,1468]],[[64309,64309],"mapped",[1493,1468]],[[64310,64310],"mapped",[1494,1468]],[[64311,64311],"disallowed"],[[64312,64312],"mapped",[1496,1468]],[[64313,64313],"mapped",[1497,1468]],[[64314,64314],"mapped",[1498,1468]],[[64315,64315],"mapped",[1499,1468]],[[64316,64316],"mapped",[1500,1468]],[[64317,64317],"disallowed"],[[64318,64318],"mapped",[1502,1468]],[[64319,64319],"disallowed"],[[64320,64320],"mapped",[1504,1468]],[[64321,64321],"mapped",[1505,1468]],[[64322,64322],"disallowed"],[[64323,64323],"mapped",[1507,1468]],[[64324,64324],"mapped",[1508,1468]],[[64325,64325],"disallowed"],[[64326,64326],"mapped",[1510,1468]],[[64327,64327],"mapped",[1511,1468]],[[64328,64328],"mapped",[1512,1468]],[[64329,64329],"mapped",[1513,1468]],[[64330,64330],"mapped",[1514,1468]],[[64331,64331],"mapped",[1493,1465]],[[64332,64332],"mapped",[1489,1471]],[[64333,64333],"mapped",[1499,1471]],[[64334,64334],"mapped",[1508,1471]],[[64335,64335],"mapped",[1488,1500]],[[64336,64337],"mapped",[1649]],[[64338,64341],"mapped",[1659]],[[64342,64345],"mapped",[1662]],[[64346,64349],"mapped",[1664]],[[64350,64353],"mapped",[1658]],[[64354,64357],"mapped",[1663]],[[64358,64361],"mapped",[1657]],[[64362,64365],"mapped",[1700]],[[64366,64369],"mapped",[1702]],[[64370,64373],"mapped",[1668]],[[64374,64377],"mapped",[1667]],[[64378,64381],"mapped",[1670]],[[64382,64385],"mapped",[1671]],[[64386,64387],"mapped",[1677]],[[64388,64389],"mapped",[1676]],[[64390,64391],"mapped",[1678]],[[64392,64393],"mapped",[1672]],[[64394,64395],"mapped",[1688]],[[64396,64397],"mapped",[1681]],[[64398,64401],"mapped",[1705]],[[64402,64405],"mapped",[1711]],[[64406,64409],"mapped",[1715]],[[64410,64413],"mapped",[1713]],[[64414,64415],"mapped",[1722]],[[64416,64419],"mapped",[1723]],[[64420,64421],"mapped",[1728]],[[64422,64425],"mapped",[1729]],[[64426,64429],"mapped",[1726]],[[64430,64431],"mapped",[1746]],[[64432,64433],"mapped",[1747]],[[64434,64449],"valid",[],"NV8"],[[64450,64466],"disallowed"],[[64467,64470],"mapped",[1709]],[[64471,64472],"mapped",[1735]],[[64473,64474],"mapped",[1734]],[[64475,64476],"mapped",[1736]],[[64477,64477],"mapped",[1735,1652]],[[64478,64479],"mapped",[1739]],[[64480,64481],"mapped",[1733]],[[64482,64483],"mapped",[1737]],[[64484,64487],"mapped",[1744]],[[64488,64489],"mapped",[1609]],[[64490,64491],"mapped",[1574,1575]],[[64492,64493],"mapped",[1574,1749]],[[64494,64495],"mapped",[1574,1608]],[[64496,64497],"mapped",[1574,1735]],[[64498,64499],"mapped",[1574,1734]],[[64500,64501],"mapped",[1574,1736]],[[64502,64504],"mapped",[1574,1744]],[[64505,64507],"mapped",[1574,1609]],[[64508,64511],"mapped",[1740]],[[64512,64512],"mapped",[1574,1580]],[[64513,64513],"mapped",[1574,1581]],[[64514,64514],"mapped",[1574,1605]],[[64515,64515],"mapped",[1574,1609]],[[64516,64516],"mapped",[1574,1610]],[[64517,64517],"mapped",[1576,1580]],[[64518,64518],"mapped",[1576,1581]],[[64519,64519],"mapped",[1576,1582]],[[64520,64520],"mapped",[1576,1605]],[[64521,64521],"mapped",[1576,1609]],[[64522,64522],"mapped",[1576,1610]],[[64523,64523],"mapped",[1578,1580]],[[64524,64524],"mapped",[1578,1581]],[[64525,64525],"mapped",[1578,1582]],[[64526,64526],"mapped",[1578,1605]],[[64527,64527],"mapped",[1578,1609]],[[64528,64528],"mapped",[1578,1610]],[[64529,64529],"mapped",[1579,1580]],[[64530,64530],"mapped",[1579,1605]],[[64531,64531],"mapped",[1579,1609]],[[64532,64532],"mapped",[1579,1610]],[[64533,64533],"mapped",[1580,1581]],[[64534,64534],"mapped",[1580,1605]],[[64535,64535],"mapped",[1581,1580]],[[64536,64536],"mapped",[1581,1605]],[[64537,64537],"mapped",[1582,1580]],[[64538,64538],"mapped",[1582,1581]],[[64539,64539],"mapped",[1582,1605]],[[64540,64540],"mapped",[1587,1580]],[[64541,64541],"mapped",[1587,1581]],[[64542,64542],"mapped",[1587,1582]],[[64543,64543],"mapped",[1587,1605]],[[64544,64544],"mapped",[1589,1581]],[[64545,64545],"mapped",[1589,1605]],[[64546,64546],"mapped",[1590,1580]],[[64547,64547],"mapped",[1590,1581]],[[64548,64548],"mapped",[1590,1582]],[[64549,64549],"mapped",[1590,1605]],[[64550,64550],"mapped",[1591,1581]],[[64551,64551],"mapped",[1591,1605]],[[64552,64552],"mapped",[1592,1605]],[[64553,64553],"mapped",[1593,1580]],[[64554,64554],"mapped",[1593,1605]],[[64555,64555],"mapped",[1594,1580]],[[64556,64556],"mapped",[1594,1605]],[[64557,64557],"mapped",[1601,1580]],[[64558,64558],"mapped",[1601,1581]],[[64559,64559],"mapped",[1601,1582]],[[64560,64560],"mapped",[1601,1605]],[[64561,64561],"mapped",[1601,1609]],[[64562,64562],"mapped",[1601,1610]],[[64563,64563],"mapped",[1602,1581]],[[64564,64564],"mapped",[1602,1605]],[[64565,64565],"mapped",[1602,1609]],[[64566,64566],"mapped",[1602,1610]],[[64567,64567],"mapped",[1603,1575]],[[64568,64568],"mapped",[1603,1580]],[[64569,64569],"mapped",[1603,1581]],[[64570,64570],"mapped",[1603,1582]],[[64571,64571],"mapped",[1603,1604]],[[64572,64572],"mapped",[1603,1605]],[[64573,64573],"mapped",[1603,1609]],[[64574,64574],"mapped",[1603,1610]],[[64575,64575],"mapped",[1604,1580]],[[64576,64576],"mapped",[1604,1581]],[[64577,64577],"mapped",[1604,1582]],[[64578,64578],"mapped",[1604,1605]],[[64579,64579],"mapped",[1604,1609]],[[64580,64580],"mapped",[1604,1610]],[[64581,64581],"mapped",[1605,1580]],[[64582,64582],"mapped",[1605,1581]],[[64583,64583],"mapped",[1605,1582]],[[64584,64584],"mapped",[1605,1605]],[[64585,64585],"mapped",[1605,1609]],[[64586,64586],"mapped",[1605,1610]],[[64587,64587],"mapped",[1606,1580]],[[64588,64588],"mapped",[1606,1581]],[[64589,64589],"mapped",[1606,1582]],[[64590,64590],"mapped",[1606,1605]],[[64591,64591],"mapped",[1606,1609]],[[64592,64592],"mapped",[1606,1610]],[[64593,64593],"mapped",[1607,1580]],[[64594,64594],"mapped",[1607,1605]],[[64595,64595],"mapped",[1607,1609]],[[64596,64596],"mapped",[1607,1610]],[[64597,64597],"mapped",[1610,1580]],[[64598,64598],"mapped",[1610,1581]],[[64599,64599],"mapped",[1610,1582]],[[64600,64600],"mapped",[1610,1605]],[[64601,64601],"mapped",[1610,1609]],[[64602,64602],"mapped",[1610,1610]],[[64603,64603],"mapped",[1584,1648]],[[64604,64604],"mapped",[1585,1648]],[[64605,64605],"mapped",[1609,1648]],[[64606,64606],"disallowed_STD3_mapped",[32,1612,1617]],[[64607,64607],"disallowed_STD3_mapped",[32,1613,1617]],[[64608,64608],"disallowed_STD3_mapped",[32,1614,1617]],[[64609,64609],"disallowed_STD3_mapped",[32,1615,1617]],[[64610,64610],"disallowed_STD3_mapped",[32,1616,1617]],[[64611,64611],"disallowed_STD3_mapped",[32,1617,1648]],[[64612,64612],"mapped",[1574,1585]],[[64613,64613],"mapped",[1574,1586]],[[64614,64614],"mapped",[1574,1605]],[[64615,64615],"mapped",[1574,1606]],[[64616,64616],"mapped",[1574,1609]],[[64617,64617],"mapped",[1574,1610]],[[64618,64618],"mapped",[1576,1585]],[[64619,64619],"mapped",[1576,1586]],[[64620,64620],"mapped",[1576,1605]],[[64621,64621],"mapped",[1576,1606]],[[64622,64622],"mapped",[1576,1609]],[[64623,64623],"mapped",[1576,1610]],[[64624,64624],"mapped",[1578,1585]],[[64625,64625],"mapped",[1578,1586]],[[64626,64626],"mapped",[1578,1605]],[[64627,64627],"mapped",[1578,1606]],[[64628,64628],"mapped",[1578,1609]],[[64629,64629],"mapped",[1578,1610]],[[64630,64630],"mapped",[1579,1585]],[[64631,64631],"mapped",[1579,1586]],[[64632,64632],"mapped",[1579,1605]],[[64633,64633],"mapped",[1579,1606]],[[64634,64634],"mapped",[1579,1609]],[[64635,64635],"mapped",[1579,1610]],[[64636,64636],"mapped",[1601,1609]],[[64637,64637],"mapped",[1601,1610]],[[64638,64638],"mapped",[1602,1609]],[[64639,64639],"mapped",[1602,1610]],[[64640,64640],"mapped",[1603,1575]],[[64641,64641],"mapped",[1603,1604]],[[64642,64642],"mapped",[1603,1605]],[[64643,64643],"mapped",[1603,1609]],[[64644,64644],"mapped",[1603,1610]],[[64645,64645],"mapped",[1604,1605]],[[64646,64646],"mapped",[1604,1609]],[[64647,64647],"mapped",[1604,1610]],[[64648,64648],"mapped",[1605,1575]],[[64649,64649],"mapped",[1605,1605]],[[64650,64650],"mapped",[1606,1585]],[[64651,64651],"mapped",[1606,1586]],[[64652,64652],"mapped",[1606,1605]],[[64653,64653],"mapped",[1606,1606]],[[64654,64654],"mapped",[1606,1609]],[[64655,64655],"mapped",[1606,1610]],[[64656,64656],"mapped",[1609,1648]],[[64657,64657],"mapped",[1610,1585]],[[64658,64658],"mapped",[1610,1586]],[[64659,64659],"mapped",[1610,1605]],[[64660,64660],"mapped",[1610,1606]],[[64661,64661],"mapped",[1610,1609]],[[64662,64662],"mapped",[1610,1610]],[[64663,64663],"mapped",[1574,1580]],[[64664,64664],"mapped",[1574,1581]],[[64665,64665],"mapped",[1574,1582]],[[64666,64666],"mapped",[1574,1605]],[[64667,64667],"mapped",[1574,1607]],[[64668,64668],"mapped",[1576,1580]],[[64669,64669],"mapped",[1576,1581]],[[64670,64670],"mapped",[1576,1582]],[[64671,64671],"mapped",[1576,1605]],[[64672,64672],"mapped",[1576,1607]],[[64673,64673],"mapped",[1578,1580]],[[64674,64674],"mapped",[1578,1581]],[[64675,64675],"mapped",[1578,1582]],[[64676,64676],"mapped",[1578,1605]],[[64677,64677],"mapped",[1578,1607]],[[64678,64678],"mapped",[1579,1605]],[[64679,64679],"mapped",[1580,1581]],[[64680,64680],"mapped",[1580,1605]],[[64681,64681],"mapped",[1581,1580]],[[64682,64682],"mapped",[1581,1605]],[[64683,64683],"mapped",[1582,1580]],[[64684,64684],"mapped",[1582,1605]],[[64685,64685],"mapped",[1587,1580]],[[64686,64686],"mapped",[1587,1581]],[[64687,64687],"mapped",[1587,1582]],[[64688,64688],"mapped",[1587,1605]],[[64689,64689],"mapped",[1589,1581]],[[64690,64690],"mapped",[1589,1582]],[[64691,64691],"mapped",[1589,1605]],[[64692,64692],"mapped",[1590,1580]],[[64693,64693],"mapped",[1590,1581]],[[64694,64694],"mapped",[1590,1582]],[[64695,64695],"mapped",[1590,1605]],[[64696,64696],"mapped",[1591,1581]],[[64697,64697],"mapped",[1592,1605]],[[64698,64698],"mapped",[1593,1580]],[[64699,64699],"mapped",[1593,1605]],[[64700,64700],"mapped",[1594,1580]],[[64701,64701],"mapped",[1594,1605]],[[64702,64702],"mapped",[1601,1580]],[[64703,64703],"mapped",[1601,1581]],[[64704,64704],"mapped",[1601,1582]],[[64705,64705],"mapped",[1601,1605]],[[64706,64706],"mapped",[1602,1581]],[[64707,64707],"mapped",[1602,1605]],[[64708,64708],"mapped",[1603,1580]],[[64709,64709],"mapped",[1603,1581]],[[64710,64710],"mapped",[1603,1582]],[[64711,64711],"mapped",[1603,1604]],[[64712,64712],"mapped",[1603,1605]],[[64713,64713],"mapped",[1604,1580]],[[64714,64714],"mapped",[1604,1581]],[[64715,64715],"mapped",[1604,1582]],[[64716,64716],"mapped",[1604,1605]],[[64717,64717],"mapped",[1604,1607]],[[64718,64718],"mapped",[1605,1580]],[[64719,64719],"mapped",[1605,1581]],[[64720,64720],"mapped",[1605,1582]],[[64721,64721],"mapped",[1605,1605]],[[64722,64722],"mapped",[1606,1580]],[[64723,64723],"mapped",[1606,1581]],[[64724,64724],"mapped",[1606,1582]],[[64725,64725],"mapped",[1606,1605]],[[64726,64726],"mapped",[1606,1607]],[[64727,64727],"mapped",[1607,1580]],[[64728,64728],"mapped",[1607,1605]],[[64729,64729],"mapped",[1607,1648]],[[64730,64730],"mapped",[1610,1580]],[[64731,64731],"mapped",[1610,1581]],[[64732,64732],"mapped",[1610,1582]],[[64733,64733],"mapped",[1610,1605]],[[64734,64734],"mapped",[1610,1607]],[[64735,64735],"mapped",[1574,1605]],[[64736,64736],"mapped",[1574,1607]],[[64737,64737],"mapped",[1576,1605]],[[64738,64738],"mapped",[1576,1607]],[[64739,64739],"mapped",[1578,1605]],[[64740,64740],"mapped",[1578,1607]],[[64741,64741],"mapped",[1579,1605]],[[64742,64742],"mapped",[1579,1607]],[[64743,64743],"mapped",[1587,1605]],[[64744,64744],"mapped",[1587,1607]],[[64745,64745],"mapped",[1588,1605]],[[64746,64746],"mapped",[1588,1607]],[[64747,64747],"mapped",[1603,1604]],[[64748,64748],"mapped",[1603,1605]],[[64749,64749],"mapped",[1604,1605]],[[64750,64750],"mapped",[1606,1605]],[[64751,64751],"mapped",[1606,1607]],[[64752,64752],"mapped",[1610,1605]],[[64753,64753],"mapped",[1610,1607]],[[64754,64754],"mapped",[1600,1614,1617]],[[64755,64755],"mapped",[1600,1615,1617]],[[64756,64756],"mapped",[1600,1616,1617]],[[64757,64757],"mapped",[1591,1609]],[[64758,64758],"mapped",[1591,1610]],[[64759,64759],"mapped",[1593,1609]],[[64760,64760],"mapped",[1593,1610]],[[64761,64761],"mapped",[1594,1609]],[[64762,64762],"mapped",[1594,1610]],[[64763,64763],"mapped",[1587,1609]],[[64764,64764],"mapped",[1587,1610]],[[64765,64765],"mapped",[1588,1609]],[[64766,64766],"mapped",[1588,1610]],[[64767,64767],"mapped",[1581,1609]],[[64768,64768],"mapped",[1581,1610]],[[64769,64769],"mapped",[1580,1609]],[[64770,64770],"mapped",[1580,1610]],[[64771,64771],"mapped",[1582,1609]],[[64772,64772],"mapped",[1582,1610]],[[64773,64773],"mapped",[1589,1609]],[[64774,64774],"mapped",[1589,1610]],[[64775,64775],"mapped",[1590,1609]],[[64776,64776],"mapped",[1590,1610]],[[64777,64777],"mapped",[1588,1580]],[[64778,64778],"mapped",[1588,1581]],[[64779,64779],"mapped",[1588,1582]],[[64780,64780],"mapped",[1588,1605]],[[64781,64781],"mapped",[1588,1585]],[[64782,64782],"mapped",[1587,1585]],[[64783,64783],"mapped",[1589,1585]],[[64784,64784],"mapped",[1590,1585]],[[64785,64785],"mapped",[1591,1609]],[[64786,64786],"mapped",[1591,1610]],[[64787,64787],"mapped",[1593,1609]],[[64788,64788],"mapped",[1593,1610]],[[64789,64789],"mapped",[1594,1609]],[[64790,64790],"mapped",[1594,1610]],[[64791,64791],"mapped",[1587,1609]],[[64792,64792],"mapped",[1587,1610]],[[64793,64793],"mapped",[1588,1609]],[[64794,64794],"mapped",[1588,1610]],[[64795,64795],"mapped",[1581,1609]],[[64796,64796],"mapped",[1581,1610]],[[64797,64797],"mapped",[1580,1609]],[[64798,64798],"mapped",[1580,1610]],[[64799,64799],"mapped",[1582,1609]],[[64800,64800],"mapped",[1582,1610]],[[64801,64801],"mapped",[1589,1609]],[[64802,64802],"mapped",[1589,1610]],[[64803,64803],"mapped",[1590,1609]],[[64804,64804],"mapped",[1590,1610]],[[64805,64805],"mapped",[1588,1580]],[[64806,64806],"mapped",[1588,1581]],[[64807,64807],"mapped",[1588,1582]],[[64808,64808],"mapped",[1588,1605]],[[64809,64809],"mapped",[1588,1585]],[[64810,64810],"mapped",[1587,1585]],[[64811,64811],"mapped",[1589,1585]],[[64812,64812],"mapped",[1590,1585]],[[64813,64813],"mapped",[1588,1580]],[[64814,64814],"mapped",[1588,1581]],[[64815,64815],"mapped",[1588,1582]],[[64816,64816],"mapped",[1588,1605]],[[64817,64817],"mapped",[1587,1607]],[[64818,64818],"mapped",[1588,1607]],[[64819,64819],"mapped",[1591,1605]],[[64820,64820],"mapped",[1587,1580]],[[64821,64821],"mapped",[1587,1581]],[[64822,64822],"mapped",[1587,1582]],[[64823,64823],"mapped",[1588,1580]],[[64824,64824],"mapped",[1588,1581]],[[64825,64825],"mapped",[1588,1582]],[[64826,64826],"mapped",[1591,1605]],[[64827,64827],"mapped",[1592,1605]],[[64828,64829],"mapped",[1575,1611]],[[64830,64831],"valid",[],"NV8"],[[64832,64847],"disallowed"],[[64848,64848],"mapped",[1578,1580,1605]],[[64849,64850],"mapped",[1578,1581,1580]],[[64851,64851],"mapped",[1578,1581,1605]],[[64852,64852],"mapped",[1578,1582,1605]],[[64853,64853],"mapped",[1578,1605,1580]],[[64854,64854],"mapped",[1578,1605,1581]],[[64855,64855],"mapped",[1578,1605,1582]],[[64856,64857],"mapped",[1580,1605,1581]],[[64858,64858],"mapped",[1581,1605,1610]],[[64859,64859],"mapped",[1581,1605,1609]],[[64860,64860],"mapped",[1587,1581,1580]],[[64861,64861],"mapped",[1587,1580,1581]],[[64862,64862],"mapped",[1587,1580,1609]],[[64863,64864],"mapped",[1587,1605,1581]],[[64865,64865],"mapped",[1587,1605,1580]],[[64866,64867],"mapped",[1587,1605,1605]],[[64868,64869],"mapped",[1589,1581,1581]],[[64870,64870],"mapped",[1589,1605,1605]],[[64871,64872],"mapped",[1588,1581,1605]],[[64873,64873],"mapped",[1588,1580,1610]],[[64874,64875],"mapped",[1588,1605,1582]],[[64876,64877],"mapped",[1588,1605,1605]],[[64878,64878],"mapped",[1590,1581,1609]],[[64879,64880],"mapped",[1590,1582,1605]],[[64881,64882],"mapped",[1591,1605,1581]],[[64883,64883],"mapped",[1591,1605,1605]],[[64884,64884],"mapped",[1591,1605,1610]],[[64885,64885],"mapped",[1593,1580,1605]],[[64886,64887],"mapped",[1593,1605,1605]],[[64888,64888],"mapped",[1593,1605,1609]],[[64889,64889],"mapped",[1594,1605,1605]],[[64890,64890],"mapped",[1594,1605,1610]],[[64891,64891],"mapped",[1594,1605,1609]],[[64892,64893],"mapped",[1601,1582,1605]],[[64894,64894],"mapped",[1602,1605,1581]],[[64895,64895],"mapped",[1602,1605,1605]],[[64896,64896],"mapped",[1604,1581,1605]],[[64897,64897],"mapped",[1604,1581,1610]],[[64898,64898],"mapped",[1604,1581,1609]],[[64899,64900],"mapped",[1604,1580,1580]],[[64901,64902],"mapped",[1604,1582,1605]],[[64903,64904],"mapped",[1604,1605,1581]],[[64905,64905],"mapped",[1605,1581,1580]],[[64906,64906],"mapped",[1605,1581,1605]],[[64907,64907],"mapped",[1605,1581,1610]],[[64908,64908],"mapped",[1605,1580,1581]],[[64909,64909],"mapped",[1605,1580,1605]],[[64910,64910],"mapped",[1605,1582,1580]],[[64911,64911],"mapped",[1605,1582,1605]],[[64912,64913],"disallowed"],[[64914,64914],"mapped",[1605,1580,1582]],[[64915,64915],"mapped",[1607,1605,1580]],[[64916,64916],"mapped",[1607,1605,1605]],[[64917,64917],"mapped",[1606,1581,1605]],[[64918,64918],"mapped",[1606,1581,1609]],[[64919,64920],"mapped",[1606,1580,1605]],[[64921,64921],"mapped",[1606,1580,1609]],[[64922,64922],"mapped",[1606,1605,1610]],[[64923,64923],"mapped",[1606,1605,1609]],[[64924,64925],"mapped",[1610,1605,1605]],[[64926,64926],"mapped",[1576,1582,1610]],[[64927,64927],"mapped",[1578,1580,1610]],[[64928,64928],"mapped",[1578,1580,1609]],[[64929,64929],"mapped",[1578,1582,1610]],[[64930,64930],"mapped",[1578,1582,1609]],[[64931,64931],"mapped",[1578,1605,1610]],[[64932,64932],"mapped",[1578,1605,1609]],[[64933,64933],"mapped",[1580,1605,1610]],[[64934,64934],"mapped",[1580,1581,1609]],[[64935,64935],"mapped",[1580,1605,1609]],[[64936,64936],"mapped",[1587,1582,1609]],[[64937,64937],"mapped",[1589,1581,1610]],[[64938,64938],"mapped",[1588,1581,1610]],[[64939,64939],"mapped",[1590,1581,1610]],[[64940,64940],"mapped",[1604,1580,1610]],[[64941,64941],"mapped",[1604,1605,1610]],[[64942,64942],"mapped",[1610,1581,1610]],[[64943,64943],"mapped",[1610,1580,1610]],[[64944,64944],"mapped",[1610,1605,1610]],[[64945,64945],"mapped",[1605,1605,1610]],[[64946,64946],"mapped",[1602,1605,1610]],[[64947,64947],"mapped",[1606,1581,1610]],[[64948,64948],"mapped",[1602,1605,1581]],[[64949,64949],"mapped",[1604,1581,1605]],[[64950,64950],"mapped",[1593,1605,1610]],[[64951,64951],"mapped",[1603,1605,1610]],[[64952,64952],"mapped",[1606,1580,1581]],[[64953,64953],"mapped",[1605,1582,1610]],[[64954,64954],"mapped",[1604,1580,1605]],[[64955,64955],"mapped",[1603,1605,1605]],[[64956,64956],"mapped",[1604,1580,1605]],[[64957,64957],"mapped",[1606,1580,1581]],[[64958,64958],"mapped",[1580,1581,1610]],[[64959,64959],"mapped",[1581,1580,1610]],[[64960,64960],"mapped",[1605,1580,1610]],[[64961,64961],"mapped",[1601,1605,1610]],[[64962,64962],"mapped",[1576,1581,1610]],[[64963,64963],"mapped",[1603,1605,1605]],[[64964,64964],"mapped",[1593,1580,1605]],[[64965,64965],"mapped",[1589,1605,1605]],[[64966,64966],"mapped",[1587,1582,1610]],[[64967,64967],"mapped",[1606,1580,1610]],[[64968,64975],"disallowed"],[[64976,65007],"disallowed"],[[65008,65008],"mapped",[1589,1604,1746]],[[65009,65009],"mapped",[1602,1604,1746]],[[65010,65010],"mapped",[1575,1604,1604,1607]],[[65011,65011],"mapped",[1575,1603,1576,1585]],[[65012,65012],"mapped",[1605,1581,1605,1583]],[[65013,65013],"mapped",[1589,1604,1593,1605]],[[65014,65014],"mapped",[1585,1587,1608,1604]],[[65015,65015],"mapped",[1593,1604,1610,1607]],[[65016,65016],"mapped",[1608,1587,1604,1605]],[[65017,65017],"mapped",[1589,1604,1609]],[[65018,65018],"disallowed_STD3_mapped",[1589,1604,1609,32,1575,1604,1604,1607,32,1593,1604,1610,1607,32,1608,1587,1604,1605]],[[65019,65019],"disallowed_STD3_mapped",[1580,1604,32,1580,1604,1575,1604,1607]],[[65020,65020],"mapped",[1585,1740,1575,1604]],[[65021,65021],"valid",[],"NV8"],[[65022,65023],"disallowed"],[[65024,65039],"ignored"],[[65040,65040],"disallowed_STD3_mapped",[44]],[[65041,65041],"mapped",[12289]],[[65042,65042],"disallowed"],[[65043,65043],"disallowed_STD3_mapped",[58]],[[65044,65044],"disallowed_STD3_mapped",[59]],[[65045,65045],"disallowed_STD3_mapped",[33]],[[65046,65046],"disallowed_STD3_mapped",[63]],[[65047,65047],"mapped",[12310]],[[65048,65048],"mapped",[12311]],[[65049,65049],"disallowed"],[[65050,65055],"disallowed"],[[65056,65059],"valid"],[[65060,65062],"valid"],[[65063,65069],"valid"],[[65070,65071],"valid"],[[65072,65072],"disallowed"],[[65073,65073],"mapped",[8212]],[[65074,65074],"mapped",[8211]],[[65075,65076],"disallowed_STD3_mapped",[95]],[[65077,65077],"disallowed_STD3_mapped",[40]],[[65078,65078],"disallowed_STD3_mapped",[41]],[[65079,65079],"disallowed_STD3_mapped",[123]],[[65080,65080],"disallowed_STD3_mapped",[125]],[[65081,65081],"mapped",[12308]],[[65082,65082],"mapped",[12309]],[[65083,65083],"mapped",[12304]],[[65084,65084],"mapped",[12305]],[[65085,65085],"mapped",[12298]],[[65086,65086],"mapped",[12299]],[[65087,65087],"mapped",[12296]],[[65088,65088],"mapped",[12297]],[[65089,65089],"mapped",[12300]],[[65090,65090],"mapped",[12301]],[[65091,65091],"mapped",[12302]],[[65092,65092],"mapped",[12303]],[[65093,65094],"valid",[],"NV8"],[[65095,65095],"disallowed_STD3_mapped",[91]],[[65096,65096],"disallowed_STD3_mapped",[93]],[[65097,65100],"disallowed_STD3_mapped",[32,773]],[[65101,65103],"disallowed_STD3_mapped",[95]],[[65104,65104],"disallowed_STD3_mapped",[44]],[[65105,65105],"mapped",[12289]],[[65106,65106],"disallowed"],[[65107,65107],"disallowed"],[[65108,65108],"disallowed_STD3_mapped",[59]],[[65109,65109],"disallowed_STD3_mapped",[58]],[[65110,65110],"disallowed_STD3_mapped",[63]],[[65111,65111],"disallowed_STD3_mapped",[33]],[[65112,65112],"mapped",[8212]],[[65113,65113],"disallowed_STD3_mapped",[40]],[[65114,65114],"disallowed_STD3_mapped",[41]],[[65115,65115],"disallowed_STD3_mapped",[123]],[[65116,65116],"disallowed_STD3_mapped",[125]],[[65117,65117],"mapped",[12308]],[[65118,65118],"mapped",[12309]],[[65119,65119],"disallowed_STD3_mapped",[35]],[[65120,65120],"disallowed_STD3_mapped",[38]],[[65121,65121],"disallowed_STD3_mapped",[42]],[[65122,65122],"disallowed_STD3_mapped",[43]],[[65123,65123],"mapped",[45]],[[65124,65124],"disallowed_STD3_mapped",[60]],[[65125,65125],"disallowed_STD3_mapped",[62]],[[65126,65126],"disallowed_STD3_mapped",[61]],[[65127,65127],"disallowed"],[[65128,65128],"disallowed_STD3_mapped",[92]],[[65129,65129],"disallowed_STD3_mapped",[36]],[[65130,65130],"disallowed_STD3_mapped",[37]],[[65131,65131],"disallowed_STD3_mapped",[64]],[[65132,65135],"disallowed"],[[65136,65136],"disallowed_STD3_mapped",[32,1611]],[[65137,65137],"mapped",[1600,1611]],[[65138,65138],"disallowed_STD3_mapped",[32,1612]],[[65139,65139],"valid"],[[65140,65140],"disallowed_STD3_mapped",[32,1613]],[[65141,65141],"disallowed"],[[65142,65142],"disallowed_STD3_mapped",[32,1614]],[[65143,65143],"mapped",[1600,1614]],[[65144,65144],"disallowed_STD3_mapped",[32,1615]],[[65145,65145],"mapped",[1600,1615]],[[65146,65146],"disallowed_STD3_mapped",[32,1616]],[[65147,65147],"mapped",[1600,1616]],[[65148,65148],"disallowed_STD3_mapped",[32,1617]],[[65149,65149],"mapped",[1600,1617]],[[65150,65150],"disallowed_STD3_mapped",[32,1618]],[[65151,65151],"mapped",[1600,1618]],[[65152,65152],"mapped",[1569]],[[65153,65154],"mapped",[1570]],[[65155,65156],"mapped",[1571]],[[65157,65158],"mapped",[1572]],[[65159,65160],"mapped",[1573]],[[65161,65164],"mapped",[1574]],[[65165,65166],"mapped",[1575]],[[65167,65170],"mapped",[1576]],[[65171,65172],"mapped",[1577]],[[65173,65176],"mapped",[1578]],[[65177,65180],"mapped",[1579]],[[65181,65184],"mapped",[1580]],[[65185,65188],"mapped",[1581]],[[65189,65192],"mapped",[1582]],[[65193,65194],"mapped",[1583]],[[65195,65196],"mapped",[1584]],[[65197,65198],"mapped",[1585]],[[65199,65200],"mapped",[1586]],[[65201,65204],"mapped",[1587]],[[65205,65208],"mapped",[1588]],[[65209,65212],"mapped",[1589]],[[65213,65216],"mapped",[1590]],[[65217,65220],"mapped",[1591]],[[65221,65224],"mapped",[1592]],[[65225,65228],"mapped",[1593]],[[65229,65232],"mapped",[1594]],[[65233,65236],"mapped",[1601]],[[65237,65240],"mapped",[1602]],[[65241,65244],"mapped",[1603]],[[65245,65248],"mapped",[1604]],[[65249,65252],"mapped",[1605]],[[65253,65256],"mapped",[1606]],[[65257,65260],"mapped",[1607]],[[65261,65262],"mapped",[1608]],[[65263,65264],"mapped",[1609]],[[65265,65268],"mapped",[1610]],[[65269,65270],"mapped",[1604,1570]],[[65271,65272],"mapped",[1604,1571]],[[65273,65274],"mapped",[1604,1573]],[[65275,65276],"mapped",[1604,1575]],[[65277,65278],"disallowed"],[[65279,65279],"ignored"],[[65280,65280],"disallowed"],[[65281,65281],"disallowed_STD3_mapped",[33]],[[65282,65282],"disallowed_STD3_mapped",[34]],[[65283,65283],"disallowed_STD3_mapped",[35]],[[65284,65284],"disallowed_STD3_mapped",[36]],[[65285,65285],"disallowed_STD3_mapped",[37]],[[65286,65286],"disallowed_STD3_mapped",[38]],[[65287,65287],"disallowed_STD3_mapped",[39]],[[65288,65288],"disallowed_STD3_mapped",[40]],[[65289,65289],"disallowed_STD3_mapped",[41]],[[65290,65290],"disallowed_STD3_mapped",[42]],[[65291,65291],"disallowed_STD3_mapped",[43]],[[65292,65292],"disallowed_STD3_mapped",[44]],[[65293,65293],"mapped",[45]],[[65294,65294],"mapped",[46]],[[65295,65295],"disallowed_STD3_mapped",[47]],[[65296,65296],"mapped",[48]],[[65297,65297],"mapped",[49]],[[65298,65298],"mapped",[50]],[[65299,65299],"mapped",[51]],[[65300,65300],"mapped",[52]],[[65301,65301],"mapped",[53]],[[65302,65302],"mapped",[54]],[[65303,65303],"mapped",[55]],[[65304,65304],"mapped",[56]],[[65305,65305],"mapped",[57]],[[65306,65306],"disallowed_STD3_mapped",[58]],[[65307,65307],"disallowed_STD3_mapped",[59]],[[65308,65308],"disallowed_STD3_mapped",[60]],[[65309,65309],"disallowed_STD3_mapped",[61]],[[65310,65310],"disallowed_STD3_mapped",[62]],[[65311,65311],"disallowed_STD3_mapped",[63]],[[65312,65312],"disallowed_STD3_mapped",[64]],[[65313,65313],"mapped",[97]],[[65314,65314],"mapped",[98]],[[65315,65315],"mapped",[99]],[[65316,65316],"mapped",[100]],[[65317,65317],"mapped",[101]],[[65318,65318],"mapped",[102]],[[65319,65319],"mapped",[103]],[[65320,65320],"mapped",[104]],[[65321,65321],"mapped",[105]],[[65322,65322],"mapped",[106]],[[65323,65323],"mapped",[107]],[[65324,65324],"mapped",[108]],[[65325,65325],"mapped",[109]],[[65326,65326],"mapped",[110]],[[65327,65327],"mapped",[111]],[[65328,65328],"mapped",[112]],[[65329,65329],"mapped",[113]],[[65330,65330],"mapped",[114]],[[65331,65331],"mapped",[115]],[[65332,65332],"mapped",[116]],[[65333,65333],"mapped",[117]],[[65334,65334],"mapped",[118]],[[65335,65335],"mapped",[119]],[[65336,65336],"mapped",[120]],[[65337,65337],"mapped",[121]],[[65338,65338],"mapped",[122]],[[65339,65339],"disallowed_STD3_mapped",[91]],[[65340,65340],"disallowed_STD3_mapped",[92]],[[65341,65341],"disallowed_STD3_mapped",[93]],[[65342,65342],"disallowed_STD3_mapped",[94]],[[65343,65343],"disallowed_STD3_mapped",[95]],[[65344,65344],"disallowed_STD3_mapped",[96]],[[65345,65345],"mapped",[97]],[[65346,65346],"mapped",[98]],[[65347,65347],"mapped",[99]],[[65348,65348],"mapped",[100]],[[65349,65349],"mapped",[101]],[[65350,65350],"mapped",[102]],[[65351,65351],"mapped",[103]],[[65352,65352],"mapped",[104]],[[65353,65353],"mapped",[105]],[[65354,65354],"mapped",[106]],[[65355,65355],"mapped",[107]],[[65356,65356],"mapped",[108]],[[65357,65357],"mapped",[109]],[[65358,65358],"mapped",[110]],[[65359,65359],"mapped",[111]],[[65360,65360],"mapped",[112]],[[65361,65361],"mapped",[113]],[[65362,65362],"mapped",[114]],[[65363,65363],"mapped",[115]],[[65364,65364],"mapped",[116]],[[65365,65365],"mapped",[117]],[[65366,65366],"mapped",[118]],[[65367,65367],"mapped",[119]],[[65368,65368],"mapped",[120]],[[65369,65369],"mapped",[121]],[[65370,65370],"mapped",[122]],[[65371,65371],"disallowed_STD3_mapped",[123]],[[65372,65372],"disallowed_STD3_mapped",[124]],[[65373,65373],"disallowed_STD3_mapped",[125]],[[65374,65374],"disallowed_STD3_mapped",[126]],[[65375,65375],"mapped",[10629]],[[65376,65376],"mapped",[10630]],[[65377,65377],"mapped",[46]],[[65378,65378],"mapped",[12300]],[[65379,65379],"mapped",[12301]],[[65380,65380],"mapped",[12289]],[[65381,65381],"mapped",[12539]],[[65382,65382],"mapped",[12530]],[[65383,65383],"mapped",[12449]],[[65384,65384],"mapped",[12451]],[[65385,65385],"mapped",[12453]],[[65386,65386],"mapped",[12455]],[[65387,65387],"mapped",[12457]],[[65388,65388],"mapped",[12515]],[[65389,65389],"mapped",[12517]],[[65390,65390],"mapped",[12519]],[[65391,65391],"mapped",[12483]],[[65392,65392],"mapped",[12540]],[[65393,65393],"mapped",[12450]],[[65394,65394],"mapped",[12452]],[[65395,65395],"mapped",[12454]],[[65396,65396],"mapped",[12456]],[[65397,65397],"mapped",[12458]],[[65398,65398],"mapped",[12459]],[[65399,65399],"mapped",[12461]],[[65400,65400],"mapped",[12463]],[[65401,65401],"mapped",[12465]],[[65402,65402],"mapped",[12467]],[[65403,65403],"mapped",[12469]],[[65404,65404],"mapped",[12471]],[[65405,65405],"mapped",[12473]],[[65406,65406],"mapped",[12475]],[[65407,65407],"mapped",[12477]],[[65408,65408],"mapped",[12479]],[[65409,65409],"mapped",[12481]],[[65410,65410],"mapped",[12484]],[[65411,65411],"mapped",[12486]],[[65412,65412],"mapped",[12488]],[[65413,65413],"mapped",[12490]],[[65414,65414],"mapped",[12491]],[[65415,65415],"mapped",[12492]],[[65416,65416],"mapped",[12493]],[[65417,65417],"mapped",[12494]],[[65418,65418],"mapped",[12495]],[[65419,65419],"mapped",[12498]],[[65420,65420],"mapped",[12501]],[[65421,65421],"mapped",[12504]],[[65422,65422],"mapped",[12507]],[[65423,65423],"mapped",[12510]],[[65424,65424],"mapped",[12511]],[[65425,65425],"mapped",[12512]],[[65426,65426],"mapped",[12513]],[[65427,65427],"mapped",[12514]],[[65428,65428],"mapped",[12516]],[[65429,65429],"mapped",[12518]],[[65430,65430],"mapped",[12520]],[[65431,65431],"mapped",[12521]],[[65432,65432],"mapped",[12522]],[[65433,65433],"mapped",[12523]],[[65434,65434],"mapped",[12524]],[[65435,65435],"mapped",[12525]],[[65436,65436],"mapped",[12527]],[[65437,65437],"mapped",[12531]],[[65438,65438],"mapped",[12441]],[[65439,65439],"mapped",[12442]],[[65440,65440],"disallowed"],[[65441,65441],"mapped",[4352]],[[65442,65442],"mapped",[4353]],[[65443,65443],"mapped",[4522]],[[65444,65444],"mapped",[4354]],[[65445,65445],"mapped",[4524]],[[65446,65446],"mapped",[4525]],[[65447,65447],"mapped",[4355]],[[65448,65448],"mapped",[4356]],[[65449,65449],"mapped",[4357]],[[65450,65450],"mapped",[4528]],[[65451,65451],"mapped",[4529]],[[65452,65452],"mapped",[4530]],[[65453,65453],"mapped",[4531]],[[65454,65454],"mapped",[4532]],[[65455,65455],"mapped",[4533]],[[65456,65456],"mapped",[4378]],[[65457,65457],"mapped",[4358]],[[65458,65458],"mapped",[4359]],[[65459,65459],"mapped",[4360]],[[65460,65460],"mapped",[4385]],[[65461,65461],"mapped",[4361]],[[65462,65462],"mapped",[4362]],[[65463,65463],"mapped",[4363]],[[65464,65464],"mapped",[4364]],[[65465,65465],"mapped",[4365]],[[65466,65466],"mapped",[4366]],[[65467,65467],"mapped",[4367]],[[65468,65468],"mapped",[4368]],[[65469,65469],"mapped",[4369]],[[65470,65470],"mapped",[4370]],[[65471,65473],"disallowed"],[[65474,65474],"mapped",[4449]],[[65475,65475],"mapped",[4450]],[[65476,65476],"mapped",[4451]],[[65477,65477],"mapped",[4452]],[[65478,65478],"mapped",[4453]],[[65479,65479],"mapped",[4454]],[[65480,65481],"disallowed"],[[65482,65482],"mapped",[4455]],[[65483,65483],"mapped",[4456]],[[65484,65484],"mapped",[4457]],[[65485,65485],"mapped",[4458]],[[65486,65486],"mapped",[4459]],[[65487,65487],"mapped",[4460]],[[65488,65489],"disallowed"],[[65490,65490],"mapped",[4461]],[[65491,65491],"mapped",[4462]],[[65492,65492],"mapped",[4463]],[[65493,65493],"mapped",[4464]],[[65494,65494],"mapped",[4465]],[[65495,65495],"mapped",[4466]],[[65496,65497],"disallowed"],[[65498,65498],"mapped",[4467]],[[65499,65499],"mapped",[4468]],[[65500,65500],"mapped",[4469]],[[65501,65503],"disallowed"],[[65504,65504],"mapped",[162]],[[65505,65505],"mapped",[163]],[[65506,65506],"mapped",[172]],[[65507,65507],"disallowed_STD3_mapped",[32,772]],[[65508,65508],"mapped",[166]],[[65509,65509],"mapped",[165]],[[65510,65510],"mapped",[8361]],[[65511,65511],"disallowed"],[[65512,65512],"mapped",[9474]],[[65513,65513],"mapped",[8592]],[[65514,65514],"mapped",[8593]],[[65515,65515],"mapped",[8594]],[[65516,65516],"mapped",[8595]],[[65517,65517],"mapped",[9632]],[[65518,65518],"mapped",[9675]],[[65519,65528],"disallowed"],[[65529,65531],"disallowed"],[[65532,65532],"disallowed"],[[65533,65533],"disallowed"],[[65534,65535],"disallowed"],[[65536,65547],"valid"],[[65548,65548],"disallowed"],[[65549,65574],"valid"],[[65575,65575],"disallowed"],[[65576,65594],"valid"],[[65595,65595],"disallowed"],[[65596,65597],"valid"],[[65598,65598],"disallowed"],[[65599,65613],"valid"],[[65614,65615],"disallowed"],[[65616,65629],"valid"],[[65630,65663],"disallowed"],[[65664,65786],"valid"],[[65787,65791],"disallowed"],[[65792,65794],"valid",[],"NV8"],[[65795,65798],"disallowed"],[[65799,65843],"valid",[],"NV8"],[[65844,65846],"disallowed"],[[65847,65855],"valid",[],"NV8"],[[65856,65930],"valid",[],"NV8"],[[65931,65932],"valid",[],"NV8"],[[65933,65935],"disallowed"],[[65936,65947],"valid",[],"NV8"],[[65948,65951],"disallowed"],[[65952,65952],"valid",[],"NV8"],[[65953,65999],"disallowed"],[[66e3,66044],"valid",[],"NV8"],[[66045,66045],"valid"],[[66046,66175],"disallowed"],[[66176,66204],"valid"],[[66205,66207],"disallowed"],[[66208,66256],"valid"],[[66257,66271],"disallowed"],[[66272,66272],"valid"],[[66273,66299],"valid",[],"NV8"],[[66300,66303],"disallowed"],[[66304,66334],"valid"],[[66335,66335],"valid"],[[66336,66339],"valid",[],"NV8"],[[66340,66351],"disallowed"],[[66352,66368],"valid"],[[66369,66369],"valid",[],"NV8"],[[66370,66377],"valid"],[[66378,66378],"valid",[],"NV8"],[[66379,66383],"disallowed"],[[66384,66426],"valid"],[[66427,66431],"disallowed"],[[66432,66461],"valid"],[[66462,66462],"disallowed"],[[66463,66463],"valid",[],"NV8"],[[66464,66499],"valid"],[[66500,66503],"disallowed"],[[66504,66511],"valid"],[[66512,66517],"valid",[],"NV8"],[[66518,66559],"disallowed"],[[66560,66560],"mapped",[66600]],[[66561,66561],"mapped",[66601]],[[66562,66562],"mapped",[66602]],[[66563,66563],"mapped",[66603]],[[66564,66564],"mapped",[66604]],[[66565,66565],"mapped",[66605]],[[66566,66566],"mapped",[66606]],[[66567,66567],"mapped",[66607]],[[66568,66568],"mapped",[66608]],[[66569,66569],"mapped",[66609]],[[66570,66570],"mapped",[66610]],[[66571,66571],"mapped",[66611]],[[66572,66572],"mapped",[66612]],[[66573,66573],"mapped",[66613]],[[66574,66574],"mapped",[66614]],[[66575,66575],"mapped",[66615]],[[66576,66576],"mapped",[66616]],[[66577,66577],"mapped",[66617]],[[66578,66578],"mapped",[66618]],[[66579,66579],"mapped",[66619]],[[66580,66580],"mapped",[66620]],[[66581,66581],"mapped",[66621]],[[66582,66582],"mapped",[66622]],[[66583,66583],"mapped",[66623]],[[66584,66584],"mapped",[66624]],[[66585,66585],"mapped",[66625]],[[66586,66586],"mapped",[66626]],[[66587,66587],"mapped",[66627]],[[66588,66588],"mapped",[66628]],[[66589,66589],"mapped",[66629]],[[66590,66590],"mapped",[66630]],[[66591,66591],"mapped",[66631]],[[66592,66592],"mapped",[66632]],[[66593,66593],"mapped",[66633]],[[66594,66594],"mapped",[66634]],[[66595,66595],"mapped",[66635]],[[66596,66596],"mapped",[66636]],[[66597,66597],"mapped",[66637]],[[66598,66598],"mapped",[66638]],[[66599,66599],"mapped",[66639]],[[66600,66637],"valid"],[[66638,66717],"valid"],[[66718,66719],"disallowed"],[[66720,66729],"valid"],[[66730,66815],"disallowed"],[[66816,66855],"valid"],[[66856,66863],"disallowed"],[[66864,66915],"valid"],[[66916,66926],"disallowed"],[[66927,66927],"valid",[],"NV8"],[[66928,67071],"disallowed"],[[67072,67382],"valid"],[[67383,67391],"disallowed"],[[67392,67413],"valid"],[[67414,67423],"disallowed"],[[67424,67431],"valid"],[[67432,67583],"disallowed"],[[67584,67589],"valid"],[[67590,67591],"disallowed"],[[67592,67592],"valid"],[[67593,67593],"disallowed"],[[67594,67637],"valid"],[[67638,67638],"disallowed"],[[67639,67640],"valid"],[[67641,67643],"disallowed"],[[67644,67644],"valid"],[[67645,67646],"disallowed"],[[67647,67647],"valid"],[[67648,67669],"valid"],[[67670,67670],"disallowed"],[[67671,67679],"valid",[],"NV8"],[[67680,67702],"valid"],[[67703,67711],"valid",[],"NV8"],[[67712,67742],"valid"],[[67743,67750],"disallowed"],[[67751,67759],"valid",[],"NV8"],[[67760,67807],"disallowed"],[[67808,67826],"valid"],[[67827,67827],"disallowed"],[[67828,67829],"valid"],[[67830,67834],"disallowed"],[[67835,67839],"valid",[],"NV8"],[[67840,67861],"valid"],[[67862,67865],"valid",[],"NV8"],[[67866,67867],"valid",[],"NV8"],[[67868,67870],"disallowed"],[[67871,67871],"valid",[],"NV8"],[[67872,67897],"valid"],[[67898,67902],"disallowed"],[[67903,67903],"valid",[],"NV8"],[[67904,67967],"disallowed"],[[67968,68023],"valid"],[[68024,68027],"disallowed"],[[68028,68029],"valid",[],"NV8"],[[68030,68031],"valid"],[[68032,68047],"valid",[],"NV8"],[[68048,68049],"disallowed"],[[68050,68095],"valid",[],"NV8"],[[68096,68099],"valid"],[[68100,68100],"disallowed"],[[68101,68102],"valid"],[[68103,68107],"disallowed"],[[68108,68115],"valid"],[[68116,68116],"disallowed"],[[68117,68119],"valid"],[[68120,68120],"disallowed"],[[68121,68147],"valid"],[[68148,68151],"disallowed"],[[68152,68154],"valid"],[[68155,68158],"disallowed"],[[68159,68159],"valid"],[[68160,68167],"valid",[],"NV8"],[[68168,68175],"disallowed"],[[68176,68184],"valid",[],"NV8"],[[68185,68191],"disallowed"],[[68192,68220],"valid"],[[68221,68223],"valid",[],"NV8"],[[68224,68252],"valid"],[[68253,68255],"valid",[],"NV8"],[[68256,68287],"disallowed"],[[68288,68295],"valid"],[[68296,68296],"valid",[],"NV8"],[[68297,68326],"valid"],[[68327,68330],"disallowed"],[[68331,68342],"valid",[],"NV8"],[[68343,68351],"disallowed"],[[68352,68405],"valid"],[[68406,68408],"disallowed"],[[68409,68415],"valid",[],"NV8"],[[68416,68437],"valid"],[[68438,68439],"disallowed"],[[68440,68447],"valid",[],"NV8"],[[68448,68466],"valid"],[[68467,68471],"disallowed"],[[68472,68479],"valid",[],"NV8"],[[68480,68497],"valid"],[[68498,68504],"disallowed"],[[68505,68508],"valid",[],"NV8"],[[68509,68520],"disallowed"],[[68521,68527],"valid",[],"NV8"],[[68528,68607],"disallowed"],[[68608,68680],"valid"],[[68681,68735],"disallowed"],[[68736,68736],"mapped",[68800]],[[68737,68737],"mapped",[68801]],[[68738,68738],"mapped",[68802]],[[68739,68739],"mapped",[68803]],[[68740,68740],"mapped",[68804]],[[68741,68741],"mapped",[68805]],[[68742,68742],"mapped",[68806]],[[68743,68743],"mapped",[68807]],[[68744,68744],"mapped",[68808]],[[68745,68745],"mapped",[68809]],[[68746,68746],"mapped",[68810]],[[68747,68747],"mapped",[68811]],[[68748,68748],"mapped",[68812]],[[68749,68749],"mapped",[68813]],[[68750,68750],"mapped",[68814]],[[68751,68751],"mapped",[68815]],[[68752,68752],"mapped",[68816]],[[68753,68753],"mapped",[68817]],[[68754,68754],"mapped",[68818]],[[68755,68755],"mapped",[68819]],[[68756,68756],"mapped",[68820]],[[68757,68757],"mapped",[68821]],[[68758,68758],"mapped",[68822]],[[68759,68759],"mapped",[68823]],[[68760,68760],"mapped",[68824]],[[68761,68761],"mapped",[68825]],[[68762,68762],"mapped",[68826]],[[68763,68763],"mapped",[68827]],[[68764,68764],"mapped",[68828]],[[68765,68765],"mapped",[68829]],[[68766,68766],"mapped",[68830]],[[68767,68767],"mapped",[68831]],[[68768,68768],"mapped",[68832]],[[68769,68769],"mapped",[68833]],[[68770,68770],"mapped",[68834]],[[68771,68771],"mapped",[68835]],[[68772,68772],"mapped",[68836]],[[68773,68773],"mapped",[68837]],[[68774,68774],"mapped",[68838]],[[68775,68775],"mapped",[68839]],[[68776,68776],"mapped",[68840]],[[68777,68777],"mapped",[68841]],[[68778,68778],"mapped",[68842]],[[68779,68779],"mapped",[68843]],[[68780,68780],"mapped",[68844]],[[68781,68781],"mapped",[68845]],[[68782,68782],"mapped",[68846]],[[68783,68783],"mapped",[68847]],[[68784,68784],"mapped",[68848]],[[68785,68785],"mapped",[68849]],[[68786,68786],"mapped",[68850]],[[68787,68799],"disallowed"],[[68800,68850],"valid"],[[68851,68857],"disallowed"],[[68858,68863],"valid",[],"NV8"],[[68864,69215],"disallowed"],[[69216,69246],"valid",[],"NV8"],[[69247,69631],"disallowed"],[[69632,69702],"valid"],[[69703,69709],"valid",[],"NV8"],[[69710,69713],"disallowed"],[[69714,69733],"valid",[],"NV8"],[[69734,69743],"valid"],[[69744,69758],"disallowed"],[[69759,69759],"valid"],[[69760,69818],"valid"],[[69819,69820],"valid",[],"NV8"],[[69821,69821],"disallowed"],[[69822,69825],"valid",[],"NV8"],[[69826,69839],"disallowed"],[[69840,69864],"valid"],[[69865,69871],"disallowed"],[[69872,69881],"valid"],[[69882,69887],"disallowed"],[[69888,69940],"valid"],[[69941,69941],"disallowed"],[[69942,69951],"valid"],[[69952,69955],"valid",[],"NV8"],[[69956,69967],"disallowed"],[[69968,70003],"valid"],[[70004,70005],"valid",[],"NV8"],[[70006,70006],"valid"],[[70007,70015],"disallowed"],[[70016,70084],"valid"],[[70085,70088],"valid",[],"NV8"],[[70089,70089],"valid",[],"NV8"],[[70090,70092],"valid"],[[70093,70093],"valid",[],"NV8"],[[70094,70095],"disallowed"],[[70096,70105],"valid"],[[70106,70106],"valid"],[[70107,70107],"valid",[],"NV8"],[[70108,70108],"valid"],[[70109,70111],"valid",[],"NV8"],[[70112,70112],"disallowed"],[[70113,70132],"valid",[],"NV8"],[[70133,70143],"disallowed"],[[70144,70161],"valid"],[[70162,70162],"disallowed"],[[70163,70199],"valid"],[[70200,70205],"valid",[],"NV8"],[[70206,70271],"disallowed"],[[70272,70278],"valid"],[[70279,70279],"disallowed"],[[70280,70280],"valid"],[[70281,70281],"disallowed"],[[70282,70285],"valid"],[[70286,70286],"disallowed"],[[70287,70301],"valid"],[[70302,70302],"disallowed"],[[70303,70312],"valid"],[[70313,70313],"valid",[],"NV8"],[[70314,70319],"disallowed"],[[70320,70378],"valid"],[[70379,70383],"disallowed"],[[70384,70393],"valid"],[[70394,70399],"disallowed"],[[70400,70400],"valid"],[[70401,70403],"valid"],[[70404,70404],"disallowed"],[[70405,70412],"valid"],[[70413,70414],"disallowed"],[[70415,70416],"valid"],[[70417,70418],"disallowed"],[[70419,70440],"valid"],[[70441,70441],"disallowed"],[[70442,70448],"valid"],[[70449,70449],"disallowed"],[[70450,70451],"valid"],[[70452,70452],"disallowed"],[[70453,70457],"valid"],[[70458,70459],"disallowed"],[[70460,70468],"valid"],[[70469,70470],"disallowed"],[[70471,70472],"valid"],[[70473,70474],"disallowed"],[[70475,70477],"valid"],[[70478,70479],"disallowed"],[[70480,70480],"valid"],[[70481,70486],"disallowed"],[[70487,70487],"valid"],[[70488,70492],"disallowed"],[[70493,70499],"valid"],[[70500,70501],"disallowed"],[[70502,70508],"valid"],[[70509,70511],"disallowed"],[[70512,70516],"valid"],[[70517,70783],"disallowed"],[[70784,70853],"valid"],[[70854,70854],"valid",[],"NV8"],[[70855,70855],"valid"],[[70856,70863],"disallowed"],[[70864,70873],"valid"],[[70874,71039],"disallowed"],[[71040,71093],"valid"],[[71094,71095],"disallowed"],[[71096,71104],"valid"],[[71105,71113],"valid",[],"NV8"],[[71114,71127],"valid",[],"NV8"],[[71128,71133],"valid"],[[71134,71167],"disallowed"],[[71168,71232],"valid"],[[71233,71235],"valid",[],"NV8"],[[71236,71236],"valid"],[[71237,71247],"disallowed"],[[71248,71257],"valid"],[[71258,71295],"disallowed"],[[71296,71351],"valid"],[[71352,71359],"disallowed"],[[71360,71369],"valid"],[[71370,71423],"disallowed"],[[71424,71449],"valid"],[[71450,71452],"disallowed"],[[71453,71467],"valid"],[[71468,71471],"disallowed"],[[71472,71481],"valid"],[[71482,71487],"valid",[],"NV8"],[[71488,71839],"disallowed"],[[71840,71840],"mapped",[71872]],[[71841,71841],"mapped",[71873]],[[71842,71842],"mapped",[71874]],[[71843,71843],"mapped",[71875]],[[71844,71844],"mapped",[71876]],[[71845,71845],"mapped",[71877]],[[71846,71846],"mapped",[71878]],[[71847,71847],"mapped",[71879]],[[71848,71848],"mapped",[71880]],[[71849,71849],"mapped",[71881]],[[71850,71850],"mapped",[71882]],[[71851,71851],"mapped",[71883]],[[71852,71852],"mapped",[71884]],[[71853,71853],"mapped",[71885]],[[71854,71854],"mapped",[71886]],[[71855,71855],"mapped",[71887]],[[71856,71856],"mapped",[71888]],[[71857,71857],"mapped",[71889]],[[71858,71858],"mapped",[71890]],[[71859,71859],"mapped",[71891]],[[71860,71860],"mapped",[71892]],[[71861,71861],"mapped",[71893]],[[71862,71862],"mapped",[71894]],[[71863,71863],"mapped",[71895]],[[71864,71864],"mapped",[71896]],[[71865,71865],"mapped",[71897]],[[71866,71866],"mapped",[71898]],[[71867,71867],"mapped",[71899]],[[71868,71868],"mapped",[71900]],[[71869,71869],"mapped",[71901]],[[71870,71870],"mapped",[71902]],[[71871,71871],"mapped",[71903]],[[71872,71913],"valid"],[[71914,71922],"valid",[],"NV8"],[[71923,71934],"disallowed"],[[71935,71935],"valid"],[[71936,72383],"disallowed"],[[72384,72440],"valid"],[[72441,73727],"disallowed"],[[73728,74606],"valid"],[[74607,74648],"valid"],[[74649,74649],"valid"],[[74650,74751],"disallowed"],[[74752,74850],"valid",[],"NV8"],[[74851,74862],"valid",[],"NV8"],[[74863,74863],"disallowed"],[[74864,74867],"valid",[],"NV8"],[[74868,74868],"valid",[],"NV8"],[[74869,74879],"disallowed"],[[74880,75075],"valid"],[[75076,77823],"disallowed"],[[77824,78894],"valid"],[[78895,82943],"disallowed"],[[82944,83526],"valid"],[[83527,92159],"disallowed"],[[92160,92728],"valid"],[[92729,92735],"disallowed"],[[92736,92766],"valid"],[[92767,92767],"disallowed"],[[92768,92777],"valid"],[[92778,92781],"disallowed"],[[92782,92783],"valid",[],"NV8"],[[92784,92879],"disallowed"],[[92880,92909],"valid"],[[92910,92911],"disallowed"],[[92912,92916],"valid"],[[92917,92917],"valid",[],"NV8"],[[92918,92927],"disallowed"],[[92928,92982],"valid"],[[92983,92991],"valid",[],"NV8"],[[92992,92995],"valid"],[[92996,92997],"valid",[],"NV8"],[[92998,93007],"disallowed"],[[93008,93017],"valid"],[[93018,93018],"disallowed"],[[93019,93025],"valid",[],"NV8"],[[93026,93026],"disallowed"],[[93027,93047],"valid"],[[93048,93052],"disallowed"],[[93053,93071],"valid"],[[93072,93951],"disallowed"],[[93952,94020],"valid"],[[94021,94031],"disallowed"],[[94032,94078],"valid"],[[94079,94094],"disallowed"],[[94095,94111],"valid"],[[94112,110591],"disallowed"],[[110592,110593],"valid"],[[110594,113663],"disallowed"],[[113664,113770],"valid"],[[113771,113775],"disallowed"],[[113776,113788],"valid"],[[113789,113791],"disallowed"],[[113792,113800],"valid"],[[113801,113807],"disallowed"],[[113808,113817],"valid"],[[113818,113819],"disallowed"],[[113820,113820],"valid",[],"NV8"],[[113821,113822],"valid"],[[113823,113823],"valid",[],"NV8"],[[113824,113827],"ignored"],[[113828,118783],"disallowed"],[[118784,119029],"valid",[],"NV8"],[[119030,119039],"disallowed"],[[119040,119078],"valid",[],"NV8"],[[119079,119080],"disallowed"],[[119081,119081],"valid",[],"NV8"],[[119082,119133],"valid",[],"NV8"],[[119134,119134],"mapped",[119127,119141]],[[119135,119135],"mapped",[119128,119141]],[[119136,119136],"mapped",[119128,119141,119150]],[[119137,119137],"mapped",[119128,119141,119151]],[[119138,119138],"mapped",[119128,119141,119152]],[[119139,119139],"mapped",[119128,119141,119153]],[[119140,119140],"mapped",[119128,119141,119154]],[[119141,119154],"valid",[],"NV8"],[[119155,119162],"disallowed"],[[119163,119226],"valid",[],"NV8"],[[119227,119227],"mapped",[119225,119141]],[[119228,119228],"mapped",[119226,119141]],[[119229,119229],"mapped",[119225,119141,119150]],[[119230,119230],"mapped",[119226,119141,119150]],[[119231,119231],"mapped",[119225,119141,119151]],[[119232,119232],"mapped",[119226,119141,119151]],[[119233,119261],"valid",[],"NV8"],[[119262,119272],"valid",[],"NV8"],[[119273,119295],"disallowed"],[[119296,119365],"valid",[],"NV8"],[[119366,119551],"disallowed"],[[119552,119638],"valid",[],"NV8"],[[119639,119647],"disallowed"],[[119648,119665],"valid",[],"NV8"],[[119666,119807],"disallowed"],[[119808,119808],"mapped",[97]],[[119809,119809],"mapped",[98]],[[119810,119810],"mapped",[99]],[[119811,119811],"mapped",[100]],[[119812,119812],"mapped",[101]],[[119813,119813],"mapped",[102]],[[119814,119814],"mapped",[103]],[[119815,119815],"mapped",[104]],[[119816,119816],"mapped",[105]],[[119817,119817],"mapped",[106]],[[119818,119818],"mapped",[107]],[[119819,119819],"mapped",[108]],[[119820,119820],"mapped",[109]],[[119821,119821],"mapped",[110]],[[119822,119822],"mapped",[111]],[[119823,119823],"mapped",[112]],[[119824,119824],"mapped",[113]],[[119825,119825],"mapped",[114]],[[119826,119826],"mapped",[115]],[[119827,119827],"mapped",[116]],[[119828,119828],"mapped",[117]],[[119829,119829],"mapped",[118]],[[119830,119830],"mapped",[119]],[[119831,119831],"mapped",[120]],[[119832,119832],"mapped",[121]],[[119833,119833],"mapped",[122]],[[119834,119834],"mapped",[97]],[[119835,119835],"mapped",[98]],[[119836,119836],"mapped",[99]],[[119837,119837],"mapped",[100]],[[119838,119838],"mapped",[101]],[[119839,119839],"mapped",[102]],[[119840,119840],"mapped",[103]],[[119841,119841],"mapped",[104]],[[119842,119842],"mapped",[105]],[[119843,119843],"mapped",[106]],[[119844,119844],"mapped",[107]],[[119845,119845],"mapped",[108]],[[119846,119846],"mapped",[109]],[[119847,119847],"mapped",[110]],[[119848,119848],"mapped",[111]],[[119849,119849],"mapped",[112]],[[119850,119850],"mapped",[113]],[[119851,119851],"mapped",[114]],[[119852,119852],"mapped",[115]],[[119853,119853],"mapped",[116]],[[119854,119854],"mapped",[117]],[[119855,119855],"mapped",[118]],[[119856,119856],"mapped",[119]],[[119857,119857],"mapped",[120]],[[119858,119858],"mapped",[121]],[[119859,119859],"mapped",[122]],[[119860,119860],"mapped",[97]],[[119861,119861],"mapped",[98]],[[119862,119862],"mapped",[99]],[[119863,119863],"mapped",[100]],[[119864,119864],"mapped",[101]],[[119865,119865],"mapped",[102]],[[119866,119866],"mapped",[103]],[[119867,119867],"mapped",[104]],[[119868,119868],"mapped",[105]],[[119869,119869],"mapped",[106]],[[119870,119870],"mapped",[107]],[[119871,119871],"mapped",[108]],[[119872,119872],"mapped",[109]],[[119873,119873],"mapped",[110]],[[119874,119874],"mapped",[111]],[[119875,119875],"mapped",[112]],[[119876,119876],"mapped",[113]],[[119877,119877],"mapped",[114]],[[119878,119878],"mapped",[115]],[[119879,119879],"mapped",[116]],[[119880,119880],"mapped",[117]],[[119881,119881],"mapped",[118]],[[119882,119882],"mapped",[119]],[[119883,119883],"mapped",[120]],[[119884,119884],"mapped",[121]],[[119885,119885],"mapped",[122]],[[119886,119886],"mapped",[97]],[[119887,119887],"mapped",[98]],[[119888,119888],"mapped",[99]],[[119889,119889],"mapped",[100]],[[119890,119890],"mapped",[101]],[[119891,119891],"mapped",[102]],[[119892,119892],"mapped",[103]],[[119893,119893],"disallowed"],[[119894,119894],"mapped",[105]],[[119895,119895],"mapped",[106]],[[119896,119896],"mapped",[107]],[[119897,119897],"mapped",[108]],[[119898,119898],"mapped",[109]],[[119899,119899],"mapped",[110]],[[119900,119900],"mapped",[111]],[[119901,119901],"mapped",[112]],[[119902,119902],"mapped",[113]],[[119903,119903],"mapped",[114]],[[119904,119904],"mapped",[115]],[[119905,119905],"mapped",[116]],[[119906,119906],"mapped",[117]],[[119907,119907],"mapped",[118]],[[119908,119908],"mapped",[119]],[[119909,119909],"mapped",[120]],[[119910,119910],"mapped",[121]],[[119911,119911],"mapped",[122]],[[119912,119912],"mapped",[97]],[[119913,119913],"mapped",[98]],[[119914,119914],"mapped",[99]],[[119915,119915],"mapped",[100]],[[119916,119916],"mapped",[101]],[[119917,119917],"mapped",[102]],[[119918,119918],"mapped",[103]],[[119919,119919],"mapped",[104]],[[119920,119920],"mapped",[105]],[[119921,119921],"mapped",[106]],[[119922,119922],"mapped",[107]],[[119923,119923],"mapped",[108]],[[119924,119924],"mapped",[109]],[[119925,119925],"mapped",[110]],[[119926,119926],"mapped",[111]],[[119927,119927],"mapped",[112]],[[119928,119928],"mapped",[113]],[[119929,119929],"mapped",[114]],[[119930,119930],"mapped",[115]],[[119931,119931],"mapped",[116]],[[119932,119932],"mapped",[117]],[[119933,119933],"mapped",[118]],[[119934,119934],"mapped",[119]],[[119935,119935],"mapped",[120]],[[119936,119936],"mapped",[121]],[[119937,119937],"mapped",[122]],[[119938,119938],"mapped",[97]],[[119939,119939],"mapped",[98]],[[119940,119940],"mapped",[99]],[[119941,119941],"mapped",[100]],[[119942,119942],"mapped",[101]],[[119943,119943],"mapped",[102]],[[119944,119944],"mapped",[103]],[[119945,119945],"mapped",[104]],[[119946,119946],"mapped",[105]],[[119947,119947],"mapped",[106]],[[119948,119948],"mapped",[107]],[[119949,119949],"mapped",[108]],[[119950,119950],"mapped",[109]],[[119951,119951],"mapped",[110]],[[119952,119952],"mapped",[111]],[[119953,119953],"mapped",[112]],[[119954,119954],"mapped",[113]],[[119955,119955],"mapped",[114]],[[119956,119956],"mapped",[115]],[[119957,119957],"mapped",[116]],[[119958,119958],"mapped",[117]],[[119959,119959],"mapped",[118]],[[119960,119960],"mapped",[119]],[[119961,119961],"mapped",[120]],[[119962,119962],"mapped",[121]],[[119963,119963],"mapped",[122]],[[119964,119964],"mapped",[97]],[[119965,119965],"disallowed"],[[119966,119966],"mapped",[99]],[[119967,119967],"mapped",[100]],[[119968,119969],"disallowed"],[[119970,119970],"mapped",[103]],[[119971,119972],"disallowed"],[[119973,119973],"mapped",[106]],[[119974,119974],"mapped",[107]],[[119975,119976],"disallowed"],[[119977,119977],"mapped",[110]],[[119978,119978],"mapped",[111]],[[119979,119979],"mapped",[112]],[[119980,119980],"mapped",[113]],[[119981,119981],"disallowed"],[[119982,119982],"mapped",[115]],[[119983,119983],"mapped",[116]],[[119984,119984],"mapped",[117]],[[119985,119985],"mapped",[118]],[[119986,119986],"mapped",[119]],[[119987,119987],"mapped",[120]],[[119988,119988],"mapped",[121]],[[119989,119989],"mapped",[122]],[[119990,119990],"mapped",[97]],[[119991,119991],"mapped",[98]],[[119992,119992],"mapped",[99]],[[119993,119993],"mapped",[100]],[[119994,119994],"disallowed"],[[119995,119995],"mapped",[102]],[[119996,119996],"disallowed"],[[119997,119997],"mapped",[104]],[[119998,119998],"mapped",[105]],[[119999,119999],"mapped",[106]],[[12e4,12e4],"mapped",[107]],[[120001,120001],"mapped",[108]],[[120002,120002],"mapped",[109]],[[120003,120003],"mapped",[110]],[[120004,120004],"disallowed"],[[120005,120005],"mapped",[112]],[[120006,120006],"mapped",[113]],[[120007,120007],"mapped",[114]],[[120008,120008],"mapped",[115]],[[120009,120009],"mapped",[116]],[[120010,120010],"mapped",[117]],[[120011,120011],"mapped",[118]],[[120012,120012],"mapped",[119]],[[120013,120013],"mapped",[120]],[[120014,120014],"mapped",[121]],[[120015,120015],"mapped",[122]],[[120016,120016],"mapped",[97]],[[120017,120017],"mapped",[98]],[[120018,120018],"mapped",[99]],[[120019,120019],"mapped",[100]],[[120020,120020],"mapped",[101]],[[120021,120021],"mapped",[102]],[[120022,120022],"mapped",[103]],[[120023,120023],"mapped",[104]],[[120024,120024],"mapped",[105]],[[120025,120025],"mapped",[106]],[[120026,120026],"mapped",[107]],[[120027,120027],"mapped",[108]],[[120028,120028],"mapped",[109]],[[120029,120029],"mapped",[110]],[[120030,120030],"mapped",[111]],[[120031,120031],"mapped",[112]],[[120032,120032],"mapped",[113]],[[120033,120033],"mapped",[114]],[[120034,120034],"mapped",[115]],[[120035,120035],"mapped",[116]],[[120036,120036],"mapped",[117]],[[120037,120037],"mapped",[118]],[[120038,120038],"mapped",[119]],[[120039,120039],"mapped",[120]],[[120040,120040],"mapped",[121]],[[120041,120041],"mapped",[122]],[[120042,120042],"mapped",[97]],[[120043,120043],"mapped",[98]],[[120044,120044],"mapped",[99]],[[120045,120045],"mapped",[100]],[[120046,120046],"mapped",[101]],[[120047,120047],"mapped",[102]],[[120048,120048],"mapped",[103]],[[120049,120049],"mapped",[104]],[[120050,120050],"mapped",[105]],[[120051,120051],"mapped",[106]],[[120052,120052],"mapped",[107]],[[120053,120053],"mapped",[108]],[[120054,120054],"mapped",[109]],[[120055,120055],"mapped",[110]],[[120056,120056],"mapped",[111]],[[120057,120057],"mapped",[112]],[[120058,120058],"mapped",[113]],[[120059,120059],"mapped",[114]],[[120060,120060],"mapped",[115]],[[120061,120061],"mapped",[116]],[[120062,120062],"mapped",[117]],[[120063,120063],"mapped",[118]],[[120064,120064],"mapped",[119]],[[120065,120065],"mapped",[120]],[[120066,120066],"mapped",[121]],[[120067,120067],"mapped",[122]],[[120068,120068],"mapped",[97]],[[120069,120069],"mapped",[98]],[[120070,120070],"disallowed"],[[120071,120071],"mapped",[100]],[[120072,120072],"mapped",[101]],[[120073,120073],"mapped",[102]],[[120074,120074],"mapped",[103]],[[120075,120076],"disallowed"],[[120077,120077],"mapped",[106]],[[120078,120078],"mapped",[107]],[[120079,120079],"mapped",[108]],[[120080,120080],"mapped",[109]],[[120081,120081],"mapped",[110]],[[120082,120082],"mapped",[111]],[[120083,120083],"mapped",[112]],[[120084,120084],"mapped",[113]],[[120085,120085],"disallowed"],[[120086,120086],"mapped",[115]],[[120087,120087],"mapped",[116]],[[120088,120088],"mapped",[117]],[[120089,120089],"mapped",[118]],[[120090,120090],"mapped",[119]],[[120091,120091],"mapped",[120]],[[120092,120092],"mapped",[121]],[[120093,120093],"disallowed"],[[120094,120094],"mapped",[97]],[[120095,120095],"mapped",[98]],[[120096,120096],"mapped",[99]],[[120097,120097],"mapped",[100]],[[120098,120098],"mapped",[101]],[[120099,120099],"mapped",[102]],[[120100,120100],"mapped",[103]],[[120101,120101],"mapped",[104]],[[120102,120102],"mapped",[105]],[[120103,120103],"mapped",[106]],[[120104,120104],"mapped",[107]],[[120105,120105],"mapped",[108]],[[120106,120106],"mapped",[109]],[[120107,120107],"mapped",[110]],[[120108,120108],"mapped",[111]],[[120109,120109],"mapped",[112]],[[120110,120110],"mapped",[113]],[[120111,120111],"mapped",[114]],[[120112,120112],"mapped",[115]],[[120113,120113],"mapped",[116]],[[120114,120114],"mapped",[117]],[[120115,120115],"mapped",[118]],[[120116,120116],"mapped",[119]],[[120117,120117],"mapped",[120]],[[120118,120118],"mapped",[121]],[[120119,120119],"mapped",[122]],[[120120,120120],"mapped",[97]],[[120121,120121],"mapped",[98]],[[120122,120122],"disallowed"],[[120123,120123],"mapped",[100]],[[120124,120124],"mapped",[101]],[[120125,120125],"mapped",[102]],[[120126,120126],"mapped",[103]],[[120127,120127],"disallowed"],[[120128,120128],"mapped",[105]],[[120129,120129],"mapped",[106]],[[120130,120130],"mapped",[107]],[[120131,120131],"mapped",[108]],[[120132,120132],"mapped",[109]],[[120133,120133],"disallowed"],[[120134,120134],"mapped",[111]],[[120135,120137],"disallowed"],[[120138,120138],"mapped",[115]],[[120139,120139],"mapped",[116]],[[120140,120140],"mapped",[117]],[[120141,120141],"mapped",[118]],[[120142,120142],"mapped",[119]],[[120143,120143],"mapped",[120]],[[120144,120144],"mapped",[121]],[[120145,120145],"disallowed"],[[120146,120146],"mapped",[97]],[[120147,120147],"mapped",[98]],[[120148,120148],"mapped",[99]],[[120149,120149],"mapped",[100]],[[120150,120150],"mapped",[101]],[[120151,120151],"mapped",[102]],[[120152,120152],"mapped",[103]],[[120153,120153],"mapped",[104]],[[120154,120154],"mapped",[105]],[[120155,120155],"mapped",[106]],[[120156,120156],"mapped",[107]],[[120157,120157],"mapped",[108]],[[120158,120158],"mapped",[109]],[[120159,120159],"mapped",[110]],[[120160,120160],"mapped",[111]],[[120161,120161],"mapped",[112]],[[120162,120162],"mapped",[113]],[[120163,120163],"mapped",[114]],[[120164,120164],"mapped",[115]],[[120165,120165],"mapped",[116]],[[120166,120166],"mapped",[117]],[[120167,120167],"mapped",[118]],[[120168,120168],"mapped",[119]],[[120169,120169],"mapped",[120]],[[120170,120170],"mapped",[121]],[[120171,120171],"mapped",[122]],[[120172,120172],"mapped",[97]],[[120173,120173],"mapped",[98]],[[120174,120174],"mapped",[99]],[[120175,120175],"mapped",[100]],[[120176,120176],"mapped",[101]],[[120177,120177],"mapped",[102]],[[120178,120178],"mapped",[103]],[[120179,120179],"mapped",[104]],[[120180,120180],"mapped",[105]],[[120181,120181],"mapped",[106]],[[120182,120182],"mapped",[107]],[[120183,120183],"mapped",[108]],[[120184,120184],"mapped",[109]],[[120185,120185],"mapped",[110]],[[120186,120186],"mapped",[111]],[[120187,120187],"mapped",[112]],[[120188,120188],"mapped",[113]],[[120189,120189],"mapped",[114]],[[120190,120190],"mapped",[115]],[[120191,120191],"mapped",[116]],[[120192,120192],"mapped",[117]],[[120193,120193],"mapped",[118]],[[120194,120194],"mapped",[119]],[[120195,120195],"mapped",[120]],[[120196,120196],"mapped",[121]],[[120197,120197],"mapped",[122]],[[120198,120198],"mapped",[97]],[[120199,120199],"mapped",[98]],[[120200,120200],"mapped",[99]],[[120201,120201],"mapped",[100]],[[120202,120202],"mapped",[101]],[[120203,120203],"mapped",[102]],[[120204,120204],"mapped",[103]],[[120205,120205],"mapped",[104]],[[120206,120206],"mapped",[105]],[[120207,120207],"mapped",[106]],[[120208,120208],"mapped",[107]],[[120209,120209],"mapped",[108]],[[120210,120210],"mapped",[109]],[[120211,120211],"mapped",[110]],[[120212,120212],"mapped",[111]],[[120213,120213],"mapped",[112]],[[120214,120214],"mapped",[113]],[[120215,120215],"mapped",[114]],[[120216,120216],"mapped",[115]],[[120217,120217],"mapped",[116]],[[120218,120218],"mapped",[117]],[[120219,120219],"mapped",[118]],[[120220,120220],"mapped",[119]],[[120221,120221],"mapped",[120]],[[120222,120222],"mapped",[121]],[[120223,120223],"mapped",[122]],[[120224,120224],"mapped",[97]],[[120225,120225],"mapped",[98]],[[120226,120226],"mapped",[99]],[[120227,120227],"mapped",[100]],[[120228,120228],"mapped",[101]],[[120229,120229],"mapped",[102]],[[120230,120230],"mapped",[103]],[[120231,120231],"mapped",[104]],[[120232,120232],"mapped",[105]],[[120233,120233],"mapped",[106]],[[120234,120234],"mapped",[107]],[[120235,120235],"mapped",[108]],[[120236,120236],"mapped",[109]],[[120237,120237],"mapped",[110]],[[120238,120238],"mapped",[111]],[[120239,120239],"mapped",[112]],[[120240,120240],"mapped",[113]],[[120241,120241],"mapped",[114]],[[120242,120242],"mapped",[115]],[[120243,120243],"mapped",[116]],[[120244,120244],"mapped",[117]],[[120245,120245],"mapped",[118]],[[120246,120246],"mapped",[119]],[[120247,120247],"mapped",[120]],[[120248,120248],"mapped",[121]],[[120249,120249],"mapped",[122]],[[120250,120250],"mapped",[97]],[[120251,120251],"mapped",[98]],[[120252,120252],"mapped",[99]],[[120253,120253],"mapped",[100]],[[120254,120254],"mapped",[101]],[[120255,120255],"mapped",[102]],[[120256,120256],"mapped",[103]],[[120257,120257],"mapped",[104]],[[120258,120258],"mapped",[105]],[[120259,120259],"mapped",[106]],[[120260,120260],"mapped",[107]],[[120261,120261],"mapped",[108]],[[120262,120262],"mapped",[109]],[[120263,120263],"mapped",[110]],[[120264,120264],"mapped",[111]],[[120265,120265],"mapped",[112]],[[120266,120266],"mapped",[113]],[[120267,120267],"mapped",[114]],[[120268,120268],"mapped",[115]],[[120269,120269],"mapped",[116]],[[120270,120270],"mapped",[117]],[[120271,120271],"mapped",[118]],[[120272,120272],"mapped",[119]],[[120273,120273],"mapped",[120]],[[120274,120274],"mapped",[121]],[[120275,120275],"mapped",[122]],[[120276,120276],"mapped",[97]],[[120277,120277],"mapped",[98]],[[120278,120278],"mapped",[99]],[[120279,120279],"mapped",[100]],[[120280,120280],"mapped",[101]],[[120281,120281],"mapped",[102]],[[120282,120282],"mapped",[103]],[[120283,120283],"mapped",[104]],[[120284,120284],"mapped",[105]],[[120285,120285],"mapped",[106]],[[120286,120286],"mapped",[107]],[[120287,120287],"mapped",[108]],[[120288,120288],"mapped",[109]],[[120289,120289],"mapped",[110]],[[120290,120290],"mapped",[111]],[[120291,120291],"mapped",[112]],[[120292,120292],"mapped",[113]],[[120293,120293],"mapped",[114]],[[120294,120294],"mapped",[115]],[[120295,120295],"mapped",[116]],[[120296,120296],"mapped",[117]],[[120297,120297],"mapped",[118]],[[120298,120298],"mapped",[119]],[[120299,120299],"mapped",[120]],[[120300,120300],"mapped",[121]],[[120301,120301],"mapped",[122]],[[120302,120302],"mapped",[97]],[[120303,120303],"mapped",[98]],[[120304,120304],"mapped",[99]],[[120305,120305],"mapped",[100]],[[120306,120306],"mapped",[101]],[[120307,120307],"mapped",[102]],[[120308,120308],"mapped",[103]],[[120309,120309],"mapped",[104]],[[120310,120310],"mapped",[105]],[[120311,120311],"mapped",[106]],[[120312,120312],"mapped",[107]],[[120313,120313],"mapped",[108]],[[120314,120314],"mapped",[109]],[[120315,120315],"mapped",[110]],[[120316,120316],"mapped",[111]],[[120317,120317],"mapped",[112]],[[120318,120318],"mapped",[113]],[[120319,120319],"mapped",[114]],[[120320,120320],"mapped",[115]],[[120321,120321],"mapped",[116]],[[120322,120322],"mapped",[117]],[[120323,120323],"mapped",[118]],[[120324,120324],"mapped",[119]],[[120325,120325],"mapped",[120]],[[120326,120326],"mapped",[121]],[[120327,120327],"mapped",[122]],[[120328,120328],"mapped",[97]],[[120329,120329],"mapped",[98]],[[120330,120330],"mapped",[99]],[[120331,120331],"mapped",[100]],[[120332,120332],"mapped",[101]],[[120333,120333],"mapped",[102]],[[120334,120334],"mapped",[103]],[[120335,120335],"mapped",[104]],[[120336,120336],"mapped",[105]],[[120337,120337],"mapped",[106]],[[120338,120338],"mapped",[107]],[[120339,120339],"mapped",[108]],[[120340,120340],"mapped",[109]],[[120341,120341],"mapped",[110]],[[120342,120342],"mapped",[111]],[[120343,120343],"mapped",[112]],[[120344,120344],"mapped",[113]],[[120345,120345],"mapped",[114]],[[120346,120346],"mapped",[115]],[[120347,120347],"mapped",[116]],[[120348,120348],"mapped",[117]],[[120349,120349],"mapped",[118]],[[120350,120350],"mapped",[119]],[[120351,120351],"mapped",[120]],[[120352,120352],"mapped",[121]],[[120353,120353],"mapped",[122]],[[120354,120354],"mapped",[97]],[[120355,120355],"mapped",[98]],[[120356,120356],"mapped",[99]],[[120357,120357],"mapped",[100]],[[120358,120358],"mapped",[101]],[[120359,120359],"mapped",[102]],[[120360,120360],"mapped",[103]],[[120361,120361],"mapped",[104]],[[120362,120362],"mapped",[105]],[[120363,120363],"mapped",[106]],[[120364,120364],"mapped",[107]],[[120365,120365],"mapped",[108]],[[120366,120366],"mapped",[109]],[[120367,120367],"mapped",[110]],[[120368,120368],"mapped",[111]],[[120369,120369],"mapped",[112]],[[120370,120370],"mapped",[113]],[[120371,120371],"mapped",[114]],[[120372,120372],"mapped",[115]],[[120373,120373],"mapped",[116]],[[120374,120374],"mapped",[117]],[[120375,120375],"mapped",[118]],[[120376,120376],"mapped",[119]],[[120377,120377],"mapped",[120]],[[120378,120378],"mapped",[121]],[[120379,120379],"mapped",[122]],[[120380,120380],"mapped",[97]],[[120381,120381],"mapped",[98]],[[120382,120382],"mapped",[99]],[[120383,120383],"mapped",[100]],[[120384,120384],"mapped",[101]],[[120385,120385],"mapped",[102]],[[120386,120386],"mapped",[103]],[[120387,120387],"mapped",[104]],[[120388,120388],"mapped",[105]],[[120389,120389],"mapped",[106]],[[120390,120390],"mapped",[107]],[[120391,120391],"mapped",[108]],[[120392,120392],"mapped",[109]],[[120393,120393],"mapped",[110]],[[120394,120394],"mapped",[111]],[[120395,120395],"mapped",[112]],[[120396,120396],"mapped",[113]],[[120397,120397],"mapped",[114]],[[120398,120398],"mapped",[115]],[[120399,120399],"mapped",[116]],[[120400,120400],"mapped",[117]],[[120401,120401],"mapped",[118]],[[120402,120402],"mapped",[119]],[[120403,120403],"mapped",[120]],[[120404,120404],"mapped",[121]],[[120405,120405],"mapped",[122]],[[120406,120406],"mapped",[97]],[[120407,120407],"mapped",[98]],[[120408,120408],"mapped",[99]],[[120409,120409],"mapped",[100]],[[120410,120410],"mapped",[101]],[[120411,120411],"mapped",[102]],[[120412,120412],"mapped",[103]],[[120413,120413],"mapped",[104]],[[120414,120414],"mapped",[105]],[[120415,120415],"mapped",[106]],[[120416,120416],"mapped",[107]],[[120417,120417],"mapped",[108]],[[120418,120418],"mapped",[109]],[[120419,120419],"mapped",[110]],[[120420,120420],"mapped",[111]],[[120421,120421],"mapped",[112]],[[120422,120422],"mapped",[113]],[[120423,120423],"mapped",[114]],[[120424,120424],"mapped",[115]],[[120425,120425],"mapped",[116]],[[120426,120426],"mapped",[117]],[[120427,120427],"mapped",[118]],[[120428,120428],"mapped",[119]],[[120429,120429],"mapped",[120]],[[120430,120430],"mapped",[121]],[[120431,120431],"mapped",[122]],[[120432,120432],"mapped",[97]],[[120433,120433],"mapped",[98]],[[120434,120434],"mapped",[99]],[[120435,120435],"mapped",[100]],[[120436,120436],"mapped",[101]],[[120437,120437],"mapped",[102]],[[120438,120438],"mapped",[103]],[[120439,120439],"mapped",[104]],[[120440,120440],"mapped",[105]],[[120441,120441],"mapped",[106]],[[120442,120442],"mapped",[107]],[[120443,120443],"mapped",[108]],[[120444,120444],"mapped",[109]],[[120445,120445],"mapped",[110]],[[120446,120446],"mapped",[111]],[[120447,120447],"mapped",[112]],[[120448,120448],"mapped",[113]],[[120449,120449],"mapped",[114]],[[120450,120450],"mapped",[115]],[[120451,120451],"mapped",[116]],[[120452,120452],"mapped",[117]],[[120453,120453],"mapped",[118]],[[120454,120454],"mapped",[119]],[[120455,120455],"mapped",[120]],[[120456,120456],"mapped",[121]],[[120457,120457],"mapped",[122]],[[120458,120458],"mapped",[97]],[[120459,120459],"mapped",[98]],[[120460,120460],"mapped",[99]],[[120461,120461],"mapped",[100]],[[120462,120462],"mapped",[101]],[[120463,120463],"mapped",[102]],[[120464,120464],"mapped",[103]],[[120465,120465],"mapped",[104]],[[120466,120466],"mapped",[105]],[[120467,120467],"mapped",[106]],[[120468,120468],"mapped",[107]],[[120469,120469],"mapped",[108]],[[120470,120470],"mapped",[109]],[[120471,120471],"mapped",[110]],[[120472,120472],"mapped",[111]],[[120473,120473],"mapped",[112]],[[120474,120474],"mapped",[113]],[[120475,120475],"mapped",[114]],[[120476,120476],"mapped",[115]],[[120477,120477],"mapped",[116]],[[120478,120478],"mapped",[117]],[[120479,120479],"mapped",[118]],[[120480,120480],"mapped",[119]],[[120481,120481],"mapped",[120]],[[120482,120482],"mapped",[121]],[[120483,120483],"mapped",[122]],[[120484,120484],"mapped",[305]],[[120485,120485],"mapped",[567]],[[120486,120487],"disallowed"],[[120488,120488],"mapped",[945]],[[120489,120489],"mapped",[946]],[[120490,120490],"mapped",[947]],[[120491,120491],"mapped",[948]],[[120492,120492],"mapped",[949]],[[120493,120493],"mapped",[950]],[[120494,120494],"mapped",[951]],[[120495,120495],"mapped",[952]],[[120496,120496],"mapped",[953]],[[120497,120497],"mapped",[954]],[[120498,120498],"mapped",[955]],[[120499,120499],"mapped",[956]],[[120500,120500],"mapped",[957]],[[120501,120501],"mapped",[958]],[[120502,120502],"mapped",[959]],[[120503,120503],"mapped",[960]],[[120504,120504],"mapped",[961]],[[120505,120505],"mapped",[952]],[[120506,120506],"mapped",[963]],[[120507,120507],"mapped",[964]],[[120508,120508],"mapped",[965]],[[120509,120509],"mapped",[966]],[[120510,120510],"mapped",[967]],[[120511,120511],"mapped",[968]],[[120512,120512],"mapped",[969]],[[120513,120513],"mapped",[8711]],[[120514,120514],"mapped",[945]],[[120515,120515],"mapped",[946]],[[120516,120516],"mapped",[947]],[[120517,120517],"mapped",[948]],[[120518,120518],"mapped",[949]],[[120519,120519],"mapped",[950]],[[120520,120520],"mapped",[951]],[[120521,120521],"mapped",[952]],[[120522,120522],"mapped",[953]],[[120523,120523],"mapped",[954]],[[120524,120524],"mapped",[955]],[[120525,120525],"mapped",[956]],[[120526,120526],"mapped",[957]],[[120527,120527],"mapped",[958]],[[120528,120528],"mapped",[959]],[[120529,120529],"mapped",[960]],[[120530,120530],"mapped",[961]],[[120531,120532],"mapped",[963]],[[120533,120533],"mapped",[964]],[[120534,120534],"mapped",[965]],[[120535,120535],"mapped",[966]],[[120536,120536],"mapped",[967]],[[120537,120537],"mapped",[968]],[[120538,120538],"mapped",[969]],[[120539,120539],"mapped",[8706]],[[120540,120540],"mapped",[949]],[[120541,120541],"mapped",[952]],[[120542,120542],"mapped",[954]],[[120543,120543],"mapped",[966]],[[120544,120544],"mapped",[961]],[[120545,120545],"mapped",[960]],[[120546,120546],"mapped",[945]],[[120547,120547],"mapped",[946]],[[120548,120548],"mapped",[947]],[[120549,120549],"mapped",[948]],[[120550,120550],"mapped",[949]],[[120551,120551],"mapped",[950]],[[120552,120552],"mapped",[951]],[[120553,120553],"mapped",[952]],[[120554,120554],"mapped",[953]],[[120555,120555],"mapped",[954]],[[120556,120556],"mapped",[955]],[[120557,120557],"mapped",[956]],[[120558,120558],"mapped",[957]],[[120559,120559],"mapped",[958]],[[120560,120560],"mapped",[959]],[[120561,120561],"mapped",[960]],[[120562,120562],"mapped",[961]],[[120563,120563],"mapped",[952]],[[120564,120564],"mapped",[963]],[[120565,120565],"mapped",[964]],[[120566,120566],"mapped",[965]],[[120567,120567],"mapped",[966]],[[120568,120568],"mapped",[967]],[[120569,120569],"mapped",[968]],[[120570,120570],"mapped",[969]],[[120571,120571],"mapped",[8711]],[[120572,120572],"mapped",[945]],[[120573,120573],"mapped",[946]],[[120574,120574],"mapped",[947]],[[120575,120575],"mapped",[948]],[[120576,120576],"mapped",[949]],[[120577,120577],"mapped",[950]],[[120578,120578],"mapped",[951]],[[120579,120579],"mapped",[952]],[[120580,120580],"mapped",[953]],[[120581,120581],"mapped",[954]],[[120582,120582],"mapped",[955]],[[120583,120583],"mapped",[956]],[[120584,120584],"mapped",[957]],[[120585,120585],"mapped",[958]],[[120586,120586],"mapped",[959]],[[120587,120587],"mapped",[960]],[[120588,120588],"mapped",[961]],[[120589,120590],"mapped",[963]],[[120591,120591],"mapped",[964]],[[120592,120592],"mapped",[965]],[[120593,120593],"mapped",[966]],[[120594,120594],"mapped",[967]],[[120595,120595],"mapped",[968]],[[120596,120596],"mapped",[969]],[[120597,120597],"mapped",[8706]],[[120598,120598],"mapped",[949]],[[120599,120599],"mapped",[952]],[[120600,120600],"mapped",[954]],[[120601,120601],"mapped",[966]],[[120602,120602],"mapped",[961]],[[120603,120603],"mapped",[960]],[[120604,120604],"mapped",[945]],[[120605,120605],"mapped",[946]],[[120606,120606],"mapped",[947]],[[120607,120607],"mapped",[948]],[[120608,120608],"mapped",[949]],[[120609,120609],"mapped",[950]],[[120610,120610],"mapped",[951]],[[120611,120611],"mapped",[952]],[[120612,120612],"mapped",[953]],[[120613,120613],"mapped",[954]],[[120614,120614],"mapped",[955]],[[120615,120615],"mapped",[956]],[[120616,120616],"mapped",[957]],[[120617,120617],"mapped",[958]],[[120618,120618],"mapped",[959]],[[120619,120619],"mapped",[960]],[[120620,120620],"mapped",[961]],[[120621,120621],"mapped",[952]],[[120622,120622],"mapped",[963]],[[120623,120623],"mapped",[964]],[[120624,120624],"mapped",[965]],[[120625,120625],"mapped",[966]],[[120626,120626],"mapped",[967]],[[120627,120627],"mapped",[968]],[[120628,120628],"mapped",[969]],[[120629,120629],"mapped",[8711]],[[120630,120630],"mapped",[945]],[[120631,120631],"mapped",[946]],[[120632,120632],"mapped",[947]],[[120633,120633],"mapped",[948]],[[120634,120634],"mapped",[949]],[[120635,120635],"mapped",[950]],[[120636,120636],"mapped",[951]],[[120637,120637],"mapped",[952]],[[120638,120638],"mapped",[953]],[[120639,120639],"mapped",[954]],[[120640,120640],"mapped",[955]],[[120641,120641],"mapped",[956]],[[120642,120642],"mapped",[957]],[[120643,120643],"mapped",[958]],[[120644,120644],"mapped",[959]],[[120645,120645],"mapped",[960]],[[120646,120646],"mapped",[961]],[[120647,120648],"mapped",[963]],[[120649,120649],"mapped",[964]],[[120650,120650],"mapped",[965]],[[120651,120651],"mapped",[966]],[[120652,120652],"mapped",[967]],[[120653,120653],"mapped",[968]],[[120654,120654],"mapped",[969]],[[120655,120655],"mapped",[8706]],[[120656,120656],"mapped",[949]],[[120657,120657],"mapped",[952]],[[120658,120658],"mapped",[954]],[[120659,120659],"mapped",[966]],[[120660,120660],"mapped",[961]],[[120661,120661],"mapped",[960]],[[120662,120662],"mapped",[945]],[[120663,120663],"mapped",[946]],[[120664,120664],"mapped",[947]],[[120665,120665],"mapped",[948]],[[120666,120666],"mapped",[949]],[[120667,120667],"mapped",[950]],[[120668,120668],"mapped",[951]],[[120669,120669],"mapped",[952]],[[120670,120670],"mapped",[953]],[[120671,120671],"mapped",[954]],[[120672,120672],"mapped",[955]],[[120673,120673],"mapped",[956]],[[120674,120674],"mapped",[957]],[[120675,120675],"mapped",[958]],[[120676,120676],"mapped",[959]],[[120677,120677],"mapped",[960]],[[120678,120678],"mapped",[961]],[[120679,120679],"mapped",[952]],[[120680,120680],"mapped",[963]],[[120681,120681],"mapped",[964]],[[120682,120682],"mapped",[965]],[[120683,120683],"mapped",[966]],[[120684,120684],"mapped",[967]],[[120685,120685],"mapped",[968]],[[120686,120686],"mapped",[969]],[[120687,120687],"mapped",[8711]],[[120688,120688],"mapped",[945]],[[120689,120689],"mapped",[946]],[[120690,120690],"mapped",[947]],[[120691,120691],"mapped",[948]],[[120692,120692],"mapped",[949]],[[120693,120693],"mapped",[950]],[[120694,120694],"mapped",[951]],[[120695,120695],"mapped",[952]],[[120696,120696],"mapped",[953]],[[120697,120697],"mapped",[954]],[[120698,120698],"mapped",[955]],[[120699,120699],"mapped",[956]],[[120700,120700],"mapped",[957]],[[120701,120701],"mapped",[958]],[[120702,120702],"mapped",[959]],[[120703,120703],"mapped",[960]],[[120704,120704],"mapped",[961]],[[120705,120706],"mapped",[963]],[[120707,120707],"mapped",[964]],[[120708,120708],"mapped",[965]],[[120709,120709],"mapped",[966]],[[120710,120710],"mapped",[967]],[[120711,120711],"mapped",[968]],[[120712,120712],"mapped",[969]],[[120713,120713],"mapped",[8706]],[[120714,120714],"mapped",[949]],[[120715,120715],"mapped",[952]],[[120716,120716],"mapped",[954]],[[120717,120717],"mapped",[966]],[[120718,120718],"mapped",[961]],[[120719,120719],"mapped",[960]],[[120720,120720],"mapped",[945]],[[120721,120721],"mapped",[946]],[[120722,120722],"mapped",[947]],[[120723,120723],"mapped",[948]],[[120724,120724],"mapped",[949]],[[120725,120725],"mapped",[950]],[[120726,120726],"mapped",[951]],[[120727,120727],"mapped",[952]],[[120728,120728],"mapped",[953]],[[120729,120729],"mapped",[954]],[[120730,120730],"mapped",[955]],[[120731,120731],"mapped",[956]],[[120732,120732],"mapped",[957]],[[120733,120733],"mapped",[958]],[[120734,120734],"mapped",[959]],[[120735,120735],"mapped",[960]],[[120736,120736],"mapped",[961]],[[120737,120737],"mapped",[952]],[[120738,120738],"mapped",[963]],[[120739,120739],"mapped",[964]],[[120740,120740],"mapped",[965]],[[120741,120741],"mapped",[966]],[[120742,120742],"mapped",[967]],[[120743,120743],"mapped",[968]],[[120744,120744],"mapped",[969]],[[120745,120745],"mapped",[8711]],[[120746,120746],"mapped",[945]],[[120747,120747],"mapped",[946]],[[120748,120748],"mapped",[947]],[[120749,120749],"mapped",[948]],[[120750,120750],"mapped",[949]],[[120751,120751],"mapped",[950]],[[120752,120752],"mapped",[951]],[[120753,120753],"mapped",[952]],[[120754,120754],"mapped",[953]],[[120755,120755],"mapped",[954]],[[120756,120756],"mapped",[955]],[[120757,120757],"mapped",[956]],[[120758,120758],"mapped",[957]],[[120759,120759],"mapped",[958]],[[120760,120760],"mapped",[959]],[[120761,120761],"mapped",[960]],[[120762,120762],"mapped",[961]],[[120763,120764],"mapped",[963]],[[120765,120765],"mapped",[964]],[[120766,120766],"mapped",[965]],[[120767,120767],"mapped",[966]],[[120768,120768],"mapped",[967]],[[120769,120769],"mapped",[968]],[[120770,120770],"mapped",[969]],[[120771,120771],"mapped",[8706]],[[120772,120772],"mapped",[949]],[[120773,120773],"mapped",[952]],[[120774,120774],"mapped",[954]],[[120775,120775],"mapped",[966]],[[120776,120776],"mapped",[961]],[[120777,120777],"mapped",[960]],[[120778,120779],"mapped",[989]],[[120780,120781],"disallowed"],[[120782,120782],"mapped",[48]],[[120783,120783],"mapped",[49]],[[120784,120784],"mapped",[50]],[[120785,120785],"mapped",[51]],[[120786,120786],"mapped",[52]],[[120787,120787],"mapped",[53]],[[120788,120788],"mapped",[54]],[[120789,120789],"mapped",[55]],[[120790,120790],"mapped",[56]],[[120791,120791],"mapped",[57]],[[120792,120792],"mapped",[48]],[[120793,120793],"mapped",[49]],[[120794,120794],"mapped",[50]],[[120795,120795],"mapped",[51]],[[120796,120796],"mapped",[52]],[[120797,120797],"mapped",[53]],[[120798,120798],"mapped",[54]],[[120799,120799],"mapped",[55]],[[120800,120800],"mapped",[56]],[[120801,120801],"mapped",[57]],[[120802,120802],"mapped",[48]],[[120803,120803],"mapped",[49]],[[120804,120804],"mapped",[50]],[[120805,120805],"mapped",[51]],[[120806,120806],"mapped",[52]],[[120807,120807],"mapped",[53]],[[120808,120808],"mapped",[54]],[[120809,120809],"mapped",[55]],[[120810,120810],"mapped",[56]],[[120811,120811],"mapped",[57]],[[120812,120812],"mapped",[48]],[[120813,120813],"mapped",[49]],[[120814,120814],"mapped",[50]],[[120815,120815],"mapped",[51]],[[120816,120816],"mapped",[52]],[[120817,120817],"mapped",[53]],[[120818,120818],"mapped",[54]],[[120819,120819],"mapped",[55]],[[120820,120820],"mapped",[56]],[[120821,120821],"mapped",[57]],[[120822,120822],"mapped",[48]],[[120823,120823],"mapped",[49]],[[120824,120824],"mapped",[50]],[[120825,120825],"mapped",[51]],[[120826,120826],"mapped",[52]],[[120827,120827],"mapped",[53]],[[120828,120828],"mapped",[54]],[[120829,120829],"mapped",[55]],[[120830,120830],"mapped",[56]],[[120831,120831],"mapped",[57]],[[120832,121343],"valid",[],"NV8"],[[121344,121398],"valid"],[[121399,121402],"valid",[],"NV8"],[[121403,121452],"valid"],[[121453,121460],"valid",[],"NV8"],[[121461,121461],"valid"],[[121462,121475],"valid",[],"NV8"],[[121476,121476],"valid"],[[121477,121483],"valid",[],"NV8"],[[121484,121498],"disallowed"],[[121499,121503],"valid"],[[121504,121504],"disallowed"],[[121505,121519],"valid"],[[121520,124927],"disallowed"],[[124928,125124],"valid"],[[125125,125126],"disallowed"],[[125127,125135],"valid",[],"NV8"],[[125136,125142],"valid"],[[125143,126463],"disallowed"],[[126464,126464],"mapped",[1575]],[[126465,126465],"mapped",[1576]],[[126466,126466],"mapped",[1580]],[[126467,126467],"mapped",[1583]],[[126468,126468],"disallowed"],[[126469,126469],"mapped",[1608]],[[126470,126470],"mapped",[1586]],[[126471,126471],"mapped",[1581]],[[126472,126472],"mapped",[1591]],[[126473,126473],"mapped",[1610]],[[126474,126474],"mapped",[1603]],[[126475,126475],"mapped",[1604]],[[126476,126476],"mapped",[1605]],[[126477,126477],"mapped",[1606]],[[126478,126478],"mapped",[1587]],[[126479,126479],"mapped",[1593]],[[126480,126480],"mapped",[1601]],[[126481,126481],"mapped",[1589]],[[126482,126482],"mapped",[1602]],[[126483,126483],"mapped",[1585]],[[126484,126484],"mapped",[1588]],[[126485,126485],"mapped",[1578]],[[126486,126486],"mapped",[1579]],[[126487,126487],"mapped",[1582]],[[126488,126488],"mapped",[1584]],[[126489,126489],"mapped",[1590]],[[126490,126490],"mapped",[1592]],[[126491,126491],"mapped",[1594]],[[126492,126492],"mapped",[1646]],[[126493,126493],"mapped",[1722]],[[126494,126494],"mapped",[1697]],[[126495,126495],"mapped",[1647]],[[126496,126496],"disallowed"],[[126497,126497],"mapped",[1576]],[[126498,126498],"mapped",[1580]],[[126499,126499],"disallowed"],[[126500,126500],"mapped",[1607]],[[126501,126502],"disallowed"],[[126503,126503],"mapped",[1581]],[[126504,126504],"disallowed"],[[126505,126505],"mapped",[1610]],[[126506,126506],"mapped",[1603]],[[126507,126507],"mapped",[1604]],[[126508,126508],"mapped",[1605]],[[126509,126509],"mapped",[1606]],[[126510,126510],"mapped",[1587]],[[126511,126511],"mapped",[1593]],[[126512,126512],"mapped",[1601]],[[126513,126513],"mapped",[1589]],[[126514,126514],"mapped",[1602]],[[126515,126515],"disallowed"],[[126516,126516],"mapped",[1588]],[[126517,126517],"mapped",[1578]],[[126518,126518],"mapped",[1579]],[[126519,126519],"mapped",[1582]],[[126520,126520],"disallowed"],[[126521,126521],"mapped",[1590]],[[126522,126522],"disallowed"],[[126523,126523],"mapped",[1594]],[[126524,126529],"disallowed"],[[126530,126530],"mapped",[1580]],[[126531,126534],"disallowed"],[[126535,126535],"mapped",[1581]],[[126536,126536],"disallowed"],[[126537,126537],"mapped",[1610]],[[126538,126538],"disallowed"],[[126539,126539],"mapped",[1604]],[[126540,126540],"disallowed"],[[126541,126541],"mapped",[1606]],[[126542,126542],"mapped",[1587]],[[126543,126543],"mapped",[1593]],[[126544,126544],"disallowed"],[[126545,126545],"mapped",[1589]],[[126546,126546],"mapped",[1602]],[[126547,126547],"disallowed"],[[126548,126548],"mapped",[1588]],[[126549,126550],"disallowed"],[[126551,126551],"mapped",[1582]],[[126552,126552],"disallowed"],[[126553,126553],"mapped",[1590]],[[126554,126554],"disallowed"],[[126555,126555],"mapped",[1594]],[[126556,126556],"disallowed"],[[126557,126557],"mapped",[1722]],[[126558,126558],"disallowed"],[[126559,126559],"mapped",[1647]],[[126560,126560],"disallowed"],[[126561,126561],"mapped",[1576]],[[126562,126562],"mapped",[1580]],[[126563,126563],"disallowed"],[[126564,126564],"mapped",[1607]],[[126565,126566],"disallowed"],[[126567,126567],"mapped",[1581]],[[126568,126568],"mapped",[1591]],[[126569,126569],"mapped",[1610]],[[126570,126570],"mapped",[1603]],[[126571,126571],"disallowed"],[[126572,126572],"mapped",[1605]],[[126573,126573],"mapped",[1606]],[[126574,126574],"mapped",[1587]],[[126575,126575],"mapped",[1593]],[[126576,126576],"mapped",[1601]],[[126577,126577],"mapped",[1589]],[[126578,126578],"mapped",[1602]],[[126579,126579],"disallowed"],[[126580,126580],"mapped",[1588]],[[126581,126581],"mapped",[1578]],[[126582,126582],"mapped",[1579]],[[126583,126583],"mapped",[1582]],[[126584,126584],"disallowed"],[[126585,126585],"mapped",[1590]],[[126586,126586],"mapped",[1592]],[[126587,126587],"mapped",[1594]],[[126588,126588],"mapped",[1646]],[[126589,126589],"disallowed"],[[126590,126590],"mapped",[1697]],[[126591,126591],"disallowed"],[[126592,126592],"mapped",[1575]],[[126593,126593],"mapped",[1576]],[[126594,126594],"mapped",[1580]],[[126595,126595],"mapped",[1583]],[[126596,126596],"mapped",[1607]],[[126597,126597],"mapped",[1608]],[[126598,126598],"mapped",[1586]],[[126599,126599],"mapped",[1581]],[[126600,126600],"mapped",[1591]],[[126601,126601],"mapped",[1610]],[[126602,126602],"disallowed"],[[126603,126603],"mapped",[1604]],[[126604,126604],"mapped",[1605]],[[126605,126605],"mapped",[1606]],[[126606,126606],"mapped",[1587]],[[126607,126607],"mapped",[1593]],[[126608,126608],"mapped",[1601]],[[126609,126609],"mapped",[1589]],[[126610,126610],"mapped",[1602]],[[126611,126611],"mapped",[1585]],[[126612,126612],"mapped",[1588]],[[126613,126613],"mapped",[1578]],[[126614,126614],"mapped",[1579]],[[126615,126615],"mapped",[1582]],[[126616,126616],"mapped",[1584]],[[126617,126617],"mapped",[1590]],[[126618,126618],"mapped",[1592]],[[126619,126619],"mapped",[1594]],[[126620,126624],"disallowed"],[[126625,126625],"mapped",[1576]],[[126626,126626],"mapped",[1580]],[[126627,126627],"mapped",[1583]],[[126628,126628],"disallowed"],[[126629,126629],"mapped",[1608]],[[126630,126630],"mapped",[1586]],[[126631,126631],"mapped",[1581]],[[126632,126632],"mapped",[1591]],[[126633,126633],"mapped",[1610]],[[126634,126634],"disallowed"],[[126635,126635],"mapped",[1604]],[[126636,126636],"mapped",[1605]],[[126637,126637],"mapped",[1606]],[[126638,126638],"mapped",[1587]],[[126639,126639],"mapped",[1593]],[[126640,126640],"mapped",[1601]],[[126641,126641],"mapped",[1589]],[[126642,126642],"mapped",[1602]],[[126643,126643],"mapped",[1585]],[[126644,126644],"mapped",[1588]],[[126645,126645],"mapped",[1578]],[[126646,126646],"mapped",[1579]],[[126647,126647],"mapped",[1582]],[[126648,126648],"mapped",[1584]],[[126649,126649],"mapped",[1590]],[[126650,126650],"mapped",[1592]],[[126651,126651],"mapped",[1594]],[[126652,126703],"disallowed"],[[126704,126705],"valid",[],"NV8"],[[126706,126975],"disallowed"],[[126976,127019],"valid",[],"NV8"],[[127020,127023],"disallowed"],[[127024,127123],"valid",[],"NV8"],[[127124,127135],"disallowed"],[[127136,127150],"valid",[],"NV8"],[[127151,127152],"disallowed"],[[127153,127166],"valid",[],"NV8"],[[127167,127167],"valid",[],"NV8"],[[127168,127168],"disallowed"],[[127169,127183],"valid",[],"NV8"],[[127184,127184],"disallowed"],[[127185,127199],"valid",[],"NV8"],[[127200,127221],"valid",[],"NV8"],[[127222,127231],"disallowed"],[[127232,127232],"disallowed"],[[127233,127233],"disallowed_STD3_mapped",[48,44]],[[127234,127234],"disallowed_STD3_mapped",[49,44]],[[127235,127235],"disallowed_STD3_mapped",[50,44]],[[127236,127236],"disallowed_STD3_mapped",[51,44]],[[127237,127237],"disallowed_STD3_mapped",[52,44]],[[127238,127238],"disallowed_STD3_mapped",[53,44]],[[127239,127239],"disallowed_STD3_mapped",[54,44]],[[127240,127240],"disallowed_STD3_mapped",[55,44]],[[127241,127241],"disallowed_STD3_mapped",[56,44]],[[127242,127242],"disallowed_STD3_mapped",[57,44]],[[127243,127244],"valid",[],"NV8"],[[127245,127247],"disallowed"],[[127248,127248],"disallowed_STD3_mapped",[40,97,41]],[[127249,127249],"disallowed_STD3_mapped",[40,98,41]],[[127250,127250],"disallowed_STD3_mapped",[40,99,41]],[[127251,127251],"disallowed_STD3_mapped",[40,100,41]],[[127252,127252],"disallowed_STD3_mapped",[40,101,41]],[[127253,127253],"disallowed_STD3_mapped",[40,102,41]],[[127254,127254],"disallowed_STD3_mapped",[40,103,41]],[[127255,127255],"disallowed_STD3_mapped",[40,104,41]],[[127256,127256],"disallowed_STD3_mapped",[40,105,41]],[[127257,127257],"disallowed_STD3_mapped",[40,106,41]],[[127258,127258],"disallowed_STD3_mapped",[40,107,41]],[[127259,127259],"disallowed_STD3_mapped",[40,108,41]],[[127260,127260],"disallowed_STD3_mapped",[40,109,41]],[[127261,127261],"disallowed_STD3_mapped",[40,110,41]],[[127262,127262],"disallowed_STD3_mapped",[40,111,41]],[[127263,127263],"disallowed_STD3_mapped",[40,112,41]],[[127264,127264],"disallowed_STD3_mapped",[40,113,41]],[[127265,127265],"disallowed_STD3_mapped",[40,114,41]],[[127266,127266],"disallowed_STD3_mapped",[40,115,41]],[[127267,127267],"disallowed_STD3_mapped",[40,116,41]],[[127268,127268],"disallowed_STD3_mapped",[40,117,41]],[[127269,127269],"disallowed_STD3_mapped",[40,118,41]],[[127270,127270],"disallowed_STD3_mapped",[40,119,41]],[[127271,127271],"disallowed_STD3_mapped",[40,120,41]],[[127272,127272],"disallowed_STD3_mapped",[40,121,41]],[[127273,127273],"disallowed_STD3_mapped",[40,122,41]],[[127274,127274],"mapped",[12308,115,12309]],[[127275,127275],"mapped",[99]],[[127276,127276],"mapped",[114]],[[127277,127277],"mapped",[99,100]],[[127278,127278],"mapped",[119,122]],[[127279,127279],"disallowed"],[[127280,127280],"mapped",[97]],[[127281,127281],"mapped",[98]],[[127282,127282],"mapped",[99]],[[127283,127283],"mapped",[100]],[[127284,127284],"mapped",[101]],[[127285,127285],"mapped",[102]],[[127286,127286],"mapped",[103]],[[127287,127287],"mapped",[104]],[[127288,127288],"mapped",[105]],[[127289,127289],"mapped",[106]],[[127290,127290],"mapped",[107]],[[127291,127291],"mapped",[108]],[[127292,127292],"mapped",[109]],[[127293,127293],"mapped",[110]],[[127294,127294],"mapped",[111]],[[127295,127295],"mapped",[112]],[[127296,127296],"mapped",[113]],[[127297,127297],"mapped",[114]],[[127298,127298],"mapped",[115]],[[127299,127299],"mapped",[116]],[[127300,127300],"mapped",[117]],[[127301,127301],"mapped",[118]],[[127302,127302],"mapped",[119]],[[127303,127303],"mapped",[120]],[[127304,127304],"mapped",[121]],[[127305,127305],"mapped",[122]],[[127306,127306],"mapped",[104,118]],[[127307,127307],"mapped",[109,118]],[[127308,127308],"mapped",[115,100]],[[127309,127309],"mapped",[115,115]],[[127310,127310],"mapped",[112,112,118]],[[127311,127311],"mapped",[119,99]],[[127312,127318],"valid",[],"NV8"],[[127319,127319],"valid",[],"NV8"],[[127320,127326],"valid",[],"NV8"],[[127327,127327],"valid",[],"NV8"],[[127328,127337],"valid",[],"NV8"],[[127338,127338],"mapped",[109,99]],[[127339,127339],"mapped",[109,100]],[[127340,127343],"disallowed"],[[127344,127352],"valid",[],"NV8"],[[127353,127353],"valid",[],"NV8"],[[127354,127354],"valid",[],"NV8"],[[127355,127356],"valid",[],"NV8"],[[127357,127358],"valid",[],"NV8"],[[127359,127359],"valid",[],"NV8"],[[127360,127369],"valid",[],"NV8"],[[127370,127373],"valid",[],"NV8"],[[127374,127375],"valid",[],"NV8"],[[127376,127376],"mapped",[100,106]],[[127377,127386],"valid",[],"NV8"],[[127387,127461],"disallowed"],[[127462,127487],"valid",[],"NV8"],[[127488,127488],"mapped",[12411,12363]],[[127489,127489],"mapped",[12467,12467]],[[127490,127490],"mapped",[12469]],[[127491,127503],"disallowed"],[[127504,127504],"mapped",[25163]],[[127505,127505],"mapped",[23383]],[[127506,127506],"mapped",[21452]],[[127507,127507],"mapped",[12487]],[[127508,127508],"mapped",[20108]],[[127509,127509],"mapped",[22810]],[[127510,127510],"mapped",[35299]],[[127511,127511],"mapped",[22825]],[[127512,127512],"mapped",[20132]],[[127513,127513],"mapped",[26144]],[[127514,127514],"mapped",[28961]],[[127515,127515],"mapped",[26009]],[[127516,127516],"mapped",[21069]],[[127517,127517],"mapped",[24460]],[[127518,127518],"mapped",[20877]],[[127519,127519],"mapped",[26032]],[[127520,127520],"mapped",[21021]],[[127521,127521],"mapped",[32066]],[[127522,127522],"mapped",[29983]],[[127523,127523],"mapped",[36009]],[[127524,127524],"mapped",[22768]],[[127525,127525],"mapped",[21561]],[[127526,127526],"mapped",[28436]],[[127527,127527],"mapped",[25237]],[[127528,127528],"mapped",[25429]],[[127529,127529],"mapped",[19968]],[[127530,127530],"mapped",[19977]],[[127531,127531],"mapped",[36938]],[[127532,127532],"mapped",[24038]],[[127533,127533],"mapped",[20013]],[[127534,127534],"mapped",[21491]],[[127535,127535],"mapped",[25351]],[[127536,127536],"mapped",[36208]],[[127537,127537],"mapped",[25171]],[[127538,127538],"mapped",[31105]],[[127539,127539],"mapped",[31354]],[[127540,127540],"mapped",[21512]],[[127541,127541],"mapped",[28288]],[[127542,127542],"mapped",[26377]],[[127543,127543],"mapped",[26376]],[[127544,127544],"mapped",[30003]],[[127545,127545],"mapped",[21106]],[[127546,127546],"mapped",[21942]],[[127547,127551],"disallowed"],[[127552,127552],"mapped",[12308,26412,12309]],[[127553,127553],"mapped",[12308,19977,12309]],[[127554,127554],"mapped",[12308,20108,12309]],[[127555,127555],"mapped",[12308,23433,12309]],[[127556,127556],"mapped",[12308,28857,12309]],[[127557,127557],"mapped",[12308,25171,12309]],[[127558,127558],"mapped",[12308,30423,12309]],[[127559,127559],"mapped",[12308,21213,12309]],[[127560,127560],"mapped",[12308,25943,12309]],[[127561,127567],"disallowed"],[[127568,127568],"mapped",[24471]],[[127569,127569],"mapped",[21487]],[[127570,127743],"disallowed"],[[127744,127776],"valid",[],"NV8"],[[127777,127788],"valid",[],"NV8"],[[127789,127791],"valid",[],"NV8"],[[127792,127797],"valid",[],"NV8"],[[127798,127798],"valid",[],"NV8"],[[127799,127868],"valid",[],"NV8"],[[127869,127869],"valid",[],"NV8"],[[127870,127871],"valid",[],"NV8"],[[127872,127891],"valid",[],"NV8"],[[127892,127903],"valid",[],"NV8"],[[127904,127940],"valid",[],"NV8"],[[127941,127941],"valid",[],"NV8"],[[127942,127946],"valid",[],"NV8"],[[127947,127950],"valid",[],"NV8"],[[127951,127955],"valid",[],"NV8"],[[127956,127967],"valid",[],"NV8"],[[127968,127984],"valid",[],"NV8"],[[127985,127991],"valid",[],"NV8"],[[127992,127999],"valid",[],"NV8"],[[128e3,128062],"valid",[],"NV8"],[[128063,128063],"valid",[],"NV8"],[[128064,128064],"valid",[],"NV8"],[[128065,128065],"valid",[],"NV8"],[[128066,128247],"valid",[],"NV8"],[[128248,128248],"valid",[],"NV8"],[[128249,128252],"valid",[],"NV8"],[[128253,128254],"valid",[],"NV8"],[[128255,128255],"valid",[],"NV8"],[[128256,128317],"valid",[],"NV8"],[[128318,128319],"valid",[],"NV8"],[[128320,128323],"valid",[],"NV8"],[[128324,128330],"valid",[],"NV8"],[[128331,128335],"valid",[],"NV8"],[[128336,128359],"valid",[],"NV8"],[[128360,128377],"valid",[],"NV8"],[[128378,128378],"disallowed"],[[128379,128419],"valid",[],"NV8"],[[128420,128420],"disallowed"],[[128421,128506],"valid",[],"NV8"],[[128507,128511],"valid",[],"NV8"],[[128512,128512],"valid",[],"NV8"],[[128513,128528],"valid",[],"NV8"],[[128529,128529],"valid",[],"NV8"],[[128530,128532],"valid",[],"NV8"],[[128533,128533],"valid",[],"NV8"],[[128534,128534],"valid",[],"NV8"],[[128535,128535],"valid",[],"NV8"],[[128536,128536],"valid",[],"NV8"],[[128537,128537],"valid",[],"NV8"],[[128538,128538],"valid",[],"NV8"],[[128539,128539],"valid",[],"NV8"],[[128540,128542],"valid",[],"NV8"],[[128543,128543],"valid",[],"NV8"],[[128544,128549],"valid",[],"NV8"],[[128550,128551],"valid",[],"NV8"],[[128552,128555],"valid",[],"NV8"],[[128556,128556],"valid",[],"NV8"],[[128557,128557],"valid",[],"NV8"],[[128558,128559],"valid",[],"NV8"],[[128560,128563],"valid",[],"NV8"],[[128564,128564],"valid",[],"NV8"],[[128565,128576],"valid",[],"NV8"],[[128577,128578],"valid",[],"NV8"],[[128579,128580],"valid",[],"NV8"],[[128581,128591],"valid",[],"NV8"],[[128592,128639],"valid",[],"NV8"],[[128640,128709],"valid",[],"NV8"],[[128710,128719],"valid",[],"NV8"],[[128720,128720],"valid",[],"NV8"],[[128721,128735],"disallowed"],[[128736,128748],"valid",[],"NV8"],[[128749,128751],"disallowed"],[[128752,128755],"valid",[],"NV8"],[[128756,128767],"disallowed"],[[128768,128883],"valid",[],"NV8"],[[128884,128895],"disallowed"],[[128896,128980],"valid",[],"NV8"],[[128981,129023],"disallowed"],[[129024,129035],"valid",[],"NV8"],[[129036,129039],"disallowed"],[[129040,129095],"valid",[],"NV8"],[[129096,129103],"disallowed"],[[129104,129113],"valid",[],"NV8"],[[129114,129119],"disallowed"],[[129120,129159],"valid",[],"NV8"],[[129160,129167],"disallowed"],[[129168,129197],"valid",[],"NV8"],[[129198,129295],"disallowed"],[[129296,129304],"valid",[],"NV8"],[[129305,129407],"disallowed"],[[129408,129412],"valid",[],"NV8"],[[129413,129471],"disallowed"],[[129472,129472],"valid",[],"NV8"],[[129473,131069],"disallowed"],[[131070,131071],"disallowed"],[[131072,173782],"valid"],[[173783,173823],"disallowed"],[[173824,177972],"valid"],[[177973,177983],"disallowed"],[[177984,178205],"valid"],[[178206,178207],"disallowed"],[[178208,183969],"valid"],[[183970,194559],"disallowed"],[[194560,194560],"mapped",[20029]],[[194561,194561],"mapped",[20024]],[[194562,194562],"mapped",[20033]],[[194563,194563],"mapped",[131362]],[[194564,194564],"mapped",[20320]],[[194565,194565],"mapped",[20398]],[[194566,194566],"mapped",[20411]],[[194567,194567],"mapped",[20482]],[[194568,194568],"mapped",[20602]],[[194569,194569],"mapped",[20633]],[[194570,194570],"mapped",[20711]],[[194571,194571],"mapped",[20687]],[[194572,194572],"mapped",[13470]],[[194573,194573],"mapped",[132666]],[[194574,194574],"mapped",[20813]],[[194575,194575],"mapped",[20820]],[[194576,194576],"mapped",[20836]],[[194577,194577],"mapped",[20855]],[[194578,194578],"mapped",[132380]],[[194579,194579],"mapped",[13497]],[[194580,194580],"mapped",[20839]],[[194581,194581],"mapped",[20877]],[[194582,194582],"mapped",[132427]],[[194583,194583],"mapped",[20887]],[[194584,194584],"mapped",[20900]],[[194585,194585],"mapped",[20172]],[[194586,194586],"mapped",[20908]],[[194587,194587],"mapped",[20917]],[[194588,194588],"mapped",[168415]],[[194589,194589],"mapped",[20981]],[[194590,194590],"mapped",[20995]],[[194591,194591],"mapped",[13535]],[[194592,194592],"mapped",[21051]],[[194593,194593],"mapped",[21062]],[[194594,194594],"mapped",[21106]],[[194595,194595],"mapped",[21111]],[[194596,194596],"mapped",[13589]],[[194597,194597],"mapped",[21191]],[[194598,194598],"mapped",[21193]],[[194599,194599],"mapped",[21220]],[[194600,194600],"mapped",[21242]],[[194601,194601],"mapped",[21253]],[[194602,194602],"mapped",[21254]],[[194603,194603],"mapped",[21271]],[[194604,194604],"mapped",[21321]],[[194605,194605],"mapped",[21329]],[[194606,194606],"mapped",[21338]],[[194607,194607],"mapped",[21363]],[[194608,194608],"mapped",[21373]],[[194609,194611],"mapped",[21375]],[[194612,194612],"mapped",[133676]],[[194613,194613],"mapped",[28784]],[[194614,194614],"mapped",[21450]],[[194615,194615],"mapped",[21471]],[[194616,194616],"mapped",[133987]],[[194617,194617],"mapped",[21483]],[[194618,194618],"mapped",[21489]],[[194619,194619],"mapped",[21510]],[[194620,194620],"mapped",[21662]],[[194621,194621],"mapped",[21560]],[[194622,194622],"mapped",[21576]],[[194623,194623],"mapped",[21608]],[[194624,194624],"mapped",[21666]],[[194625,194625],"mapped",[21750]],[[194626,194626],"mapped",[21776]],[[194627,194627],"mapped",[21843]],[[194628,194628],"mapped",[21859]],[[194629,194630],"mapped",[21892]],[[194631,194631],"mapped",[21913]],[[194632,194632],"mapped",[21931]],[[194633,194633],"mapped",[21939]],[[194634,194634],"mapped",[21954]],[[194635,194635],"mapped",[22294]],[[194636,194636],"mapped",[22022]],[[194637,194637],"mapped",[22295]],[[194638,194638],"mapped",[22097]],[[194639,194639],"mapped",[22132]],[[194640,194640],"mapped",[20999]],[[194641,194641],"mapped",[22766]],[[194642,194642],"mapped",[22478]],[[194643,194643],"mapped",[22516]],[[194644,194644],"mapped",[22541]],[[194645,194645],"mapped",[22411]],[[194646,194646],"mapped",[22578]],[[194647,194647],"mapped",[22577]],[[194648,194648],"mapped",[22700]],[[194649,194649],"mapped",[136420]],[[194650,194650],"mapped",[22770]],[[194651,194651],"mapped",[22775]],[[194652,194652],"mapped",[22790]],[[194653,194653],"mapped",[22810]],[[194654,194654],"mapped",[22818]],[[194655,194655],"mapped",[22882]],[[194656,194656],"mapped",[136872]],[[194657,194657],"mapped",[136938]],[[194658,194658],"mapped",[23020]],[[194659,194659],"mapped",[23067]],[[194660,194660],"mapped",[23079]],[[194661,194661],"mapped",[23e3]],[[194662,194662],"mapped",[23142]],[[194663,194663],"mapped",[14062]],[[194664,194664],"disallowed"],[[194665,194665],"mapped",[23304]],[[194666,194667],"mapped",[23358]],[[194668,194668],"mapped",[137672]],[[194669,194669],"mapped",[23491]],[[194670,194670],"mapped",[23512]],[[194671,194671],"mapped",[23527]],[[194672,194672],"mapped",[23539]],[[194673,194673],"mapped",[138008]],[[194674,194674],"mapped",[23551]],[[194675,194675],"mapped",[23558]],[[194676,194676],"disallowed"],[[194677,194677],"mapped",[23586]],[[194678,194678],"mapped",[14209]],[[194679,194679],"mapped",[23648]],[[194680,194680],"mapped",[23662]],[[194681,194681],"mapped",[23744]],[[194682,194682],"mapped",[23693]],[[194683,194683],"mapped",[138724]],[[194684,194684],"mapped",[23875]],[[194685,194685],"mapped",[138726]],[[194686,194686],"mapped",[23918]],[[194687,194687],"mapped",[23915]],[[194688,194688],"mapped",[23932]],[[194689,194689],"mapped",[24033]],[[194690,194690],"mapped",[24034]],[[194691,194691],"mapped",[14383]],[[194692,194692],"mapped",[24061]],[[194693,194693],"mapped",[24104]],[[194694,194694],"mapped",[24125]],[[194695,194695],"mapped",[24169]],[[194696,194696],"mapped",[14434]],[[194697,194697],"mapped",[139651]],[[194698,194698],"mapped",[14460]],[[194699,194699],"mapped",[24240]],[[194700,194700],"mapped",[24243]],[[194701,194701],"mapped",[24246]],[[194702,194702],"mapped",[24266]],[[194703,194703],"mapped",[172946]],[[194704,194704],"mapped",[24318]],[[194705,194706],"mapped",[140081]],[[194707,194707],"mapped",[33281]],[[194708,194709],"mapped",[24354]],[[194710,194710],"mapped",[14535]],[[194711,194711],"mapped",[144056]],[[194712,194712],"mapped",[156122]],[[194713,194713],"mapped",[24418]],[[194714,194714],"mapped",[24427]],[[194715,194715],"mapped",[14563]],[[194716,194716],"mapped",[24474]],[[194717,194717],"mapped",[24525]],[[194718,194718],"mapped",[24535]],[[194719,194719],"mapped",[24569]],[[194720,194720],"mapped",[24705]],[[194721,194721],"mapped",[14650]],[[194722,194722],"mapped",[14620]],[[194723,194723],"mapped",[24724]],[[194724,194724],"mapped",[141012]],[[194725,194725],"mapped",[24775]],[[194726,194726],"mapped",[24904]],[[194727,194727],"mapped",[24908]],[[194728,194728],"mapped",[24910]],[[194729,194729],"mapped",[24908]],[[194730,194730],"mapped",[24954]],[[194731,194731],"mapped",[24974]],[[194732,194732],"mapped",[25010]],[[194733,194733],"mapped",[24996]],[[194734,194734],"mapped",[25007]],[[194735,194735],"mapped",[25054]],[[194736,194736],"mapped",[25074]],[[194737,194737],"mapped",[25078]],[[194738,194738],"mapped",[25104]],[[194739,194739],"mapped",[25115]],[[194740,194740],"mapped",[25181]],[[194741,194741],"mapped",[25265]],[[194742,194742],"mapped",[25300]],[[194743,194743],"mapped",[25424]],[[194744,194744],"mapped",[142092]],[[194745,194745],"mapped",[25405]],[[194746,194746],"mapped",[25340]],[[194747,194747],"mapped",[25448]],[[194748,194748],"mapped",[25475]],[[194749,194749],"mapped",[25572]],[[194750,194750],"mapped",[142321]],[[194751,194751],"mapped",[25634]],[[194752,194752],"mapped",[25541]],[[194753,194753],"mapped",[25513]],[[194754,194754],"mapped",[14894]],[[194755,194755],"mapped",[25705]],[[194756,194756],"mapped",[25726]],[[194757,194757],"mapped",[25757]],[[194758,194758],"mapped",[25719]],[[194759,194759],"mapped",[14956]],[[194760,194760],"mapped",[25935]],[[194761,194761],"mapped",[25964]],[[194762,194762],"mapped",[143370]],[[194763,194763],"mapped",[26083]],[[194764,194764],"mapped",[26360]],[[194765,194765],"mapped",[26185]],[[194766,194766],"mapped",[15129]],[[194767,194767],"mapped",[26257]],[[194768,194768],"mapped",[15112]],[[194769,194769],"mapped",[15076]],[[194770,194770],"mapped",[20882]],[[194771,194771],"mapped",[20885]],[[194772,194772],"mapped",[26368]],[[194773,194773],"mapped",[26268]],[[194774,194774],"mapped",[32941]],[[194775,194775],"mapped",[17369]],[[194776,194776],"mapped",[26391]],[[194777,194777],"mapped",[26395]],[[194778,194778],"mapped",[26401]],[[194779,194779],"mapped",[26462]],[[194780,194780],"mapped",[26451]],[[194781,194781],"mapped",[144323]],[[194782,194782],"mapped",[15177]],[[194783,194783],"mapped",[26618]],[[194784,194784],"mapped",[26501]],[[194785,194785],"mapped",[26706]],[[194786,194786],"mapped",[26757]],[[194787,194787],"mapped",[144493]],[[194788,194788],"mapped",[26766]],[[194789,194789],"mapped",[26655]],[[194790,194790],"mapped",[26900]],[[194791,194791],"mapped",[15261]],[[194792,194792],"mapped",[26946]],[[194793,194793],"mapped",[27043]],[[194794,194794],"mapped",[27114]],[[194795,194795],"mapped",[27304]],[[194796,194796],"mapped",[145059]],[[194797,194797],"mapped",[27355]],[[194798,194798],"mapped",[15384]],[[194799,194799],"mapped",[27425]],[[194800,194800],"mapped",[145575]],[[194801,194801],"mapped",[27476]],[[194802,194802],"mapped",[15438]],[[194803,194803],"mapped",[27506]],[[194804,194804],"mapped",[27551]],[[194805,194805],"mapped",[27578]],[[194806,194806],"mapped",[27579]],[[194807,194807],"mapped",[146061]],[[194808,194808],"mapped",[138507]],[[194809,194809],"mapped",[146170]],[[194810,194810],"mapped",[27726]],[[194811,194811],"mapped",[146620]],[[194812,194812],"mapped",[27839]],[[194813,194813],"mapped",[27853]],[[194814,194814],"mapped",[27751]],[[194815,194815],"mapped",[27926]],[[194816,194816],"mapped",[27966]],[[194817,194817],"mapped",[28023]],[[194818,194818],"mapped",[27969]],[[194819,194819],"mapped",[28009]],[[194820,194820],"mapped",[28024]],[[194821,194821],"mapped",[28037]],[[194822,194822],"mapped",[146718]],[[194823,194823],"mapped",[27956]],[[194824,194824],"mapped",[28207]],[[194825,194825],"mapped",[28270]],[[194826,194826],"mapped",[15667]],[[194827,194827],"mapped",[28363]],[[194828,194828],"mapped",[28359]],[[194829,194829],"mapped",[147153]],[[194830,194830],"mapped",[28153]],[[194831,194831],"mapped",[28526]],[[194832,194832],"mapped",[147294]],[[194833,194833],"mapped",[147342]],[[194834,194834],"mapped",[28614]],[[194835,194835],"mapped",[28729]],[[194836,194836],"mapped",[28702]],[[194837,194837],"mapped",[28699]],[[194838,194838],"mapped",[15766]],[[194839,194839],"mapped",[28746]],[[194840,194840],"mapped",[28797]],[[194841,194841],"mapped",[28791]],[[194842,194842],"mapped",[28845]],[[194843,194843],"mapped",[132389]],[[194844,194844],"mapped",[28997]],[[194845,194845],"mapped",[148067]],[[194846,194846],"mapped",[29084]],[[194847,194847],"disallowed"],[[194848,194848],"mapped",[29224]],[[194849,194849],"mapped",[29237]],[[194850,194850],"mapped",[29264]],[[194851,194851],"mapped",[149e3]],[[194852,194852],"mapped",[29312]],[[194853,194853],"mapped",[29333]],[[194854,194854],"mapped",[149301]],[[194855,194855],"mapped",[149524]],[[194856,194856],"mapped",[29562]],[[194857,194857],"mapped",[29579]],[[194858,194858],"mapped",[16044]],[[194859,194859],"mapped",[29605]],[[194860,194861],"mapped",[16056]],[[194862,194862],"mapped",[29767]],[[194863,194863],"mapped",[29788]],[[194864,194864],"mapped",[29809]],[[194865,194865],"mapped",[29829]],[[194866,194866],"mapped",[29898]],[[194867,194867],"mapped",[16155]],[[194868,194868],"mapped",[29988]],[[194869,194869],"mapped",[150582]],[[194870,194870],"mapped",[30014]],[[194871,194871],"mapped",[150674]],[[194872,194872],"mapped",[30064]],[[194873,194873],"mapped",[139679]],[[194874,194874],"mapped",[30224]],[[194875,194875],"mapped",[151457]],[[194876,194876],"mapped",[151480]],[[194877,194877],"mapped",[151620]],[[194878,194878],"mapped",[16380]],[[194879,194879],"mapped",[16392]],[[194880,194880],"mapped",[30452]],[[194881,194881],"mapped",[151795]],[[194882,194882],"mapped",[151794]],[[194883,194883],"mapped",[151833]],[[194884,194884],"mapped",[151859]],[[194885,194885],"mapped",[30494]],[[194886,194887],"mapped",[30495]],[[194888,194888],"mapped",[30538]],[[194889,194889],"mapped",[16441]],[[194890,194890],"mapped",[30603]],[[194891,194891],"mapped",[16454]],[[194892,194892],"mapped",[16534]],[[194893,194893],"mapped",[152605]],[[194894,194894],"mapped",[30798]],[[194895,194895],"mapped",[30860]],[[194896,194896],"mapped",[30924]],[[194897,194897],"mapped",[16611]],[[194898,194898],"mapped",[153126]],[[194899,194899],"mapped",[31062]],[[194900,194900],"mapped",[153242]],[[194901,194901],"mapped",[153285]],[[194902,194902],"mapped",[31119]],[[194903,194903],"mapped",[31211]],[[194904,194904],"mapped",[16687]],[[194905,194905],"mapped",[31296]],[[194906,194906],"mapped",[31306]],[[194907,194907],"mapped",[31311]],[[194908,194908],"mapped",[153980]],[[194909,194910],"mapped",[154279]],[[194911,194911],"disallowed"],[[194912,194912],"mapped",[16898]],[[194913,194913],"mapped",[154539]],[[194914,194914],"mapped",[31686]],[[194915,194915],"mapped",[31689]],[[194916,194916],"mapped",[16935]],[[194917,194917],"mapped",[154752]],[[194918,194918],"mapped",[31954]],[[194919,194919],"mapped",[17056]],[[194920,194920],"mapped",[31976]],[[194921,194921],"mapped",[31971]],[[194922,194922],"mapped",[32e3]],[[194923,194923],"mapped",[155526]],[[194924,194924],"mapped",[32099]],[[194925,194925],"mapped",[17153]],[[194926,194926],"mapped",[32199]],[[194927,194927],"mapped",[32258]],[[194928,194928],"mapped",[32325]],[[194929,194929],"mapped",[17204]],[[194930,194930],"mapped",[156200]],[[194931,194931],"mapped",[156231]],[[194932,194932],"mapped",[17241]],[[194933,194933],"mapped",[156377]],[[194934,194934],"mapped",[32634]],[[194935,194935],"mapped",[156478]],[[194936,194936],"mapped",[32661]],[[194937,194937],"mapped",[32762]],[[194938,194938],"mapped",[32773]],[[194939,194939],"mapped",[156890]],[[194940,194940],"mapped",[156963]],[[194941,194941],"mapped",[32864]],[[194942,194942],"mapped",[157096]],[[194943,194943],"mapped",[32880]],[[194944,194944],"mapped",[144223]],[[194945,194945],"mapped",[17365]],[[194946,194946],"mapped",[32946]],[[194947,194947],"mapped",[33027]],[[194948,194948],"mapped",[17419]],[[194949,194949],"mapped",[33086]],[[194950,194950],"mapped",[23221]],[[194951,194951],"mapped",[157607]],[[194952,194952],"mapped",[157621]],[[194953,194953],"mapped",[144275]],[[194954,194954],"mapped",[144284]],[[194955,194955],"mapped",[33281]],[[194956,194956],"mapped",[33284]],[[194957,194957],"mapped",[36766]],[[194958,194958],"mapped",[17515]],[[194959,194959],"mapped",[33425]],[[194960,194960],"mapped",[33419]],[[194961,194961],"mapped",[33437]],[[194962,194962],"mapped",[21171]],[[194963,194963],"mapped",[33457]],[[194964,194964],"mapped",[33459]],[[194965,194965],"mapped",[33469]],[[194966,194966],"mapped",[33510]],[[194967,194967],"mapped",[158524]],[[194968,194968],"mapped",[33509]],[[194969,194969],"mapped",[33565]],[[194970,194970],"mapped",[33635]],[[194971,194971],"mapped",[33709]],[[194972,194972],"mapped",[33571]],[[194973,194973],"mapped",[33725]],[[194974,194974],"mapped",[33767]],[[194975,194975],"mapped",[33879]],[[194976,194976],"mapped",[33619]],[[194977,194977],"mapped",[33738]],[[194978,194978],"mapped",[33740]],[[194979,194979],"mapped",[33756]],[[194980,194980],"mapped",[158774]],[[194981,194981],"mapped",[159083]],[[194982,194982],"mapped",[158933]],[[194983,194983],"mapped",[17707]],[[194984,194984],"mapped",[34033]],[[194985,194985],"mapped",[34035]],[[194986,194986],"mapped",[34070]],[[194987,194987],"mapped",[160714]],[[194988,194988],"mapped",[34148]],[[194989,194989],"mapped",[159532]],[[194990,194990],"mapped",[17757]],[[194991,194991],"mapped",[17761]],[[194992,194992],"mapped",[159665]],[[194993,194993],"mapped",[159954]],[[194994,194994],"mapped",[17771]],[[194995,194995],"mapped",[34384]],[[194996,194996],"mapped",[34396]],[[194997,194997],"mapped",[34407]],[[194998,194998],"mapped",[34409]],[[194999,194999],"mapped",[34473]],[[195e3,195e3],"mapped",[34440]],[[195001,195001],"mapped",[34574]],[[195002,195002],"mapped",[34530]],[[195003,195003],"mapped",[34681]],[[195004,195004],"mapped",[34600]],[[195005,195005],"mapped",[34667]],[[195006,195006],"mapped",[34694]],[[195007,195007],"disallowed"],[[195008,195008],"mapped",[34785]],[[195009,195009],"mapped",[34817]],[[195010,195010],"mapped",[17913]],[[195011,195011],"mapped",[34912]],[[195012,195012],"mapped",[34915]],[[195013,195013],"mapped",[161383]],[[195014,195014],"mapped",[35031]],[[195015,195015],"mapped",[35038]],[[195016,195016],"mapped",[17973]],[[195017,195017],"mapped",[35066]],[[195018,195018],"mapped",[13499]],[[195019,195019],"mapped",[161966]],[[195020,195020],"mapped",[162150]],[[195021,195021],"mapped",[18110]],[[195022,195022],"mapped",[18119]],[[195023,195023],"mapped",[35488]],[[195024,195024],"mapped",[35565]],[[195025,195025],"mapped",[35722]],[[195026,195026],"mapped",[35925]],[[195027,195027],"mapped",[162984]],[[195028,195028],"mapped",[36011]],[[195029,195029],"mapped",[36033]],[[195030,195030],"mapped",[36123]],[[195031,195031],"mapped",[36215]],[[195032,195032],"mapped",[163631]],[[195033,195033],"mapped",[133124]],[[195034,195034],"mapped",[36299]],[[195035,195035],"mapped",[36284]],[[195036,195036],"mapped",[36336]],[[195037,195037],"mapped",[133342]],[[195038,195038],"mapped",[36564]],[[195039,195039],"mapped",[36664]],[[195040,195040],"mapped",[165330]],[[195041,195041],"mapped",[165357]],[[195042,195042],"mapped",[37012]],[[195043,195043],"mapped",[37105]],[[195044,195044],"mapped",[37137]],[[195045,195045],"mapped",[165678]],[[195046,195046],"mapped",[37147]],[[195047,195047],"mapped",[37432]],[[195048,195048],"mapped",[37591]],[[195049,195049],"mapped",[37592]],[[195050,195050],"mapped",[37500]],[[195051,195051],"mapped",[37881]],[[195052,195052],"mapped",[37909]],[[195053,195053],"mapped",[166906]],[[195054,195054],"mapped",[38283]],[[195055,195055],"mapped",[18837]],[[195056,195056],"mapped",[38327]],[[195057,195057],"mapped",[167287]],[[195058,195058],"mapped",[18918]],[[195059,195059],"mapped",[38595]],[[195060,195060],"mapped",[23986]],[[195061,195061],"mapped",[38691]],[[195062,195062],"mapped",[168261]],[[195063,195063],"mapped",[168474]],[[195064,195064],"mapped",[19054]],[[195065,195065],"mapped",[19062]],[[195066,195066],"mapped",[38880]],[[195067,195067],"mapped",[168970]],[[195068,195068],"mapped",[19122]],[[195069,195069],"mapped",[169110]],[[195070,195071],"mapped",[38923]],[[195072,195072],"mapped",[38953]],[[195073,195073],"mapped",[169398]],[[195074,195074],"mapped",[39138]],[[195075,195075],"mapped",[19251]],[[195076,195076],"mapped",[39209]],[[195077,195077],"mapped",[39335]],[[195078,195078],"mapped",[39362]],[[195079,195079],"mapped",[39422]],[[195080,195080],"mapped",[19406]],[[195081,195081],"mapped",[170800]],[[195082,195082],"mapped",[39698]],[[195083,195083],"mapped",[4e4]],[[195084,195084],"mapped",[40189]],[[195085,195085],"mapped",[19662]],[[195086,195086],"mapped",[19693]],[[195087,195087],"mapped",[40295]],[[195088,195088],"mapped",[172238]],[[195089,195089],"mapped",[19704]],[[195090,195090],"mapped",[172293]],[[195091,195091],"mapped",[172558]],[[195092,195092],"mapped",[172689]],[[195093,195093],"mapped",[40635]],[[195094,195094],"mapped",[19798]],[[195095,195095],"mapped",[40697]],[[195096,195096],"mapped",[40702]],[[195097,195097],"mapped",[40709]],[[195098,195098],"mapped",[40719]],[[195099,195099],"mapped",[40726]],[[195100,195100],"mapped",[40763]],[[195101,195101],"mapped",[173568]],[[195102,196605],"disallowed"],[[196606,196607],"disallowed"],[[196608,262141],"disallowed"],[[262142,262143],"disallowed"],[[262144,327677],"disallowed"],[[327678,327679],"disallowed"],[[327680,393213],"disallowed"],[[393214,393215],"disallowed"],[[393216,458749],"disallowed"],[[458750,458751],"disallowed"],[[458752,524285],"disallowed"],[[524286,524287],"disallowed"],[[524288,589821],"disallowed"],[[589822,589823],"disallowed"],[[589824,655357],"disallowed"],[[655358,655359],"disallowed"],[[655360,720893],"disallowed"],[[720894,720895],"disallowed"],[[720896,786429],"disallowed"],[[786430,786431],"disallowed"],[[786432,851965],"disallowed"],[[851966,851967],"disallowed"],[[851968,917501],"disallowed"],[[917502,917503],"disallowed"],[[917504,917504],"disallowed"],[[917505,917505],"disallowed"],[[917506,917535],"disallowed"],[[917536,917631],"disallowed"],[[917632,917759],"disallowed"],[[917760,917999],"ignored"],[[918e3,983037],"disallowed"],[[983038,983039],"disallowed"],[[983040,1048573],"disallowed"],[[1048574,1048575],"disallowed"],[[1048576,1114109],"disallowed"],[[1114110,1114111],"disallowed"]]});var Gs=M((nv,dr)=>{"use strict";var $s=require("punycode"),Fs=Us(),Y1={TRANSITIONAL:0,NONTRANSITIONAL:1};function Ks(a){return a.split("\0").map(function(n){return n.normalize("NFC")}).join("\0")}function Ws(a){for(var n=0,i=Fs.length-1;n<=i;){var p=Math.floor((n+i)/2),l=Fs[p];if(l[0][0]<=a&&l[0][1]>=a)return l;l[0][0]>a?i=p-1:n=p+1}return null}var tc=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g;function Hs(a){return a.replace(tc,"_").length}function nc(a,n,i){for(var p=!1,l="",s=Hs(a),c=0;c<s;++c){var f=a.codePointAt(c),h=Ws(f);switch(h[1]){case"disallowed":p=!0,l+=String.fromCodePoint(f);break;case"ignored":break;case"mapped":l+=String.fromCodePoint.apply(String,h[2]);break;case"deviation":i===Y1.TRANSITIONAL?l+=String.fromCodePoint.apply(String,h[2]):l+=String.fromCodePoint(f);break;case"valid":l+=String.fromCodePoint(f);break;case"disallowed_STD3_mapped":n?(p=!0,l+=String.fromCodePoint(f)):l+=String.fromCodePoint.apply(String,h[2]);break;case"disallowed_STD3_valid":n&&(p=!0),l+=String.fromCodePoint(f);break}}return{string:l,error:p}}var rc=/[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;function ic(a,n){a.substr(0,4)==="xn--"&&(a=$s.toUnicode(a),n=Y1.NONTRANSITIONAL);var i=!1;(Ks(a)!==a||a[3]==="-"&&a[4]==="-"||a[0]==="-"||a[a.length-1]==="-"||a.indexOf(".")!==-1||a.search(rc)===0)&&(i=!0);for(var p=Hs(a),l=0;l<p;++l){var s=Ws(a.codePointAt(l));if(or===Y1.TRANSITIONAL&&s[1]!=="valid"||or===Y1.NONTRANSITIONAL&&s[1]!=="valid"&&s[1]!=="deviation"){i=!0;break}}return{label:a,error:i}}function or(a,n,i){var p=nc(a,n,i);p.string=Ks(p.string);for(var l=p.string.split("."),s=0;s<l.length;++s)try{var c=ic(l[s]);l[s]=c.label,p.error=p.error||c.error}catch{p.error=!0}return{string:l.join("."),error:p.error}}dr.exports.toASCII=function(a,n,i,p){var l=or(a,n,i),s=l.string.split(".");if(s=s.map(function(h){try{return $s.toASCII(h)}catch{return l.error=!0,h}}),p){var c=s.slice(0,s.length-1).join(".").length;(c.length>253||c.length===0)&&(l.error=!0);for(var f=0;f<s.length;++f)if(s.length>63||s.length===0){l.error=!0;break}}return l.error?null:s.join(".")};dr.exports.toUnicode=function(a,n){var i=or(a,n,Y1.NONTRANSITIONAL);return{domain:i.string,error:i.error}};dr.exports.PROCESSING_OPTIONS=Y1});var xa=M((rv,Qe)=>{"use strict";var Z1=require("punycode"),Js=Gs(),Qs={ftp:21,file:null,gopher:70,http:80,https:443,ws:80,wss:443},Y=Symbol("failure");function Ys(a){return Z1.ucs2.decode(a).length}function Zs(a,n){let i=a[n];return isNaN(i)?void 0:String.fromCodePoint(i)}function Bt(a){return a>=48&&a<=57}function Lt(a){return a>=65&&a<=90||a>=97&&a<=122}function pc(a){return Lt(a)||Bt(a)}function wa(a){return Bt(a)||a>=65&&a<=70||a>=97&&a<=102}function Xs(a){return a==="."||a.toLowerCase()==="%2e"}function lc(a){return a=a.toLowerCase(),a===".."||a==="%2e."||a===".%2e"||a==="%2e%2e"}function oc(a,n){return Lt(a)&&(n===58||n===124)}function e2(a){return a.length===2&&Lt(a.codePointAt(0))&&(a[1]===":"||a[1]==="|")}function dc(a){return a.length===2&&Lt(a.codePointAt(0))&&a[1]===":"}function sc(a){return a.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/)!==-1}function mc(a){return a.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/)!==-1}function Ap(a){return Qs[a]!==void 0}function Se(a){return Ap(a.scheme)}function uc(a){return Qs[a]}function a2(a){let n=a.toString(16).toUpperCase();return n.length===1&&(n="0"+n),"%"+n}function cc(a){let n=new Buffer(a),i="";for(let p=0;p<n.length;++p)i+=a2(n[p]);return i}function hc(a){let n=new Buffer(a),i=[];for(let p=0;p<n.length;++p)n[p]!==37?i.push(n[p]):n[p]===37&&wa(n[p+1])&&wa(n[p+2])?(i.push(parseInt(n.slice(p+1,p+3).toString(),16)),p+=2):i.push(n[p]);return new Buffer(i).toString()}function sr(a){return a<=31||a>126}var fc=new Set([32,34,35,60,62,63,96,123,125]);function t2(a){return sr(a)||fc.has(a)}var gc=new Set([47,58,59,61,64,91,92,93,94,124]);function Rp(a){return t2(a)||gc.has(a)}function _1(a,n){let i=String.fromCodePoint(a);return n(a)?cc(i):i}function vc(a){let n=10;return a.length>=2&&a.charAt(0)==="0"&&a.charAt(1).toLowerCase()==="x"?(a=a.substring(2),n=16):a.length>=2&&a.charAt(0)==="0"&&(a=a.substring(1),n=8),a===""?0:(n===10?/[^0-9]/:n===16?/[^0-9A-Fa-f]/:/[^0-7]/).test(a)?Y:parseInt(a,n)}function yc(a){let n=a.split(".");if(n[n.length-1]===""&&n.length>1&&n.pop(),n.length>4)return a;let i=[];for(let s of n){if(s==="")return a;let c=vc(s);if(c===Y)return a;i.push(c)}for(let s=0;s<i.length-1;++s)if(i[s]>255)return Y;if(i[i.length-1]>=Math.pow(256,5-i.length))return Y;let p=i.pop(),l=0;for(let s of i)p+=s*Math.pow(256,3-l),++l;return p}function wc(a){let n="",i=a;for(let p=1;p<=4;++p)n=String(i%256)+n,p!==4&&(n="."+n),i=Math.floor(i/256);return n}function bc(a){let n=[0,0,0,0,0,0,0,0],i=0,p=null,l=0;if(a=Z1.ucs2.decode(a),a[l]===58){if(a[l+1]!==58)return Y;l+=2,++i,p=i}for(;l<a.length;){if(i===8)return Y;if(a[l]===58){if(p!==null)return Y;++l,++i,p=i;continue}let s=0,c=0;for(;c<4&&wa(a[l]);)s=s*16+parseInt(Zs(a,l),16),++l,++c;if(a[l]===46){if(c===0||(l-=c,i>6))return Y;let f=0;for(;a[l]!==void 0;){let h=null;if(f>0)if(a[l]===46&&f<4)++l;else return Y;if(!Bt(a[l]))return Y;for(;Bt(a[l]);){let b=parseInt(Zs(a,l));if(h===null)h=b;else{if(h===0)return Y;h=h*10+b}if(h>255)return Y;++l}n[i]=n[i]*256+h,++f,(f===2||f===4)&&++i}if(f!==4)return Y;break}else if(a[l]===58){if(++l,a[l]===void 0)return Y}else if(a[l]!==void 0)return Y;n[i]=s,++i}if(p!==null){let s=i-p;for(i=7;i!==0&&s>0;){let c=n[p+s-1];n[p+s-1]=n[i],n[i]=c,--i,--s}}else if(p===null&&i!==8)return Y;return n}function _c(a){let n="",p=Cc(a).idx,l=!1;for(let s=0;s<=7;++s)if(!(l&&a[s]===0)){if(l&&(l=!1),p===s){n+=s===0?"::":":",l=!0;continue}n+=a[s].toString(16),s!==7&&(n+=":")}return n}function Pp(a,n){if(a[0]==="[")return a[a.length-1]!=="]"?Y:bc(a.substring(1,a.length-1));if(!n)return kc(a);let i=hc(a),p=Js.toASCII(i,!1,Js.PROCESSING_OPTIONS.NONTRANSITIONAL,!1);if(p===null||sc(p))return Y;let l=yc(p);return typeof l=="number"||l===Y?l:p}function kc(a){if(mc(a))return Y;let n="",i=Z1.ucs2.decode(a);for(let p=0;p<i.length;++p)n+=_1(i[p],sr);return n}function Cc(a){let n=null,i=1,p=null,l=0;for(let s=0;s<a.length;++s)a[s]!==0?(l>i&&(n=p,i=l),p=null,l=0):(p===null&&(p=s),++l);return l>i&&(n=p,i=l),{idx:n,len:i}}function Dp(a){return typeof a=="number"?wc(a):a instanceof Array?"["+_c(a)+"]":a}function Sc(a){return a.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g,"")}function Tc(a){return a.replace(/\u0009|\u000A|\u000D/g,"")}function n2(a){let n=a.path;n.length!==0&&(a.scheme==="file"&&n.length===1&&Nc(n[0])||n.pop())}function r2(a){return a.username!==""||a.password!==""}function xc(a){return a.host===null||a.host===""||a.cannotBeABaseURL||a.scheme==="file"}function Nc(a){return/^[A-Za-z]:$/.test(a)}function fe(a,n,i,p,l){if(this.pointer=0,this.input=a,this.base=n||null,this.encodingOverride=i||"utf-8",this.stateOverride=l,this.url=p,this.failure=!1,this.parseError=!1,!this.url){this.url={scheme:"",username:"",password:"",host:null,port:null,path:[],query:null,fragment:null,cannotBeABaseURL:!1};let c=Sc(this.input);c!==this.input&&(this.parseError=!0),this.input=c}let s=Tc(this.input);for(s!==this.input&&(this.parseError=!0),this.input=s,this.state=l||"scheme start",this.buffer="",this.atFlag=!1,this.arrFlag=!1,this.passwordTokenSeenFlag=!1,this.input=Z1.ucs2.decode(this.input);this.pointer<=this.input.length;++this.pointer){let c=this.input[this.pointer],f=isNaN(c)?void 0:String.fromCodePoint(c),h=this["parse "+this.state](c,f);if(h){if(h===Y){this.failure=!0;break}}else break}}fe.prototype["parse scheme start"]=function(n,i){if(Lt(n))this.buffer+=i.toLowerCase(),this.state="scheme";else if(!this.stateOverride)this.state="no scheme",--this.pointer;else return this.parseError=!0,Y;return!0};fe.prototype["parse scheme"]=function(n,i){if(pc(n)||n===43||n===45||n===46)this.buffer+=i.toLowerCase();else if(n===58){if(this.stateOverride&&(Se(this.url)&&!Ap(this.buffer)||!Se(this.url)&&Ap(this.buffer)||(r2(this.url)||this.url.port!==null)&&this.buffer==="file"||this.url.scheme==="file"&&(this.url.host===""||this.url.host===null))||(this.url.scheme=this.buffer,this.buffer="",this.stateOverride))return!1;this.url.scheme==="file"?((this.input[this.pointer+1]!==47||this.input[this.pointer+2]!==47)&&(this.parseError=!0),this.state="file"):Se(this.url)&&this.base!==null&&this.base.scheme===this.url.scheme?this.state="special relative or authority":Se(this.url)?this.state="special authority slashes":this.input[this.pointer+1]===47?(this.state="path or authority",++this.pointer):(this.url.cannotBeABaseURL=!0,this.url.path.push(""),this.state="cannot-be-a-base-URL path")}else if(!this.stateOverride)this.buffer="",this.state="no scheme",this.pointer=-1;else return this.parseError=!0,Y;return!0};fe.prototype["parse no scheme"]=function(n){return this.base===null||this.base.cannotBeABaseURL&&n!==35?Y:(this.base.cannotBeABaseURL&&n===35?(this.url.scheme=this.base.scheme,this.url.path=this.base.path.slice(),this.url.query=this.base.query,this.url.fragment="",this.url.cannotBeABaseURL=!0,this.state="fragment"):this.base.scheme==="file"?(this.state="file",--this.pointer):(this.state="relative",--this.pointer),!0)};fe.prototype["parse special relative or authority"]=function(n){return n===47&&this.input[this.pointer+1]===47?(this.state="special authority ignore slashes",++this.pointer):(this.parseError=!0,this.state="relative",--this.pointer),!0};fe.prototype["parse path or authority"]=function(n){return n===47?this.state="authority":(this.state="path",--this.pointer),!0};fe.prototype["parse relative"]=function(n){return this.url.scheme=this.base.scheme,isNaN(n)?(this.url.username=this.base.username,this.url.password=this.base.password,this.url.host=this.base.host,this.url.port=this.base.port,this.url.path=this.base.path.slice(),this.url.query=this.base.query):n===47?this.state="relative slash":n===63?(this.url.username=this.base.username,this.url.password=this.base.password,this.url.host=this.base.host,this.url.port=this.base.port,this.url.path=this.base.path.slice(),this.url.query="",this.state="query"):n===35?(this.url.username=this.base.username,this.url.password=this.base.password,this.url.host=this.base.host,this.url.port=this.base.port,this.url.path=this.base.path.slice(),this.url.query=this.base.query,this.url.fragment="",this.state="fragment"):Se(this.url)&&n===92?(this.parseError=!0,this.state="relative slash"):(this.url.username=this.base.username,this.url.password=this.base.password,this.url.host=this.base.host,this.url.port=this.base.port,this.url.path=this.base.path.slice(0,this.base.path.length-1),this.state="path",--this.pointer),!0};fe.prototype["parse relative slash"]=function(n){return Se(this.url)&&(n===47||n===92)?(n===92&&(this.parseError=!0),this.state="special authority ignore slashes"):n===47?this.state="authority":(this.url.username=this.base.username,this.url.password=this.base.password,this.url.host=this.base.host,this.url.port=this.base.port,this.state="path",--this.pointer),!0};fe.prototype["parse special authority slashes"]=function(n){return n===47&&this.input[this.pointer+1]===47?(this.state="special authority ignore slashes",++this.pointer):(this.parseError=!0,this.state="special authority ignore slashes",--this.pointer),!0};fe.prototype["parse special authority ignore slashes"]=function(n){return n!==47&&n!==92?(this.state="authority",--this.pointer):this.parseError=!0,!0};fe.prototype["parse authority"]=function(n,i){if(n===64){this.parseError=!0,this.atFlag&&(this.buffer="%40"+this.buffer),this.atFlag=!0;let p=Ys(this.buffer);for(let l=0;l<p;++l){let s=this.buffer.codePointAt(l);if(s===58&&!this.passwordTokenSeenFlag){this.passwordTokenSeenFlag=!0;continue}let c=_1(s,Rp);this.passwordTokenSeenFlag?this.url.password+=c:this.url.username+=c}this.buffer=""}else if(isNaN(n)||n===47||n===63||n===35||Se(this.url)&&n===92){if(this.atFlag&&this.buffer==="")return this.parseError=!0,Y;this.pointer-=Ys(this.buffer)+1,this.buffer="",this.state="host"}else this.buffer+=i;return!0};fe.prototype["parse hostname"]=fe.prototype["parse host"]=function(n,i){if(this.stateOverride&&this.url.scheme==="file")--this.pointer,this.state="file host";else if(n===58&&!this.arrFlag){if(this.buffer==="")return this.parseError=!0,Y;let p=Pp(this.buffer,Se(this.url));if(p===Y)return Y;if(this.url.host=p,this.buffer="",this.state="port",this.stateOverride==="hostname")return!1}else if(isNaN(n)||n===47||n===63||n===35||Se(this.url)&&n===92){if(--this.pointer,Se(this.url)&&this.buffer==="")return this.parseError=!0,Y;if(this.stateOverride&&this.buffer===""&&(r2(this.url)||this.url.port!==null))return this.parseError=!0,!1;let p=Pp(this.buffer,Se(this.url));if(p===Y)return Y;if(this.url.host=p,this.buffer="",this.state="path start",this.stateOverride)return!1}else n===91?this.arrFlag=!0:n===93&&(this.arrFlag=!1),this.buffer+=i;return!0};fe.prototype["parse port"]=function(n,i){if(Bt(n))this.buffer+=i;else if(isNaN(n)||n===47||n===63||n===35||Se(this.url)&&n===92||this.stateOverride){if(this.buffer!==""){let p=parseInt(this.buffer);if(p>Math.pow(2,16)-1)return this.parseError=!0,Y;this.url.port=p===uc(this.url.scheme)?null:p,this.buffer=""}if(this.stateOverride)return!1;this.state="path start",--this.pointer}else return this.parseError=!0,Y;return!0};var Ac=new Set([47,92,63,35]);fe.prototype["parse file"]=function(n){return this.url.scheme="file",n===47||n===92?(n===92&&(this.parseError=!0),this.state="file slash"):this.base!==null&&this.base.scheme==="file"?isNaN(n)?(this.url.host=this.base.host,this.url.path=this.base.path.slice(),this.url.query=this.base.query):n===63?(this.url.host=this.base.host,this.url.path=this.base.path.slice(),this.url.query="",this.state="query"):n===35?(this.url.host=this.base.host,this.url.path=this.base.path.slice(),this.url.query=this.base.query,this.url.fragment="",this.state="fragment"):(this.input.length-this.pointer-1===0||!oc(n,this.input[this.pointer+1])||this.input.length-this.pointer-1>=2&&!Ac.has(this.input[this.pointer+2])?(this.url.host=this.base.host,this.url.path=this.base.path.slice(),n2(this.url)):this.parseError=!0,this.state="path",--this.pointer):(this.state="path",--this.pointer),!0};fe.prototype["parse file slash"]=function(n){return n===47||n===92?(n===92&&(this.parseError=!0),this.state="file host"):(this.base!==null&&this.base.scheme==="file"&&(dc(this.base.path[0])?this.url.path.push(this.base.path[0]):this.url.host=this.base.host),this.state="path",--this.pointer),!0};fe.prototype["parse file host"]=function(n,i){if(isNaN(n)||n===47||n===92||n===63||n===35)if(--this.pointer,!this.stateOverride&&e2(this.buffer))this.parseError=!0,this.state="path";else if(this.buffer===""){if(this.url.host="",this.stateOverride)return!1;this.state="path start"}else{let p=Pp(this.buffer,Se(this.url));if(p===Y)return Y;if(p==="localhost"&&(p=""),this.url.host=p,this.stateOverride)return!1;this.buffer="",this.state="path start"}else this.buffer+=i;return!0};fe.prototype["parse path start"]=function(n){return Se(this.url)?(n===92&&(this.parseError=!0),this.state="path",n!==47&&n!==92&&--this.pointer):!this.stateOverride&&n===63?(this.url.query="",this.state="query"):!this.stateOverride&&n===35?(this.url.fragment="",this.state="fragment"):n!==void 0&&(this.state="path",n!==47&&--this.pointer),!0};fe.prototype["parse path"]=function(n){if(isNaN(n)||n===47||Se(this.url)&&n===92||!this.stateOverride&&(n===63||n===35)){if(Se(this.url)&&n===92&&(this.parseError=!0),lc(this.buffer)?(n2(this.url),n!==47&&!(Se(this.url)&&n===92)&&this.url.path.push("")):Xs(this.buffer)&&n!==47&&!(Se(this.url)&&n===92)?this.url.path.push(""):Xs(this.buffer)||(this.url.scheme==="file"&&this.url.path.length===0&&e2(this.buffer)&&(this.url.host!==""&&this.url.host!==null&&(this.parseError=!0,this.url.host=""),this.buffer=this.buffer[0]+":"),this.url.path.push(this.buffer)),this.buffer="",this.url.scheme==="file"&&(n===void 0||n===63||n===35))for(;this.url.path.length>1&&this.url.path[0]==="";)this.parseError=!0,this.url.path.shift();n===63&&(this.url.query="",this.state="query"),n===35&&(this.url.fragment="",this.state="fragment")}else n===37&&(!wa(this.input[this.pointer+1])||!wa(this.input[this.pointer+2]))&&(this.parseError=!0),this.buffer+=_1(n,t2);return!0};fe.prototype["parse cannot-be-a-base-URL path"]=function(n){return n===63?(this.url.query="",this.state="query"):n===35?(this.url.fragment="",this.state="fragment"):(!isNaN(n)&&n!==37&&(this.parseError=!0),n===37&&(!wa(this.input[this.pointer+1])||!wa(this.input[this.pointer+2]))&&(this.parseError=!0),isNaN(n)||(this.url.path[0]=this.url.path[0]+_1(n,sr))),!0};fe.prototype["parse query"]=function(n,i){if(isNaN(n)||!this.stateOverride&&n===35){(!Se(this.url)||this.url.scheme==="ws"||this.url.scheme==="wss")&&(this.encodingOverride="utf-8");let p=new Buffer(this.buffer);for(let l=0;l<p.length;++l)p[l]<33||p[l]>126||p[l]===34||p[l]===35||p[l]===60||p[l]===62?this.url.query+=a2(p[l]):this.url.query+=String.fromCodePoint(p[l]);this.buffer="",n===35&&(this.url.fragment="",this.state="fragment")}else n===37&&(!wa(this.input[this.pointer+1])||!wa(this.input[this.pointer+2]))&&(this.parseError=!0),this.buffer+=i;return!0};fe.prototype["parse fragment"]=function(n){return isNaN(n)||(n===0?this.parseError=!0:(n===37&&(!wa(this.input[this.pointer+1])||!wa(this.input[this.pointer+2]))&&(this.parseError=!0),this.url.fragment+=_1(n,sr))),!0};function Pc(a,n){let i=a.scheme+":";if(a.host!==null?(i+="//",(a.username!==""||a.password!=="")&&(i+=a.username,a.password!==""&&(i+=":"+a.password),i+="@"),i+=Dp(a.host),a.port!==null&&(i+=":"+a.port)):a.host===null&&a.scheme==="file"&&(i+="//"),a.cannotBeABaseURL)i+=a.path[0];else for(let p of a.path)i+="/"+p;return a.query!==null&&(i+="?"+a.query),!n&&a.fragment!==null&&(i+="#"+a.fragment),i}function Rc(a){let n=a.scheme+"://";return n+=Dp(a.host),a.port!==null&&(n+=":"+a.port),n}Qe.exports.serializeURL=Pc;Qe.exports.serializeURLOrigin=function(a){switch(a.scheme){case"blob":try{return Qe.exports.serializeURLOrigin(Qe.exports.parseURL(a.path[0]))}catch{return"null"}case"ftp":case"gopher":case"http":case"https":case"ws":case"wss":return Rc({scheme:a.scheme,host:a.host,port:a.port});case"file":return"file://";default:return"null"}};Qe.exports.basicURLParse=function(a,n){n===void 0&&(n={});let i=new fe(a,n.baseURL,n.encodingOverride,n.url,n.stateOverride);return i.failure?"failure":i.url};Qe.exports.setTheUsername=function(a,n){a.username="";let i=Z1.ucs2.decode(n);for(let p=0;p<i.length;++p)a.username+=_1(i[p],Rp)};Qe.exports.setThePassword=function(a,n){a.password="";let i=Z1.ucs2.decode(n);for(let p=0;p<i.length;++p)a.password+=_1(i[p],Rp)};Qe.exports.serializeHost=Dp;Qe.exports.cannotHaveAUsernamePasswordPort=xc;Qe.exports.serializeInteger=function(a){return String(a)};Qe.exports.parseURL=function(a,n){return n===void 0&&(n={}),Qe.exports.basicURLParse(a,{baseURL:n.baseURL,encodingOverride:n.encodingOverride})}});var p2=M(i2=>{"use strict";var ge=xa();i2.implementation=class{constructor(n){let i=n[0],p=n[1],l=null;if(p!==void 0&&(l=ge.basicURLParse(p),l==="failure"))throw new TypeError("Invalid base URL");let s=ge.basicURLParse(i,{baseURL:l});if(s==="failure")throw new TypeError("Invalid URL");this._url=s}get href(){return ge.serializeURL(this._url)}set href(n){let i=ge.basicURLParse(n);if(i==="failure")throw new TypeError("Invalid URL");this._url=i}get origin(){return ge.serializeURLOrigin(this._url)}get protocol(){return this._url.scheme+":"}set protocol(n){ge.basicURLParse(n+":",{url:this._url,stateOverride:"scheme start"})}get username(){return this._url.username}set username(n){ge.cannotHaveAUsernamePasswordPort(this._url)||ge.setTheUsername(this._url,n)}get password(){return this._url.password}set password(n){ge.cannotHaveAUsernamePasswordPort(this._url)||ge.setThePassword(this._url,n)}get host(){let n=this._url;return n.host===null?"":n.port===null?ge.serializeHost(n.host):ge.serializeHost(n.host)+":"+ge.serializeInteger(n.port)}set host(n){this._url.cannotBeABaseURL||ge.basicURLParse(n,{url:this._url,stateOverride:"host"})}get hostname(){return this._url.host===null?"":ge.serializeHost(this._url.host)}set hostname(n){this._url.cannotBeABaseURL||ge.basicURLParse(n,{url:this._url,stateOverride:"hostname"})}get port(){return this._url.port===null?"":ge.serializeInteger(this._url.port)}set port(n){ge.cannotHaveAUsernamePasswordPort(this._url)||(n===""?this._url.port=null:ge.basicURLParse(n,{url:this._url,stateOverride:"port"}))}get pathname(){return this._url.cannotBeABaseURL?this._url.path[0]:this._url.path.length===0?"":"/"+this._url.path.join("/")}set pathname(n){this._url.cannotBeABaseURL||(this._url.path=[],ge.basicURLParse(n,{url:this._url,stateOverride:"path start"}))}get search(){return this._url.query===null||this._url.query===""?"":"?"+this._url.query}set search(n){let i=this._url;if(n===""){i.query=null;return}let p=n[0]==="?"?n.substring(1):n;i.query="",ge.basicURLParse(p,{url:i,stateOverride:"query"})}get hash(){return this._url.fragment===null||this._url.fragment===""?"":"#"+this._url.fragment}set hash(n){if(n===""){this._url.fragment=null;return}let i=n[0]==="#"?n.substring(1):n;this._url.fragment="",ge.basicURLParse(i,{url:this._url,stateOverride:"fragment"})}toJSON(){return this.href}}});var d2=M((lv,qt)=>{"use strict";var da=Ls(),o2=qs(),l2=p2(),pe=o2.implSymbol;function Ne(a){if(!this||this[pe]||!(this instanceof Ne))throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");if(arguments.length<1)throw new TypeError("Failed to construct 'URL': 1 argument required, but only "+arguments.length+" present.");let n=[];for(let i=0;i<arguments.length&&i<2;++i)n[i]=arguments[i];n[0]=da.USVString(n[0]),n[1]!==void 0&&(n[1]=da.USVString(n[1])),qt.exports.setup(this,n)}Ne.prototype.toJSON=function(){if(!this||!qt.exports.is(this))throw new TypeError("Illegal invocation");let n=[];for(let i=0;i<arguments.length&&i<0;++i)n[i]=arguments[i];return this[pe].toJSON.apply(this[pe],n)};Object.defineProperty(Ne.prototype,"href",{get(){return this[pe].href},set(a){a=da.USVString(a),this[pe].href=a},enumerable:!0,configurable:!0});Ne.prototype.toString=function(){if(!this||!qt.exports.is(this))throw new TypeError("Illegal invocation");return this.href};Object.defineProperty(Ne.prototype,"origin",{get(){return this[pe].origin},enumerable:!0,configurable:!0});Object.defineProperty(Ne.prototype,"protocol",{get(){return this[pe].protocol},set(a){a=da.USVString(a),this[pe].protocol=a},enumerable:!0,configurable:!0});Object.defineProperty(Ne.prototype,"username",{get(){return this[pe].username},set(a){a=da.USVString(a),this[pe].username=a},enumerable:!0,configurable:!0});Object.defineProperty(Ne.prototype,"password",{get(){return this[pe].password},set(a){a=da.USVString(a),this[pe].password=a},enumerable:!0,configurable:!0});Object.defineProperty(Ne.prototype,"host",{get(){return this[pe].host},set(a){a=da.USVString(a),this[pe].host=a},enumerable:!0,configurable:!0});Object.defineProperty(Ne.prototype,"hostname",{get(){return this[pe].hostname},set(a){a=da.USVString(a),this[pe].hostname=a},enumerable:!0,configurable:!0});Object.defineProperty(Ne.prototype,"port",{get(){return this[pe].port},set(a){a=da.USVString(a),this[pe].port=a},enumerable:!0,configurable:!0});Object.defineProperty(Ne.prototype,"pathname",{get(){return this[pe].pathname},set(a){a=da.USVString(a),this[pe].pathname=a},enumerable:!0,configurable:!0});Object.defineProperty(Ne.prototype,"search",{get(){return this[pe].search},set(a){a=da.USVString(a),this[pe].search=a},enumerable:!0,configurable:!0});Object.defineProperty(Ne.prototype,"hash",{get(){return this[pe].hash},set(a){a=da.USVString(a),this[pe].hash=a},enumerable:!0,configurable:!0});qt.exports={is(a){return!!a&&a[pe]instanceof l2.implementation},create(a,n){let i=Object.create(Ne.prototype);return this.setup(i,a,n),i},setup(a,n,i){i||(i={}),i.wrapper=a,a[pe]=new l2.implementation(n,i),a[pe][o2.wrapperSymbol]=a},interface:Ne,expose:{Window:{URL:Ne},Worker:{URL:Ne}}}});var s2=M(Na=>{"use strict";Na.URL=d2().interface;Na.serializeURL=xa().serializeURL;Na.serializeURLOrigin=xa().serializeURLOrigin;Na.basicURLParse=xa().basicURLParse;Na.setTheUsername=xa().setTheUsername;Na.setThePassword=xa().setThePassword;Na.serializeHost=xa().serializeHost;Na.serializeInteger=xa().serializeInteger;Na.parseURL=xa().parseURL});var k2=M((_a,_2)=>{"use strict";Object.defineProperty(_a,"__esModule",{value:!0});function at(a){return a&&typeof a=="object"&&"default"in a?a.default:a}var ba=at(require("stream")),h2=at(require("http")),ur=at(require("url")),f2=at(s2()),Dc=at(require("https")),k1=at(require("zlib")),Ec=ba.Readable,Ba=Symbol("buffer"),Ep=Symbol("type"),Ft=class a{constructor(){this[Ep]="";let n=arguments[0],i=arguments[1],p=[],l=0;if(n){let c=n,f=Number(c.length);for(let h=0;h<f;h++){let b=c[h],C;b instanceof Buffer?C=b:ArrayBuffer.isView(b)?C=Buffer.from(b.buffer,b.byteOffset,b.byteLength):b instanceof ArrayBuffer?C=Buffer.from(b):b instanceof a?C=b[Ba]:C=Buffer.from(typeof b=="string"?b:String(b)),l+=C.length,p.push(C)}}this[Ba]=Buffer.concat(p);let s=i&&i.type!==void 0&&String(i.type).toLowerCase();s&&!/[^\u0020-\u007E]/.test(s)&&(this[Ep]=s)}get size(){return this[Ba].length}get type(){return this[Ep]}text(){return Promise.resolve(this[Ba].toString())}arrayBuffer(){let n=this[Ba],i=n.buffer.slice(n.byteOffset,n.byteOffset+n.byteLength);return Promise.resolve(i)}stream(){let n=new Ec;return n._read=function(){},n.push(this[Ba]),n.push(null),n}toString(){return"[object Blob]"}slice(){let n=this.size,i=arguments[0],p=arguments[1],l,s;i===void 0?l=0:i<0?l=Math.max(n+i,0):l=Math.min(i,n),p===void 0?s=n:p<0?s=Math.max(n+p,0):s=Math.min(p,n);let c=Math.max(s-l,0),h=this[Ba].slice(l,l+c),b=new a([],{type:arguments[2]});return b[Ba]=h,b}};Object.defineProperties(Ft.prototype,{size:{enumerable:!0},type:{enumerable:!0},slice:{enumerable:!0}});Object.defineProperty(Ft.prototype,Symbol.toStringTag,{value:"Blob",writable:!1,enumerable:!1,configurable:!0});function Re(a,n,i){Error.call(this,a),this.message=a,this.type=n,i&&(this.code=this.errno=i.code),Error.captureStackTrace(this,this.constructor)}Re.prototype=Object.create(Error.prototype);Re.prototype.constructor=Re;Re.prototype.name="FetchError";var Mp;try{Mp=require("encoding").convert}catch{}var qa=Symbol("Body internals"),m2=ba.PassThrough;function Ae(a){var n=this,i=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},p=i.size;let l=p===void 0?0:p;var s=i.timeout;let c=s===void 0?0:s;a==null?a=null:g2(a)?a=Buffer.from(a.toString()):Kt(a)||Buffer.isBuffer(a)||(Object.prototype.toString.call(a)==="[object ArrayBuffer]"?a=Buffer.from(a):ArrayBuffer.isView(a)?a=Buffer.from(a.buffer,a.byteOffset,a.byteLength):a instanceof ba||(a=Buffer.from(String(a)))),this[qa]={body:a,disturbed:!1,error:null},this.size=l,this.timeout=c,a instanceof ba&&a.on("error",function(f){let h=f.name==="AbortError"?f:new Re(`Invalid response body while trying to fetch ${n.url}: ${f.message}`,"system",f);n[qa].error=h})}Ae.prototype={get body(){return this[qa].body},get bodyUsed(){return this[qa].disturbed},arrayBuffer(){return X1.call(this).then(function(a){return a.buffer.slice(a.byteOffset,a.byteOffset+a.byteLength)})},blob(){let a=this.headers&&this.headers.get("content-type")||"";return X1.call(this).then(function(n){return Object.assign(new Ft([],{type:a.toLowerCase()}),{[Ba]:n})})},json(){var a=this;return X1.call(this).then(function(n){try{return JSON.parse(n.toString())}catch(i){return Ae.Promise.reject(new Re(`invalid json response body at ${a.url} reason: ${i.message}`,"invalid-json"))}})},text(){return X1.call(this).then(function(a){return a.toString()})},buffer(){return X1.call(this)},textConverted(){var a=this;return X1.call(this).then(function(n){return Ic(n,a.headers)})}};Object.defineProperties(Ae.prototype,{body:{enumerable:!0},bodyUsed:{enumerable:!0},arrayBuffer:{enumerable:!0},blob:{enumerable:!0},json:{enumerable:!0},text:{enumerable:!0}});Ae.mixIn=function(a){for(let n of Object.getOwnPropertyNames(Ae.prototype))if(!(n in a)){let i=Object.getOwnPropertyDescriptor(Ae.prototype,n);Object.defineProperty(a,n,i)}};function X1(){var a=this;if(this[qa].disturbed)return Ae.Promise.reject(new TypeError(`body used already for: ${this.url}`));if(this[qa].disturbed=!0,this[qa].error)return Ae.Promise.reject(this[qa].error);let n=this.body;if(n===null)return Ae.Promise.resolve(Buffer.alloc(0));if(Kt(n)&&(n=n.stream()),Buffer.isBuffer(n))return Ae.Promise.resolve(n);if(!(n instanceof ba))return Ae.Promise.resolve(Buffer.alloc(0));let i=[],p=0,l=!1;return new Ae.Promise(function(s,c){let f;a.timeout&&(f=setTimeout(function(){l=!0,c(new Re(`Response timeout while trying to fetch ${a.url} (over ${a.timeout}ms)`,"body-timeout"))},a.timeout)),n.on("error",function(h){h.name==="AbortError"?(l=!0,c(h)):c(new Re(`Invalid response body while trying to fetch ${a.url}: ${h.message}`,"system",h))}),n.on("data",function(h){if(!(l||h===null)){if(a.size&&p+h.length>a.size){l=!0,c(new Re(`content size at ${a.url} over limit: ${a.size}`,"max-size"));return}p+=h.length,i.push(h)}}),n.on("end",function(){if(!l){clearTimeout(f);try{s(Buffer.concat(i,p))}catch(h){c(new Re(`Could not create Buffer from response body for ${a.url}: ${h.message}`,"system",h))}}})})}function Ic(a,n){if(typeof Mp!="function")throw new Error("The package `encoding` must be installed to use the textConverted() function");let i=n.get("content-type"),p="utf-8",l,s;return i&&(l=/charset=([^;]*)/i.exec(i)),s=a.slice(0,1024).toString(),!l&&s&&(l=/<meta.+?charset=(['"])(.+?)\1/i.exec(s)),!l&&s&&(l=/<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(s),l||(l=/<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(s),l&&l.pop()),l&&(l=/charset=(.*)/i.exec(l.pop()))),!l&&s&&(l=/<\?xml.+?encoding=(['"])(.+?)\1/i.exec(s)),l&&(p=l.pop(),(p==="gb2312"||p==="gbk")&&(p="gb18030")),Mp(a,"UTF-8",p).toString()}function g2(a){return typeof a!="object"||typeof a.append!="function"||typeof a.delete!="function"||typeof a.get!="function"||typeof a.getAll!="function"||typeof a.has!="function"||typeof a.set!="function"?!1:a.constructor.name==="URLSearchParams"||Object.prototype.toString.call(a)==="[object URLSearchParams]"||typeof a.sort=="function"}function Kt(a){return typeof a=="object"&&typeof a.arrayBuffer=="function"&&typeof a.type=="string"&&typeof a.stream=="function"&&typeof a.constructor=="function"&&typeof a.constructor.name=="string"&&/^(Blob|File)$/.test(a.constructor.name)&&/^(Blob|File)$/.test(a[Symbol.toStringTag])}function v2(a){let n,i,p=a.body;if(a.bodyUsed)throw new Error("cannot clone body after it is used");return p instanceof ba&&typeof p.getBoundary!="function"&&(n=new m2,i=new m2,p.pipe(n),p.pipe(i),a[qa].body=n,p=i),p}function y2(a){return a===null?null:typeof a=="string"?"text/plain;charset=UTF-8":g2(a)?"application/x-www-form-urlencoded;charset=UTF-8":Kt(a)?a.type||null:Buffer.isBuffer(a)||Object.prototype.toString.call(a)==="[object ArrayBuffer]"||ArrayBuffer.isView(a)?null:typeof a.getBoundary=="function"?`multipart/form-data;boundary=${a.getBoundary()}`:a instanceof ba?null:"text/plain;charset=UTF-8"}function w2(a){let n=a.body;return n===null?0:Kt(n)?n.size:Buffer.isBuffer(n)?n.length:n&&typeof n.getLengthSync=="function"&&(n._lengthRetrievers&&n._lengthRetrievers.length==0||n.hasKnownLength&&n.hasKnownLength())?n.getLengthSync():null}function Oc(a,n){let i=n.body;i===null?a.end():Kt(i)?i.stream().pipe(a):Buffer.isBuffer(i)?(a.write(i),a.end()):i.pipe(a)}Ae.Promise=global.Promise;var b2=/[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/,Vp=/[^\t\x20-\x7e\x80-\xff]/;function Ut(a){if(a=`${a}`,b2.test(a)||a==="")throw new TypeError(`${a} is not a legal HTTP header name`)}function u2(a){if(a=`${a}`,Vp.test(a))throw new TypeError(`${a} is not a legal HTTP header value`)}function Q1(a,n){n=n.toLowerCase();for(let i in a)if(i.toLowerCase()===n)return i}var we=Symbol("map"),ma=class a{constructor(){let n=arguments.length>0&&arguments[0]!==void 0?arguments[0]:void 0;if(this[we]=Object.create(null),n instanceof a){let i=n.raw(),p=Object.keys(i);for(let l of p)for(let s of i[l])this.append(l,s);return}if(n!=null)if(typeof n=="object"){let i=n[Symbol.iterator];if(i!=null){if(typeof i!="function")throw new TypeError("Header pairs must be iterable");let p=[];for(let l of n){if(typeof l!="object"||typeof l[Symbol.iterator]!="function")throw new TypeError("Each header pair must be iterable");p.push(Array.from(l))}for(let l of p){if(l.length!==2)throw new TypeError("Each header pair must be a name/value tuple");this.append(l[0],l[1])}}else for(let p of Object.keys(n)){let l=n[p];this.append(p,l)}}else throw new TypeError("Provided initializer must be an object")}get(n){n=`${n}`,Ut(n);let i=Q1(this[we],n);return i===void 0?null:this[we][i].join(", ")}forEach(n){let i=arguments.length>1&&arguments[1]!==void 0?arguments[1]:void 0,p=jp(this),l=0;for(;l<p.length;){var s=p[l];let c=s[0],f=s[1];n.call(i,f,c,this),p=jp(this),l++}}set(n,i){n=`${n}`,i=`${i}`,Ut(n),u2(i);let p=Q1(this[we],n);this[we][p!==void 0?p:n]=[i]}append(n,i){n=`${n}`,i=`${i}`,Ut(n),u2(i);let p=Q1(this[we],n);p!==void 0?this[we][p].push(i):this[we][n]=[i]}has(n){return n=`${n}`,Ut(n),Q1(this[we],n)!==void 0}delete(n){n=`${n}`,Ut(n);let i=Q1(this[we],n);i!==void 0&&delete this[we][i]}raw(){return this[we]}keys(){return Ip(this,"key")}values(){return Ip(this,"value")}[Symbol.iterator](){return Ip(this,"key+value")}};ma.prototype.entries=ma.prototype[Symbol.iterator];Object.defineProperty(ma.prototype,Symbol.toStringTag,{value:"Headers",writable:!1,enumerable:!1,configurable:!0});Object.defineProperties(ma.prototype,{get:{enumerable:!0},forEach:{enumerable:!0},set:{enumerable:!0},append:{enumerable:!0},has:{enumerable:!0},delete:{enumerable:!0},keys:{enumerable:!0},values:{enumerable:!0},entries:{enumerable:!0}});function jp(a){let n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"key+value";return Object.keys(a[we]).sort().map(n==="key"?function(p){return p.toLowerCase()}:n==="value"?function(p){return a[we][p].join(", ")}:function(p){return[p.toLowerCase(),a[we][p].join(", ")]})}var Bp=Symbol("internal");function Ip(a,n){let i=Object.create(Lp);return i[Bp]={target:a,kind:n,index:0},i}var Lp=Object.setPrototypeOf({next(){if(!this||Object.getPrototypeOf(this)!==Lp)throw new TypeError("Value of `this` is not a HeadersIterator");var a=this[Bp];let n=a.target,i=a.kind,p=a.index,l=jp(n,i),s=l.length;return p>=s?{value:void 0,done:!0}:(this[Bp].index=p+1,{value:l[p],done:!1})}},Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));Object.defineProperty(Lp,Symbol.toStringTag,{value:"HeadersIterator",writable:!1,enumerable:!1,configurable:!0});function zc(a){let n=Object.assign({__proto__:null},a[we]),i=Q1(a[we],"Host");return i!==void 0&&(n[i]=n[i][0]),n}function Mc(a){let n=new ma;for(let i of Object.keys(a))if(!b2.test(i))if(Array.isArray(a[i]))for(let p of a[i])Vp.test(p)||(n[we][i]===void 0?n[we][i]=[p]:n[we][i].push(p));else Vp.test(a[i])||(n[we][i]=[a[i]]);return n}var n1=Symbol("Response internals"),Vc=h2.STATUS_CODES,sa=class a{constructor(){let n=arguments.length>0&&arguments[0]!==void 0?arguments[0]:null,i=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};Ae.call(this,n,i);let p=i.status||200,l=new ma(i.headers);if(n!=null&&!l.has("Content-Type")){let s=y2(n);s&&l.append("Content-Type",s)}this[n1]={url:i.url,status:p,statusText:i.statusText||Vc[p],headers:l,counter:i.counter}}get url(){return this[n1].url||""}get status(){return this[n1].status}get ok(){return this[n1].status>=200&&this[n1].status<300}get redirected(){return this[n1].counter>0}get statusText(){return this[n1].statusText}get headers(){return this[n1].headers}clone(){return new a(v2(this),{url:this.url,status:this.status,statusText:this.statusText,headers:this.headers,ok:this.ok,redirected:this.redirected})}};Ae.mixIn(sa.prototype);Object.defineProperties(sa.prototype,{url:{enumerable:!0},status:{enumerable:!0},ok:{enumerable:!0},redirected:{enumerable:!0},statusText:{enumerable:!0},headers:{enumerable:!0},clone:{enumerable:!0}});Object.defineProperty(sa.prototype,Symbol.toStringTag,{value:"Response",writable:!1,enumerable:!1,configurable:!0});var La=Symbol("Request internals"),jc=ur.URL||f2.URL,Bc=ur.parse,Lc=ur.format;function Op(a){return/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(a)&&(a=new jc(a).toString()),Bc(a)}var qc="destroy"in ba.Readable.prototype;function mr(a){return typeof a=="object"&&typeof a[La]=="object"}function Uc(a){let n=a&&typeof a=="object"&&Object.getPrototypeOf(a);return!!(n&&n.constructor.name==="AbortSignal")}var i1=class a{constructor(n){let i=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},p;mr(n)?p=Op(n.url):(n&&n.href?p=Op(n.href):p=Op(`${n}`),n={});let l=i.method||n.method||"GET";if(l=l.toUpperCase(),(i.body!=null||mr(n)&&n.body!==null)&&(l==="GET"||l==="HEAD"))throw new TypeError("Request with GET/HEAD method cannot have body");let s=i.body!=null?i.body:mr(n)&&n.body!==null?v2(n):null;Ae.call(this,s,{timeout:i.timeout||n.timeout||0,size:i.size||n.size||0});let c=new ma(i.headers||n.headers||{});if(s!=null&&!c.has("Content-Type")){let h=y2(s);h&&c.append("Content-Type",h)}let f=mr(n)?n.signal:null;if("signal"in i&&(f=i.signal),f!=null&&!Uc(f))throw new TypeError("Expected signal to be an instanceof AbortSignal");this[La]={method:l,redirect:i.redirect||n.redirect||"follow",headers:c,parsedURL:p,signal:f},this.follow=i.follow!==void 0?i.follow:n.follow!==void 0?n.follow:20,this.compress=i.compress!==void 0?i.compress:n.compress!==void 0?n.compress:!0,this.counter=i.counter||n.counter||0,this.agent=i.agent||n.agent}get method(){return this[La].method}get url(){return Lc(this[La].parsedURL)}get headers(){return this[La].headers}get redirect(){return this[La].redirect}get signal(){return this[La].signal}clone(){return new a(this)}};Ae.mixIn(i1.prototype);Object.defineProperty(i1.prototype,Symbol.toStringTag,{value:"Request",writable:!1,enumerable:!1,configurable:!0});Object.defineProperties(i1.prototype,{method:{enumerable:!0},url:{enumerable:!0},headers:{enumerable:!0},redirect:{enumerable:!0},clone:{enumerable:!0},signal:{enumerable:!0}});function Fc(a){let n=a[La].parsedURL,i=new ma(a[La].headers);if(i.has("Accept")||i.set("Accept","*/*"),!n.protocol||!n.hostname)throw new TypeError("Only absolute URLs are supported");if(!/^https?:$/.test(n.protocol))throw new TypeError("Only HTTP(S) protocols are supported");if(a.signal&&a.body instanceof ba.Readable&&!qc)throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");let p=null;if(a.body==null&&/^(POST|PUT)$/i.test(a.method)&&(p="0"),a.body!=null){let s=w2(a);typeof s=="number"&&(p=String(s))}p&&i.set("Content-Length",p),i.has("User-Agent")||i.set("User-Agent","node-fetch/1.0 (+https://github.com/bitinn/node-fetch)"),a.compress&&!i.has("Accept-Encoding")&&i.set("Accept-Encoding","gzip,deflate");let l=a.agent;return typeof l=="function"&&(l=l(n)),Object.assign({},n,{method:a.method,headers:zc(i),agent:l})}function et(a){Error.call(this,a),this.type="aborted",this.message=a,Error.captureStackTrace(this,this.constructor)}et.prototype=Object.create(Error.prototype);et.prototype.constructor=et;et.prototype.name="AbortError";var $t=ur.URL||f2.URL,c2=ba.PassThrough,$c=function(n,i){let p=new $t(i).hostname,l=new $t(n).hostname;return p===l||p[p.length-l.length-1]==="."&&p.endsWith(l)},Kc=function(n,i){let p=new $t(i).protocol,l=new $t(n).protocol;return p===l};function r1(a,n){if(!r1.Promise)throw new Error("native promise missing, set fetch.Promise to your favorite alternative");return Ae.Promise=r1.Promise,new r1.Promise(function(i,p){let l=new i1(a,n),s=Fc(l),c=(s.protocol==="https:"?Dc:h2).request,f=l.signal,h=null,b=function(){let q=new et("The user aborted a request.");p(q),l.body&&l.body instanceof ba.Readable&&zp(l.body,q),!(!h||!h.body)&&h.body.emit("error",q)};if(f&&f.aborted){b();return}let C=function(){b(),O()},x=c(s),E;f&&f.addEventListener("abort",C);function O(){x.abort(),f&&f.removeEventListener("abort",C),clearTimeout(E)}l.timeout&&x.once("socket",function(R){E=setTimeout(function(){p(new Re(`network timeout at: ${l.url}`,"request-timeout")),O()},l.timeout)}),x.on("error",function(R){p(new Re(`request to ${l.url} failed, reason: ${R.message}`,"system",R)),h&&h.body&&zp(h.body,R),O()}),Wc(x,function(R){f&&f.aborted||h&&h.body&&zp(h.body,R)}),parseInt(process.version.substring(1))<14&&x.on("socket",function(R){R.addListener("close",function(q){let F=R.listenerCount("data")>0;if(h&&F&&!q&&!(f&&f.aborted)){let U=new Error("Premature close");U.code="ERR_STREAM_PREMATURE_CLOSE",h.body.emit("error",U)}})}),x.on("response",function(R){clearTimeout(E);let q=Mc(R.headers);if(r1.isRedirect(R.statusCode)){let ee=q.get("Location"),ae=null;try{ae=ee===null?null:new $t(ee,l.url).toString()}catch{if(l.redirect!=="manual"){p(new Re(`uri requested responds with an invalid redirect URL: ${ee}`,"invalid-redirect")),O();return}}switch(l.redirect){case"error":p(new Re(`uri requested responds with a redirect, redirect mode is set to error: ${l.url}`,"no-redirect")),O();return;case"manual":if(ae!==null)try{q.set("Location",ae)}catch(ze){p(ze)}break;case"follow":if(ae===null)break;if(l.counter>=l.follow){p(new Re(`maximum redirect reached at: ${l.url}`,"max-redirect")),O();return}let be={headers:new ma(l.headers),follow:l.follow,counter:l.counter+1,agent:l.agent,compress:l.compress,method:l.method,body:l.body,signal:l.signal,timeout:l.timeout,size:l.size};if(!$c(l.url,ae)||!Kc(l.url,ae))for(let ze of["authorization","www-authenticate","cookie","cookie2"])be.headers.delete(ze);if(R.statusCode!==303&&l.body&&w2(l)===null){p(new Re("Cannot follow redirect with body being a readable stream","unsupported-redirect")),O();return}(R.statusCode===303||(R.statusCode===301||R.statusCode===302)&&l.method==="POST")&&(be.method="GET",be.body=void 0,be.headers.delete("content-length")),i(r1(new i1(ae,be))),O();return}}R.once("end",function(){f&&f.removeEventListener("abort",C)});let F=R.pipe(new c2),U={url:l.url,status:R.statusCode,statusText:R.statusMessage,headers:q,size:l.size,timeout:l.timeout,counter:l.counter},j=q.get("Content-Encoding");if(!l.compress||l.method==="HEAD"||j===null||R.statusCode===204||R.statusCode===304){h=new sa(F,U),i(h);return}let Q={flush:k1.Z_SYNC_FLUSH,finishFlush:k1.Z_SYNC_FLUSH};if(j=="gzip"||j=="x-gzip"){F=F.pipe(k1.createGunzip(Q)),h=new sa(F,U),i(h);return}if(j=="deflate"||j=="x-deflate"){let ee=R.pipe(new c2);ee.once("data",function(ae){(ae[0]&15)===8?F=F.pipe(k1.createInflate()):F=F.pipe(k1.createInflateRaw()),h=new sa(F,U),i(h)}),ee.on("end",function(){h||(h=new sa(F,U),i(h))});return}if(j=="br"&&typeof k1.createBrotliDecompress=="function"){F=F.pipe(k1.createBrotliDecompress()),h=new sa(F,U),i(h);return}h=new sa(F,U),i(h)}),Oc(x,l)})}function Wc(a,n){let i;a.on("socket",function(p){i=p}),a.on("response",function(p){let l=p.headers;l["transfer-encoding"]==="chunked"&&!l["content-length"]&&p.once("close",function(s){if(i&&i.listenerCount("data")>0&&!s){let f=new Error("Premature close");f.code="ERR_STREAM_PREMATURE_CLOSE",n(f)}})})}function zp(a,n){a.destroy?a.destroy(n):(a.emit("error",n),a.end())}r1.isRedirect=function(a){return a===301||a===302||a===303||a===307||a===308};r1.Promise=global.Promise;_2.exports=_a=r1;Object.defineProperty(_a,"__esModule",{value:!0});_a.default=_a;_a.Headers=ma;_a.Request=i1;_a.Response=sa;_a.FetchError=Re;_a.AbortError=et});var N2=M((Nv,Up)=>{"use strict";var ih=Object.prototype.hasOwnProperty,Be="~";function Gt(){}Object.create&&(Gt.prototype=Object.create(null),new Gt().__proto__||(Be=!1));function ph(a,n,i){this.fn=a,this.context=n,this.once=i||!1}function x2(a,n,i,p,l){if(typeof i!="function")throw new TypeError("The listener must be a function");var s=new ph(i,p||a,l),c=Be?Be+n:n;return a._events[c]?a._events[c].fn?a._events[c]=[a._events[c],s]:a._events[c].push(s):(a._events[c]=s,a._eventsCount++),a}function fr(a,n){--a._eventsCount===0?a._events=new Gt:delete a._events[n]}function Oe(){this._events=new Gt,this._eventsCount=0}Oe.prototype.eventNames=function(){var n=[],i,p;if(this._eventsCount===0)return n;for(p in i=this._events)ih.call(i,p)&&n.push(Be?p.slice(1):p);return Object.getOwnPropertySymbols?n.concat(Object.getOwnPropertySymbols(i)):n};Oe.prototype.listeners=function(n){var i=Be?Be+n:n,p=this._events[i];if(!p)return[];if(p.fn)return[p.fn];for(var l=0,s=p.length,c=new Array(s);l<s;l++)c[l]=p[l].fn;return c};Oe.prototype.listenerCount=function(n){var i=Be?Be+n:n,p=this._events[i];return p?p.fn?1:p.length:0};Oe.prototype.emit=function(n,i,p,l,s,c){var f=Be?Be+n:n;if(!this._events[f])return!1;var h=this._events[f],b=arguments.length,C,x;if(h.fn){switch(h.once&&this.removeListener(n,h.fn,void 0,!0),b){case 1:return h.fn.call(h.context),!0;case 2:return h.fn.call(h.context,i),!0;case 3:return h.fn.call(h.context,i,p),!0;case 4:return h.fn.call(h.context,i,p,l),!0;case 5:return h.fn.call(h.context,i,p,l,s),!0;case 6:return h.fn.call(h.context,i,p,l,s,c),!0}for(x=1,C=new Array(b-1);x<b;x++)C[x-1]=arguments[x];h.fn.apply(h.context,C)}else{var E=h.length,O;for(x=0;x<E;x++)switch(h[x].once&&this.removeListener(n,h[x].fn,void 0,!0),b){case 1:h[x].fn.call(h[x].context);break;case 2:h[x].fn.call(h[x].context,i);break;case 3:h[x].fn.call(h[x].context,i,p);break;case 4:h[x].fn.call(h[x].context,i,p,l);break;default:if(!C)for(O=1,C=new Array(b-1);O<b;O++)C[O-1]=arguments[O];h[x].fn.apply(h[x].context,C)}}return!0};Oe.prototype.on=function(n,i,p){return x2(this,n,i,p,!1)};Oe.prototype.once=function(n,i,p){return x2(this,n,i,p,!0)};Oe.prototype.removeListener=function(n,i,p,l){var s=Be?Be+n:n;if(!this._events[s])return this;if(!i)return fr(this,s),this;var c=this._events[s];if(c.fn)c.fn===i&&(!l||c.once)&&(!p||c.context===p)&&fr(this,s);else{for(var f=0,h=[],b=c.length;f<b;f++)(c[f].fn!==i||l&&!c[f].once||p&&c[f].context!==p)&&h.push(c[f]);h.length?this._events[s]=h.length===1?h[0]:h:fr(this,s)}return this};Oe.prototype.removeAllListeners=function(n){var i;return n?(i=Be?Be+n:n,this._events[i]&&fr(this,i)):(this._events=new Gt,this._eventsCount=0),this};Oe.prototype.off=Oe.prototype.removeListener;Oe.prototype.addListener=Oe.prototype.on;Oe.prefixed=Be;Oe.EventEmitter=Oe;typeof Up<"u"&&(Up.exports=Oe)});var P2=M((Av,A2)=>{"use strict";A2.exports=(a,n)=>(n=n||(()=>{}),a.then(i=>new Promise(p=>{p(n())}).then(()=>i),i=>new Promise(p=>{p(n())}).then(()=>{throw i})))});var D2=M((Pv,vr)=>{"use strict";var lh=P2(),gr=class extends Error{constructor(n){super(n),this.name="TimeoutError"}},R2=(a,n,i)=>new Promise((p,l)=>{if(typeof n!="number"||n<0)throw new TypeError("Expected `milliseconds` to be a positive number");if(n===1/0){p(a);return}let s=setTimeout(()=>{if(typeof i=="function"){try{p(i())}catch(h){l(h)}return}let c=typeof i=="string"?i:`Promise timed out after ${n} milliseconds`,f=i instanceof Error?i:new gr(c);typeof a.cancel=="function"&&a.cancel(),l(f)},n);lh(a.then(p,l),()=>{clearTimeout(s)})});vr.exports=R2;vr.exports.default=R2;vr.exports.TimeoutError=gr});var E2=M(Fp=>{"use strict";Object.defineProperty(Fp,"__esModule",{value:!0});function oh(a,n,i){let p=0,l=a.length;for(;l>0;){let s=l/2|0,c=p+s;i(a[c],n)<=0?(p=++c,l-=s+1):l=s}return p}Fp.default=oh});var I2=M(Kp=>{"use strict";Object.defineProperty(Kp,"__esModule",{value:!0});var dh=E2(),$p=class{constructor(){this._queue=[]}enqueue(n,i){i=Object.assign({priority:0},i);let p={priority:i.priority,run:n};if(this.size&&this._queue[this.size-1].priority>=i.priority){this._queue.push(p);return}let l=dh.default(this._queue,p,(s,c)=>c.priority-s.priority);this._queue.splice(l,0,p)}dequeue(){let n=this._queue.shift();return n?.run}filter(n){return this._queue.filter(i=>i.priority===n.priority).map(i=>i.run)}get size(){return this._queue.length}};Kp.default=$p});var z2=M(Hp=>{"use strict";Object.defineProperty(Hp,"__esModule",{value:!0});var sh=N2(),O2=D2(),mh=I2(),yr=()=>{},uh=new O2.TimeoutError,Wp=class extends sh{constructor(n){var i,p,l,s;if(super(),this._intervalCount=0,this._intervalEnd=0,this._pendingCount=0,this._resolveEmpty=yr,this._resolveIdle=yr,n=Object.assign({carryoverConcurrencyCount:!1,intervalCap:1/0,interval:0,concurrency:1/0,autoStart:!0,queueClass:mh.default},n),!(typeof n.intervalCap=="number"&&n.intervalCap>=1))throw new TypeError(`Expected \`intervalCap\` to be a number from 1 and up, got \`${(p=(i=n.intervalCap)===null||i===void 0?void 0:i.toString())!==null&&p!==void 0?p:""}\` (${typeof n.intervalCap})`);if(n.interval===void 0||!(Number.isFinite(n.interval)&&n.interval>=0))throw new TypeError(`Expected \`interval\` to be a finite number >= 0, got \`${(s=(l=n.interval)===null||l===void 0?void 0:l.toString())!==null&&s!==void 0?s:""}\` (${typeof n.interval})`);this._carryoverConcurrencyCount=n.carryoverConcurrencyCount,this._isIntervalIgnored=n.intervalCap===1/0||n.interval===0,this._intervalCap=n.intervalCap,this._interval=n.interval,this._queue=new n.queueClass,this._queueClass=n.queueClass,this.concurrency=n.concurrency,this._timeout=n.timeout,this._throwOnTimeout=n.throwOnTimeout===!0,this._isPaused=n.autoStart===!1}get _doesIntervalAllowAnother(){return this._isIntervalIgnored||this._intervalCount<this._intervalCap}get _doesConcurrentAllowAnother(){return this._pendingCount<this._concurrency}_next(){this._pendingCount--,this._tryToStartAnother(),this.emit("next")}_resolvePromises(){this._resolveEmpty(),this._resolveEmpty=yr,this._pendingCount===0&&(this._resolveIdle(),this._resolveIdle=yr,this.emit("idle"))}_onResumeInterval(){this._onInterval(),this._initializeIntervalIfNeeded(),this._timeoutId=void 0}_isIntervalPaused(){let n=Date.now();if(this._intervalId===void 0){let i=this._intervalEnd-n;if(i<0)this._intervalCount=this._carryoverConcurrencyCount?this._pendingCount:0;else return this._timeoutId===void 0&&(this._timeoutId=setTimeout(()=>{this._onResumeInterval()},i)),!0}return!1}_tryToStartAnother(){if(this._queue.size===0)return this._intervalId&&clearInterval(this._intervalId),this._intervalId=void 0,this._resolvePromises(),!1;if(!this._isPaused){let n=!this._isIntervalPaused();if(this._doesIntervalAllowAnother&&this._doesConcurrentAllowAnother){let i=this._queue.dequeue();return i?(this.emit("active"),i(),n&&this._initializeIntervalIfNeeded(),!0):!1}}return!1}_initializeIntervalIfNeeded(){this._isIntervalIgnored||this._intervalId!==void 0||(this._intervalId=setInterval(()=>{this._onInterval()},this._interval),this._intervalEnd=Date.now()+this._interval)}_onInterval(){this._intervalCount===0&&this._pendingCount===0&&this._intervalId&&(clearInterval(this._intervalId),this._intervalId=void 0),this._intervalCount=this._carryoverConcurrencyCount?this._pendingCount:0,this._processQueue()}_processQueue(){for(;this._tryToStartAnother(););}get concurrency(){return this._concurrency}set concurrency(n){if(!(typeof n=="number"&&n>=1))throw new TypeError(`Expected \`concurrency\` to be a number from 1 and up, got \`${n}\` (${typeof n})`);this._concurrency=n,this._processQueue()}async add(n,i={}){return new Promise((p,l)=>{let s=async()=>{this._pendingCount++,this._intervalCount++;try{let c=this._timeout===void 0&&i.timeout===void 0?n():O2.default(Promise.resolve(n()),i.timeout===void 0?this._timeout:i.timeout,()=>{(i.throwOnTimeout===void 0?this._throwOnTimeout:i.throwOnTimeout)&&l(uh)});p(await c)}catch(c){l(c)}this._next()};this._queue.enqueue(s,i),this._tryToStartAnother(),this.emit("add")})}async addAll(n,i){return Promise.all(n.map(async p=>this.add(p,i)))}start(){return this._isPaused?(this._isPaused=!1,this._processQueue(),this):this}pause(){this._isPaused=!0}clear(){this._queue=new this._queueClass}async onEmpty(){if(this._queue.size!==0)return new Promise(n=>{let i=this._resolveEmpty;this._resolveEmpty=()=>{i(),n()}})}async onIdle(){if(!(this._pendingCount===0&&this._queue.size===0))return new Promise(n=>{let i=this._resolveIdle;this._resolveIdle=()=>{i(),n()}})}get size(){return this._queue.size}sizeBy(n){return this._queue.filter(n).length}get pending(){return this._pendingCount}get isPaused(){return this._isPaused}get timeout(){return this._timeout}set timeout(n){this._timeout=n}};Hp.default=Wp});var V2=M(tt=>{"use strict";var ch=tt&&tt.__importDefault||function(a){return a&&a.__esModule?a:{default:a}};Object.defineProperty(tt,"__esModule",{value:!0});tt.ThreadManager=void 0;var hh=ch(z2()),M2="libretto.cursor",Gp=class{client;queues={};constructor(n){this.client=n}async enqueue(n,i){let p=this.queues[n];return p||(p=new hh.default({concurrency:1}),this.queues[n]=p),p.add(async()=>{try{await i()}catch(l){process.env.LIBRETTO_DEBUG==="true"&&console.error(`[Libretto] Error processing thread: ${l}`)}})}async getCursor(n){return((await this.client.beta.threads.retrieve(n)).metadata??{})[M2]??""}async setCursor(n,i){await this.client.beta.threads.update(n,{metadata:{[M2]:i}})}};tt.ThreadManager=Gp});var j2=M(wr=>{"use strict";Object.defineProperty(wr,"__esModule",{value:!0});wr.LibrettoMessages=void 0;var fh=require("openai/resources/beta/threads/messages"),gh=nt(),Jp=class extends fh.Messages{client;config;threadManager;constructor(n,i,p){super(n),this.client=n,this.config=i,this.threadManager=p}del(n,i,p){return this._del(n,i,p)}async _del(n,i,p){return await new Promise(l=>{this.threadManager.enqueue(n,async()=>{try{await this.handleDelete(n,i)}finally{l()}})}),super.del(n,i,p)}async handleDelete(n,i){if(await this.threadManager.getCursor(n)===i){let l=await this.findPreviousMessage(n,i),s=l!==null?l.id:"";await this.threadManager.setCursor(n,s)}await(0,gh.sendFeedback)({feedbackKey:i,isDeleted:!0,apiKey:this.config.apiKey})}async findPreviousMessage(n,i){let l=(await this.client.beta.threads.messages.list(n,{after:i,order:"desc",limit:1})).data;return l.length>0?l[0]:null}};wr.LibrettoMessages=Jp});var B2=M(br=>{"use strict";Object.defineProperty(br,"__esModule",{value:!0});br.LibrettoRuns=void 0;var vh=require("openai/resources/beta/threads/runs/runs"),yh=nt(),Yp=class extends vh.Runs{client;config;threadManager;constructor(n,i,p){super(n),this.client=n,this.config=i,this.threadManager=p}createAndPoll(n,i,p){return this._createAndPoll(n,i,p)}async _createAndPoll(n,i,p){let{libretto:l,...s}=i,c=await super.createAndPoll(n,s,p);return l&&l.promptTemplateName&&this.threadManager.enqueue(n,()=>this.handleRun(n,s,{runId:c.id,opts:{apiKey:l.apiKey,promptTemplateName:l.promptTemplateName}})),c}async handleRun(n,i,p){let l=await this.client.beta.threads.runs.poll(n,p.runId),s=await this.client.beta.assistants.retrieve(l.assistant_id);if(l.status==="failed"||l.status==="cancelled"||l.status==="incomplete"){await this.prepareAndSendEvent({runCreateParams:i,librettoParams:p,responseErrors:[JSON.stringify(l.last_error)],chatId:n,assistant:s,params:{}});return}if(l.status!=="completed"){process.env.LIBRETTO_DEBUG==="true"&&console.log(`[Libretto] Assistant thread run did not complete, ignoring: threadId=${n} runId=${p.runId}`);return}let c=await this.threadManager.getCursor(n),h=(await this.client.beta.threads.messages.list(n,{after:c,order:"asc",limit:100})).data;if(h.length!==0)for(let b=0;b<h.length;b++){let C=h[b];if(C.content.length===0||C.content[0].type!=="text"){console.log(`[Libretto] Skipping unsupported assistant message: ${JSON.stringify(C)}`);continue}await this.prepareAndSendEvent({response:C.content[0].text.value,runCreateParams:i,librettoParams:p,assistant:s,chatId:C.id,params:{chat_history:[{role:C.role,content:C.content[0].text.value}]}}),await this.threadManager.setCursor(n,C.id)}}async prepareAndSendEvent({params:n,librettoParams:i,runCreateParams:p,assistant:l,chatId:s,feedbackKey:c,response:f,responseErrors:h}){await(0,yh.send_event)({responseTime:1,response:f,responseErrors:h,params:n,apiKey:i?.opts?.apiKey??this.config.apiKey??process.env.LIBRETTO_API_KEY,promptTemplateChat:[{role:"assistant",content:l.instructions},{role:"chat_history",content:"{chat_history}"}],modelParameters:{modelProvider:"openai",modelType:"assistants",model:p.model??l.model,...p},promptTemplateName:l.name??l.id,apiName:i?.opts?.promptTemplateName??l.name??l.id,prompt:{},chatId:s,feedbackKey:c})}};br.LibrettoRuns=Yp});var L2=M(_r=>{"use strict";Object.defineProperty(_r,"__esModule",{value:!0});_r.LibrettoThreads=void 0;var wh=require("openai/resources/beta/threads/threads"),bh=V2(),_h=j2(),kh=B2(),Zp=class extends wh.Threads{client;config;constructor(n,i){super(n),this.client=n,this.config=i;let p=new bh.ThreadManager(n);this.runs=new kh.LibrettoRuns(n,i,p),this.messages=new _h.LibrettoMessages(n,i,p)}};_r.LibrettoThreads=Zp});var q2=M(kr=>{"use strict";Object.defineProperty(kr,"__esModule",{value:!0});kr.LibrettoBeta=void 0;var Ch=require("openai/resources/beta/beta"),Sh=L2(),Xp=class extends Ch.Beta{config;constructor(n,i){super(n),this.config=i,this.threads=new Sh.LibrettoThreads(n,i)}};kr.LibrettoBeta=Xp});var el=M(Cr=>{"use strict";Object.defineProperty(Cr,"__esModule",{value:!0});Cr.PiiRedactor=void 0;var Th=op(),Qp=class{redactor;constructor(){this.redactor=new Th.SyncRedactor({builtInRedactors:{digits:{enabled:!1}}})}redactText(n){return this.redactor.redact(n)}redact(n){return n==null?n:Array.isArray(n)?n.map(i=>this.redact(i)):typeof n=="object"?Object.fromEntries(Object.entries(n).map(([i,p])=>[i,this.redact(p)])):typeof n=="string"?this.redactText(n):this.redactText(new String(n).valueOf())}};Cr.PiiRedactor=Qp});var tl=M(p1=>{"use strict";Object.defineProperty(p1,"__esModule",{value:!0});p1.f=Jt;p1.formatTemplate=Ph;p1.getTemplate=Rh;p1.getTemplateVariables=Dh;p1.objectTemplate=al;p1.isObjectTemplate=Eh;var xh=/({[a-zA-Z0-9_[\].]+})/g,U2=/{([a-zA-Z0-9_[\].]+)}/g,Nh=/\\{([a-zA-Z0-9_[\].]+)\\}/g,Ah="chat_history",F2="role";function Jt(a,...n){if(n.length>0)throw new Error("No inline variables: Use {} syntax, instead of ${}");let p=(typeof a=="string"?[a]:a).join(""),l=Array.from(new Set(p.split(xh).map(s=>U2.exec(s)?.[1]).filter(s=>!!s)));return{[Ua]:s=>p.replace(U2,(c,f)=>{if(s[f]===void 0)throw new Error(`Can't format template, missing variable: ${f}`);return s[f]}).replace(Nh,(c,f)=>`{${f}}`),[C1]:Object.freeze(l),[Yt]:p}}var Ua=Symbol("format"),Yt=Symbol("template"),C1=Symbol("variables");function Ph(a,n){let i=a[Ua];return i(n)}function Rh(a){return a[Yt]}function Dh(a){return a[C1]}function al(a){let n=Sr(a);function i(l){return a==null||typeof a=="number"?a:typeof a=="string"?Jt(a)[Ua](l):Array.isArray(a)?a.flatMap(s=>Ih(s)?Oh(s,l):al(s)[Ua](l)):Object.fromEntries(Object.entries(a).map(([s,c])=>[Jt(s)[Ua](l),al(c)[Ua](l)]))}if(typeof a=="string")return{[Ua]:i,[C1]:n,[Yt]:a,toString:()=>a};if(typeof a!="object")throw new Error("Can only generate object templates for objects or strings");let p=structuredClone(a);return p[Ua]=i,p[C1]=Object.freeze(n),p[Yt]=a,p}function Eh(a){return Ua in a&&C1 in a&&Yt in a}function Sr(a){return a==null||typeof a=="number"?[]:typeof a=="string"?Jt(a)[C1]:Array.isArray(a)?a.flatMap(n=>Sr(n)):Object.entries(a).flatMap(([,n])=>typeof n=="string"?Jt(n)[C1]:Sr(n))}function Ih(a){return a==null||typeof a=="number"||typeof a=="string"||Array.isArray(a)?!1:F2 in a?a[F2]===Ah:!1}function Oh(a,n){let i=Sr(a);if(i.length===0)throw new Error("Expected to find a variable in the content of the chat_history role, but none was found");return i.flatMap(l=>{let s=n[l];if(!s)throw new Error(`No value was found in 'templateParams' for the variable '${l}'. Ensure you have a corresponding entry in 'templateParams'.`);return s})}});var rl=M(Zt=>{"use strict";Object.defineProperty(Zt,"__esModule",{value:!0});Zt.getResolvedStream=Mh;Zt.getResolvedMessages=Bh;Zt.getResolvedPrompt=Lh;var zh=require("openai/streaming"),rt=tl();async function Mh(a,n,i,p){if(n){let s=await a,c=new nl(s,p,i);return{returnValue:c,finalResultPromise:c.finishPromise}}let l=await a;return l.libretto||(l.libretto={}),l.libretto.feedbackKey=i,p?{returnValue:await a,finalResultPromise:Promise.resolve(Vh(l))}:{returnValue:await a,finalResultPromise:Promise.resolve(jh(l))}}function Vh(a){let n={usage:a.usage,finish_reason:a.choices?.[0]?.finish_reason,logprobs:a.choices?.[0]?.logprobs},i=a.choices[0].message.content??void 0;a.choices[0].message.function_call&&(i=JSON.stringify(a.choices[0].message.function_call));let p=a.choices[0].message.tool_calls;return{response:i,tool_calls:p,responseMetrics:n}}function jh(a){return a?a.choices[0].text?{response:a.choices[0].text,tool_calls:[],responseMetrics:{usage:a.usage,finish_reason:a.choices[0].finish_reason,logprobs:a.choices[0].logprobs}}:{response:void 0,tool_calls:[]}:{response:null,tool_calls:[]}}function Bh(a,n){if((0,rt.isObjectTemplate)(a)){if(!n)throw new Error("Template requires params, but none were provided");return{messages:(0,rt.formatTemplate)(a,n),template:(0,rt.getTemplate)(a)}}return{messages:a,template:null}}function Lh(a,n){if(typeof a=="string")return{prompt:a,template:null};if(!a||Array.isArray(a))return a?(typeof a[0]=="number"&&console.warn("Cannot use token numbers in prompt arrays"),{prompt:a.join(""),template:null}):{prompt:a,template:null};if(!a)return{prompt:a,template:null};if((0,rt.isObjectTemplate)(a)){if(!n)throw new Error("Template requires params, but none were provided");return{prompt:(0,rt.formatTemplate)(a,n),template:(0,rt.getTemplate)(a)}}return{prompt:a,template:null}}var nl=class extends zh.Stream{finishPromise;resolveIterator;responseUsage;finishReason;logProbs;isChat;feedbackKey;constructor(n,i,p){super(n.iterator,n.controller),this.isChat=!!i,this.finishPromise=new Promise(l=>this.resolveIterator=l),this.feedbackKey=p}async*[Symbol.asyncIterator](){let n=super[Symbol.asyncIterator](),i={[Symbol.asyncIterator]:()=>n},p=[],l=[],s=null;try{for await(let c of i){if(this.isChat){let f=c;if(s||(s=f),f.libretto||(f.libretto={}),f.libretto.feedbackKey=this.feedbackKey,f.usage){this.responseUsage=f.usage;continue}f.choices[0].delta.content&&p.push(f.choices[0].delta.content),f.choices[0].delta.tool_calls?f.choices[0].delta.tool_calls.forEach(h=>{let b=h.index??0;l[b]||(l[b]=[]),l[b].push(h)}):f.choices[0].delta.function_call&&p.push(JSON.stringify(f.choices[0].delta.function_call)),f.choices[0].finish_reason&&(this.finishReason=f.choices[0].finish_reason)}else{let f=c;f.libretto||(f.libretto={}),f.libretto.feedbackKey=this.feedbackKey,p.push(f.choices[0].text),this.responseUsage=f.usage,this.finishReason=f.choices[0].finish_reason,this.logProbs=f.choices[0].logprobs}yield c}}finally{let c=p.join(""),f=this.makeToolCalls(l),h={...s};c&&h?.choices?.[0]?.delta?.content&&(h.choices[0].delta.content=c),f&&h?.choices?.[0]?.delta?.tool_calls&&(h.choices[0].delta.tool_calls=f),this.responseUsage&&(h.usage=this.responseUsage),this.finishReason&&h?.choices?.[0]?.finish_reason&&(h.choices[0].finish_reason=this.finishReason),h.libretto=h.libretto??{},h.libretto.context={...h.libretto.context,isLibrettoStream:!0},this.resolveIterator({tool_calls:f,response:c,streamRawResponse:h,responseMetrics:{usage:this.responseUsage,finish_reason:this.finishReason,logprobs:this.logProbs}})}}makeToolCalls(n){if(!n||Object.keys(n).length===0)return;let i=[];return Object.keys(n).map(Number).sort((p,l)=>p-l).forEach(p=>{let l=n[p],s=l.shift();if(s){for(let c of l)c.function&&c.function.arguments&&s&&s.function&&(s.function.arguments+=c.function.arguments);i.push(s)}}),i}}});var K2=M(it=>{"use strict";var qh=it&&it.__importDefault||function(a){return a&&a.__esModule?a:{default:a}};Object.defineProperty(it,"__esModule",{value:!0});it.LibrettoChat=void 0;var Uh=qh(require("crypto")),Fh=require("openai/resources/chat/chat"),$h=require("openai/resources/chat/completions"),Kh=nt(),Wh=el(),$2=rl(),il=class extends Fh.Chat{config;constructor(n,i){super(n),this.config=i,this.completions=new pl(n,i)}};it.LibrettoChat=il;var pl=class extends $h.Completions{config;piiRedactor;constructor(n,i){super(n),this.config=i,i.redactPii&&(this.piiRedactor=new Wh.PiiRedactor)}create(n,i){return this._create(n,i)}async _create(n,i){let p=Date.now(),{libretto:l,messages:s,stream:c,tools:f,...h}=n,{messages:b,template:C}=(0,$2.getResolvedMessages)(s,l?.templateParams);c&&(h.stream_options={...h.stream_options,include_usage:!0});let x=super.create({...h,messages:b,tools:f,stream:c},i),E=l?.promptTemplateName??this.config.promptTemplateName;if(!E&&!this.config.allowUnnamedPrompts)return x;let O=l?.feedbackKey??Uh.default.randomUUID(),{finalResultPromise:R,returnValue:q}=await(0,$2.getResolvedStream)(x,c,O,!0),F=R.then(async({response:U,tool_calls:j,responseMetrics:Q,streamRawResponse:ee})=>{let ae=Date.now()-p,be=l?.templateParams??{};if(this.piiRedactor){let ot=this.piiRedactor;try{U=ot.redact(U),be=ot.redact(be),j=j?.map(o1=>({...o1,function:{...o1.function,arguments:ot.redact(o1?.function?.arguments)}}))}catch(o1){console.log("Failed to redact PII",o1)}}let ze=ee||q;await this.prepareAndSendEvent({responseTime:ae,response:U,rawResponse:ze,params:be,feedbackKey:O,template:C,resolvedPromptTemplateName:E,resolvedMessages:b,tools:f,responseMetrics:Q,librettoParams:l,openaiBody:h,toolCalls:j})}).catch(async U=>{let j=Date.now()-p,Q=l?.templateParams??{};if(this.piiRedactor){let ee=this.piiRedactor;try{Q=ee.redact(Q)}catch(ae){console.warn("Failed to redact PII",ae)}}await this.prepareAndSendEvent({responseTime:j,responseErrors:[JSON.stringify(U.response)],params:Q,feedbackKey:O,template:C,resolvedPromptTemplateName:E,resolvedMessages:b,tools:f,librettoParams:l,openaiBody:h})});return this.config.waitForEvent&&await F,q}async prepareAndSendEvent({response:n,rawResponse:i,responseTime:p,responseErrors:l,params:s,librettoParams:c,responseMetrics:f,template:h,resolvedMessages:b,resolvedPromptTemplateName:C,openaiBody:x,feedbackKey:E,tools:O,toolCalls:R}){await(0,Kh.send_event)({responseTime:p,response:n,rawResponse:i,responseErrors:l,responseMetrics:f,params:s,apiKey:c?.apiKey??this.config.apiKey??process.env.LIBRETTO_API_KEY,promptTemplateChat:c?.templateChat??h??b,promptTemplateName:C,apiName:c?.promptTemplateName??this.config.promptTemplateName,prompt:{},chatId:c?.chatId??this.config.chatId,chainId:c?.chainId??c?.parentEventId,feedbackKey:E,modelParameters:{modelProvider:"openai",modelType:"chat",...x},tools:O,toolCalls:R})}}});var H2=M(pt=>{"use strict";var Hh=pt&&pt.__importDefault||function(a){return a&&a.__esModule?a:{default:a}};Object.defineProperty(pt,"__esModule",{value:!0});pt.LibrettoCompletions=void 0;var Gh=Hh(require("crypto")),Jh=require("openai/resources/completions"),Yh=nt(),Zh=el(),W2=rl(),ll=class extends Jh.Completions{config;piiRedactor;constructor(n,i){super(n),this.config=i,i.redactPii&&(this.piiRedactor=new Zh.PiiRedactor)}create(n,i){return this._create(n,i)}async _create(n,i){let p=Date.now(),{libretto:l,prompt:s,stream:c,...f}=n,{prompt:h,template:b}=(0,W2.getResolvedPrompt)(s,l?.templateParams),C=super.create({...f,prompt:h,stream:c},i),x=Array.isArray(h)?null:h,E=l?.promptTemplateName??this.config.promptTemplateName;if(!E&&!this.config.allowUnnamedPrompts)return C;let O=l?.feedbackKey??Gh.default.randomUUID(),{finalResultPromise:R,returnValue:q}=await(0,W2.getResolvedStream)(C,c,O,!1),F=R.then(async({response:U,responseMetrics:j})=>{let Q=Date.now()-p,ee=l?.templateParams??{};if(this.piiRedactor)try{U=this.piiRedactor.redact(U),ee=this.piiRedactor.redact(ee)}catch(ae){console.warn("Failed to redact PII",ae)}await this.prepareAndSendEvent({responseTime:Q,response:U,responseMetrics:j,params:ee,template:b,resolvedPromptStr:x,resolvedPromptTemplateName:E,feedbackKey:O,openaiBody:f,librettoParams:l})}).catch(async U=>{let j=l?.templateParams??{},Q=Date.now()-p;if(this.piiRedactor){let ee=this.piiRedactor;try{j=ee.redact(j)}catch(ae){console.log("Failed to redact PII",ae)}}await this.prepareAndSendEvent({responseErrors:[JSON.stringify(U.response)],responseTime:Q,resolvedPromptStr:x,resolvedPromptTemplateName:E,params:j,template:b,librettoParams:l,feedbackKey:O,openaiBody:f})});return this.config.waitForEvent&&await F,q}async prepareAndSendEvent({response:n,responseTime:i,responseErrors:p,params:l,librettoParams:s,responseMetrics:c,template:f,resolvedPromptTemplateName:h,openaiBody:b,feedbackKey:C,resolvedPromptStr:x}){await(0,Yh.send_event)({responseTime:i,response:n,responseErrors:p,responseMetrics:c,params:l,apiKey:s?.apiKey??this.config.apiKey??process.env.LIBRETTO_API_KEY,promptTemplateText:f??x,promptTemplateName:h,apiName:s?.promptTemplateName??this.config.promptTemplateName,prompt:{},chatId:s?.chatId??this.config.chatId,chainId:s?.chainId??s?.parentEventId,context:s?.context,feedbackKey:C,modelParameters:{modelProvider:"openai",modelType:"completion",...b}})}};pt.LibrettoCompletions=ll});var G2=M(Tr=>{"use strict";Object.defineProperty(Tr,"__esModule",{value:!0});Tr.OpenAI=void 0;var Xh=require("openai"),Qh=q2(),ef=K2(),af=H2(),ol=class extends Xh.OpenAI{constructor(n){super(n);let i=n?.libretto??{};this.completions=new af.LibrettoCompletions(this,i),this.chat=new ef.LibrettoChat(this,i),this.beta=new Qh.LibrettoBeta(this,i)}};Tr.OpenAI=ol});var dl=M(lt=>{"use strict";Object.defineProperty(lt,"__esModule",{value:!0});lt.wait=lt.getMilliseconds=void 0;function tf(a){let n=performance.now()*.001,i=Math.floor(n),p=Math.floor(n%1*1e9);return a!=null&&(i=i-a[0],p=p-a[1],p<0&&(i--,p+=1e9)),[i,p]}function nf(){let[a,n]=tf();return a*1e3+Math.floor(n/1e6)}lt.getMilliseconds=nf;function rf(a){return new Promise(n=>setTimeout(n,a))}lt.wait=rf});var ul=M(xr=>{"use strict";Object.defineProperty(xr,"__esModule",{value:!0});xr.TokenBucket=void 0;var sl=dl(),ml=class{bucketSize;tokensPerInterval;interval;parentBucket;content;lastDrip;constructor({bucketSize:n,tokensPerInterval:i,interval:p,parentBucket:l}){if(this.bucketSize=n,this.tokensPerInterval=i,typeof p=="string")switch(p){case"sec":case"second":this.interval=1e3;break;case"min":case"minute":this.interval=1e3*60;break;case"hr":case"hour":this.interval=1e3*60*60;break;case"day":this.interval=1e3*60*60*24;break;default:throw new Error("Invalid interval "+p)}else this.interval=p;this.parentBucket=l,this.content=0,this.lastDrip=(0,sl.getMilliseconds)()}async removeTokens(n){if(this.bucketSize===0)return Number.POSITIVE_INFINITY;if(n>this.bucketSize)throw new Error(`Requested tokens ${n} exceeds bucket size ${this.bucketSize}`);this.drip();let i=async()=>{let p=Math.ceil((n-this.content)*(this.interval/this.tokensPerInterval));return await(0,sl.wait)(p),this.removeTokens(n)};if(n>this.content)return i();if(this.parentBucket!=null){let p=await this.parentBucket.removeTokens(n);return n>this.content?i():(this.content-=n,Math.min(p,this.content))}else return this.content-=n,this.content}tryRemoveTokens(n){return this.bucketSize?n>this.bucketSize||(this.drip(),n>this.content)||this.parentBucket&&!this.parentBucket.tryRemoveTokens(n)?!1:(this.content-=n,!0):!0}drip(){if(this.tokensPerInterval===0){let s=this.content;return this.content=this.bucketSize,this.content>s}let n=(0,sl.getMilliseconds)(),i=Math.max(n-this.lastDrip,0);this.lastDrip=n;let p=i*(this.tokensPerInterval/this.interval),l=this.content;return this.content=Math.min(this.content+p,this.bucketSize),Math.floor(this.content)>Math.floor(l)}};xr.TokenBucket=ml});var J2=M(Ar=>{"use strict";Object.defineProperty(Ar,"__esModule",{value:!0});Ar.RateLimiter=void 0;var pf=ul(),Nr=dl(),cl=class{tokenBucket;curIntervalStart;tokensThisInterval;fireImmediately;constructor({tokensPerInterval:n,interval:i,fireImmediately:p}){this.tokenBucket=new pf.TokenBucket({bucketSize:n,tokensPerInterval:n,interval:i}),this.tokenBucket.content=n,this.curIntervalStart=(0,Nr.getMilliseconds)(),this.tokensThisInterval=0,this.fireImmediately=p??!1}async removeTokens(n){if(n>this.tokenBucket.bucketSize)throw new Error(`Requested tokens ${n} exceeds maximum tokens per interval ${this.tokenBucket.bucketSize}`);let i=(0,Nr.getMilliseconds)();if((i<this.curIntervalStart||i-this.curIntervalStart>=this.tokenBucket.interval)&&(this.curIntervalStart=i,this.tokensThisInterval=0),n>this.tokenBucket.tokensPerInterval-this.tokensThisInterval){if(this.fireImmediately)return-1;{let l=Math.ceil(this.curIntervalStart+this.tokenBucket.interval-i);await(0,Nr.wait)(l);let s=await this.tokenBucket.removeTokens(n);return this.tokensThisInterval+=n,s}}let p=await this.tokenBucket.removeTokens(n);return this.tokensThisInterval+=n,p}tryRemoveTokens(n){if(n>this.tokenBucket.bucketSize)return!1;let i=(0,Nr.getMilliseconds)();if((i<this.curIntervalStart||i-this.curIntervalStart>=this.tokenBucket.interval)&&(this.curIntervalStart=i,this.tokensThisInterval=0),n>this.tokenBucket.tokensPerInterval-this.tokensThisInterval)return!1;let p=this.tokenBucket.tryRemoveTokens(n);return p&&(this.tokensThisInterval+=n),p}getTokensRemaining(){return this.tokenBucket.drip(),this.tokenBucket.content}};Ar.RateLimiter=cl});var Z2=M(l1=>{"use strict";var lf=l1&&l1.__createBinding||(Object.create?function(a,n,i,p){p===void 0&&(p=i);var l=Object.getOwnPropertyDescriptor(n,i);(!l||("get"in l?!n.__esModule:l.writable||l.configurable))&&(l={enumerable:!0,get:function(){return n[i]}}),Object.defineProperty(a,p,l)}:function(a,n,i,p){p===void 0&&(p=i),a[p]=n[i]}),Y2=l1&&l1.__exportStar||function(a,n){for(var i in a)i!=="default"&&!Object.prototype.hasOwnProperty.call(n,i)&&lf(n,a,i)};Object.defineProperty(l1,"__esModule",{value:!0});Y2(J2(),l1);Y2(ul(),l1)});var Q2=M((Gv,X2)=>{var hl=class{constructor(n){this.value=n,this.next=void 0}},fl=class{constructor(){this.clear()}enqueue(n){let i=new hl(n);this._head?(this._tail.next=i,this._tail=i):(this._head=i,this._tail=i),this._size++}dequeue(){let n=this._head;if(n)return this._head=this._head.next,this._size--,n.value}clear(){this._head=void 0,this._tail=void 0,this._size=0}get size(){return this._size}*[Symbol.iterator](){let n=this._head;for(;n;)yield n.value,n=n.next}};X2.exports=fl});var a0=M((Jv,e0)=>{"use strict";var of=Q2(),df=a=>{if(!((Number.isInteger(a)||a===1/0)&&a>0))throw new TypeError("Expected `concurrency` to be a number from 1 and up");let n=new of,i=0,p=()=>{i--,n.size>0&&n.dequeue()()},l=async(f,h,...b)=>{i++;let C=(async()=>f(...b))();h(C);try{await C}catch{}p()},s=(f,h,...b)=>{n.enqueue(l.bind(null,f,h,...b)),(async()=>(await Promise.resolve(),i<a&&n.size>0&&n.dequeue()()))()},c=(f,...h)=>new Promise(b=>{s(f,b,...h)});return Object.defineProperties(c,{activeCount:{get:()=>i},pendingCount:{get:()=>n.size},clearQueue:{value:()=>{n.clear()}}}),c};e0.exports=df});var i0=M(S1=>{"use strict";var sf=S1&&S1.__importDefault||function(a){return a&&a.__esModule?a:{default:a}};Object.defineProperty(S1,"__esModule",{value:!0});S1.send_event=ff;S1.sendFeedback=gf;S1.updateChain=vf;var t0=Z2(),mf=sf(a0());function gl(a,n){return process.env[n]?process.env[n]:`${process.env.LIBRETTO_API_PREFIX??"https://app.getlibretto.com/api"}/${a}`}var uf={429:new t0.RateLimiter({tokensPerInterval:1,interval:"second"}),499:new t0.RateLimiter({tokensPerInterval:1,interval:"second"})},cf=25,n0=1e3,r0=(0,mf.default)(cf),hf=/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;async function ff(a){if(!a.apiKey)return;if(a.chainId!==void 0&&!hf.test(a.chainId)){console.error(`[Libretto] chainId '${a.chainId}' is not a valid UUID`);return}let n=gl("event","LIBRETTO_REPORTING_URL"),i=JSON.stringify(a),p=0;try{if(r0.pendingCount>=n0)throw p=429,new Error(`too many pending requests (${n0})`);let l=await r0(fetch,n,{method:"POST",body:i,headers:{"Content-Type":"application/json"}});p=l.status;let s=await vl(l);if(!l.ok)throw new Error(`Failed to send event: ${JSON.stringify(s)}`);return s}catch(l){let s=()=>{console.error("Failed to send event to libretto:",l)};if(process.env.LIBRETTO_DEBUG==="true"){s();return}if(p<400||p>=500)return;let c=uf[p];if(!c||c.tryRemoveTokens(1)){s();return}}}async function vl(a){let n=await a.text();try{return JSON.parse(n)}catch{throw new Error(`Unparseable response (${a.status} ${a.statusText}): ${n}`)}}async function gf(a){if(!a.feedbackKey){console.warn("Could not send feedback to Libretto: missing feedback key");return}if(a.apiKey=a.apiKey??process.env.LIBRETTO_API_KEY,!a.apiKey){console.warn("Could not send feedback to Libretto: missing API key");return}let n=Object.fromEntries(Object.entries(a).map(([s,c])=>s==="feedbackKey"?["feedback_key",c]:s==="betterResponse"?["better_response",c]:s==="isDeleted"?["is_deleted",c]:[s,c])),i=gl("feedback","LIBRETTO_FEEDBACK_URL"),p=await fetch(i,{method:"POST",body:JSON.stringify(n),headers:{"Content-Type":"application/json"}}),l=await vl(p);if(!p.ok)throw new Error(`Failed to send feedback: ${JSON.stringify(l)}`);return l}async function vf(a){if(!a.id){console.warn("[Libretto] Could not update chain: missing id");return}if(a.apiKey=a.apiKey??process.env.LIBRETTO_API_KEY,!a.apiKey){console.warn("[Libretto] Could not update chain: missing API key");return}let n=gl("v1/updateChain","LIBRETTO_UPDATE_CHAIN_URL"),i=await fetch(n,{method:"POST",body:JSON.stringify(a),headers:{"Content-Type":"application/json"}}),p=await vl(i);if(!i.ok)throw new Error(`[Libretto] Failed to update chain: ${JSON.stringify(p)}`);return p}});var nt=M(ua=>{"use strict";Object.defineProperty(ua,"__esModule",{value:!0});ua.objectTemplate=ua.f=ua.sendFeedback=ua.send_event=ua.OpenAI=void 0;var yf=G2();Object.defineProperty(ua,"OpenAI",{enumerable:!0,get:function(){return yf.OpenAI}});var p0=i0();Object.defineProperty(ua,"send_event",{enumerable:!0,get:function(){return p0.send_event}});Object.defineProperty(ua,"sendFeedback",{enumerable:!0,get:function(){return p0.sendFeedback}});var l0=tl();Object.defineProperty(ua,"f",{enumerable:!0,get:function(){return l0.f}});Object.defineProperty(ua,"objectTemplate",{enumerable:!0,get:function(){return l0.objectTemplate}})});var Nf={};hu(Nf,{TableDisplayNames:()=>gu,TokenJS:()=>wl,models:()=>P});module.exports=fu(Nf);var u0=e1(require("chalk"),1),c0=require("mime-types");var gu={models:"Model",supportsCompletion:"Chat Completion",supportsStreaming:"Streaming",supportsJSON:"JSON Output",supportsImages:"Image Input",supportsToolCalls:"Function Calling",supportsN:"N > 1"},P={openai:{models:["gpt-4.5-preview","gpt-4.5-preview-2025-02-27","gpt-4.1","gpt-4.1-2025-04-14","gpt-4o","gpt-4o-mini","gpt-4o-2024-05-13","gpt-4o-2024-08-06","gpt-4-turbo","gpt-4-turbo-2024-04-09","gpt-4-0125-preview","gpt-4-turbo-preview","gpt-4-1106-preview","gpt-4-vision-preview","gpt-4","gpt-4-0314","gpt-4-0613","gpt-4-32k","gpt-4-32k-0314","gpt-4-32k-0613","gpt-3.5-turbo","gpt-3.5-turbo-16k","gpt-3.5-turbo-0301","gpt-3.5-turbo-0613","gpt-3.5-turbo-1106","gpt-3.5-turbo-0125","gpt-3.5-turbo-16k-0613","o3-mini","o1-mini","o1-mini-2024-09-12","o1-preview","o1-preview-2024-09-12"],supportsCompletion:!0,supportsStreaming:["gpt-4.1","gpt-4.1-2025-04-14","gpt-4.5-preview","gpt-4.5-preview-2025-02-27","gpt-4o","gpt-4o-mini","gpt-4o-2024-05-13","gpt-4o-2024-08-06","gpt-4-turbo","gpt-4-turbo-2024-04-09","gpt-4-0125-preview","gpt-4-turbo-preview","gpt-4-1106-preview","gpt-4-vision-preview","gpt-4","gpt-4-0314","gpt-4-0613","gpt-4-32k","gpt-4-32k-0314","gpt-4-32k-0613","gpt-3.5-turbo","gpt-3.5-turbo-16k","gpt-3.5-turbo-0301","gpt-3.5-turbo-0613","gpt-3.5-turbo-1106","gpt-3.5-turbo-0125","gpt-3.5-turbo-16k-0613","o3-mini"],supportsJSON:["gpt-4.1","gpt-4.1-2025-04-14","gpt-4.5-preview","gpt-4.5-preview-2025-02-27","gpt-4o","gpt-4o-mini","gpt-4o-2024-05-13","gpt-4o-2024-08-06","gpt-4-turbo","gpt-4-turbo-2024-04-09","gpt-4-0125-preview","gpt-4-turbo-preview","gpt-4-1106-preview","gpt-4-vision-preview","gpt-3.5-turbo","gpt-3.5-turbo-1106","gpt-3.5-turbo-0125","o3-mini"],supportsImages:["gpt-4.1","gpt-4.1-2025-04-14","gpt-4.5-preview","gpt-4.5-preview-2025-02-27","gpt-4o","gpt-4o-mini","gpt-4o-2024-05-13","gpt-4o-2024-08-06","gpt-4-turbo","gpt-4-turbo-2024-04-09","gpt-4-0125-preview","gpt-4-turbo-preview","gpt-4-1106-preview","gpt-4-vision-preview"],supportsToolCalls:["gpt-4.1","gpt-4.1-2025-04-14","gpt-4.5-preview","gpt-4.5-preview-2025-02-27","gpt-4o","gpt-4o-mini","gpt-4o-2024-05-13","gpt-4o-2024-08-06","gpt-4-turbo","gpt-4-turbo-2024-04-09","gpt-4-turbo-preview","gpt-4-0125-preview","gpt-4-1106-preview","gpt-4","gpt-4-0613","gpt-3.5-turbo","gpt-3.5-turbo-0125","gpt-3.5-turbo-1106","gpt-3.5-turbo-0613","o3-mini"],supportsN:!0,generateDocs:!0},ai21:{models:["jamba-instruct"],supportsCompletion:!0,supportsStreaming:["jamba-instruct"],supportsJSON:[],supportsImages:[],supportsToolCalls:[],supportsN:!0,generateDocs:!0},anthropic:{models:["claude-opus-4-20250514","claude-sonnet-4-20250514","claude-3-7-sonnet-latest","claude-3-7-sonnet-20250219","claude-3-5-sonnet-latest","claude-3-5-sonnet-20240620","claude-3-5-haiku-20241022","claude-3-opus-20240229","claude-3-sonnet-20240229","claude-3-haiku-20240307","claude-2.1","claude-2.0","claude-instant-1.2"],supportsCompletion:!0,supportsStreaming:["claude-opus-4-20250514","claude-sonnet-4-20250514","claude-3-7-sonnet-latest","claude-3-7-sonnet-20250219","claude-3-5-sonnet-latest","claude-3-5-sonnet-20240620","claude-3-5-haiku-20241022","claude-3-opus-20240229","claude-3-sonnet-20240229","claude-3-haiku-20240307","claude-2.1","claude-2.0","claude-instant-1.2"],supportsJSON:[],supportsImages:["claude-opus-4-20250514","claude-sonnet-4-20250514","claude-3-7-sonnet-latest","claude-3-7-sonnet-20250219","claude-3-5-sonnet-latest","claude-3-5-sonnet-20240620","claude-3-opus-20240229","claude-3-sonnet-20240229","claude-3-haiku-20240307"],supportsToolCalls:["claude-opus-4-20250514","claude-sonnet-4-20250514","claude-3-7-sonnet-latest","claude-3-7-sonnet-20250219","claude-3-5-sonnet-latest","claude-3-5-sonnet-20240620","claude-3-5-haiku-20241022","claude-3-opus-20240229","claude-3-sonnet-20240229","claude-3-haiku-20240307"],supportsN:!1,generateDocs:!0},gemini:{models:["gemini-2.0-flash-001","gemini-2.0-flash-lite-preview-02-05","gemini-1.5-pro","gemini-1.5-flash","gemini-1.5-flash-8b","gemini-1.0-pro"],supportsCompletion:!0,supportsStreaming:["gemini-2.0-flash-001","gemini-2.0-flash-lite-preview-02-05","gemini-1.5-pro","gemini-1.5-flash","gemini-1.5-flash-8b","gemini-1.0-pro"],supportsJSON:["gemini-2.0-flash-001","gemini-2.0-flash-lite-preview-02-05","gemini-1.5-pro","gemini-1.5-flash","gemini-1.5-flash-8b"],supportsImages:["gemini-2.0-flash-001","gemini-2.0-flash-lite-preview-02-05","gemini-1.5-pro","gemini-1.5-flash","gemini-1.5-flash-8b"],supportsToolCalls:["gemini-2.0-flash-001","gemini-1.5-pro","gemini-1.5-flash","gemini-1.5-flash-8b","gemini-1.0-pro"],supportsN:!0,generateDocs:!0},cohere:{models:["command-r-plus","command-r","command","command-nightly","command-light","command-light-nightly"],supportsCompletion:!0,supportsStreaming:["command-r-plus","command-r","command","command-nightly","command-light","command-light-nightly"],supportsJSON:[],supportsImages:[],supportsToolCalls:["command-r-plus","command-r","command-nightly"],supportsN:!1,generateDocs:!0},bedrock:{models:["amazon.titan-text-lite-v1","amazon.titan-text-express-v1","anthropic.claude-3-5-sonnet-20240620-v1:0","anthropic.claude-3-5-sonnet-20241022-v2:0","anthropic.claude-3-5-haiku-20241022-v1:0","anthropic.claude-3-opus-20240229-v1:0","anthropic.claude-3-sonnet-20240229-v1:0","anthropic.claude-3-haiku-20240307-v1:0","anthropic.claude-v2:1","anthropic.claude-v2","anthropic.claude-instant-v1","cohere.command-r-plus-v1:0","cohere.command-r-v1:0","cohere.command-text-v14","cohere.command-light-text-v14","meta.llama3-8b-instruct-v1:0","meta.llama3-70b-instruct-v1:0","meta.llama2-13b-chat-v1","meta.llama2-70b-chat-v1","mistral.mistral-7b-instruct-v0:2","mistral.mixtral-8x7b-instruct-v0:1","mistral.mistral-large-2402-v1:0"],supportsCompletion:!0,supportsStreaming:["amazon.titan-text-lite-v1","amazon.titan-text-express-v1","anthropic.claude-3-5-sonnet-20240620-v1:0","anthropic.claude-3-5-sonnet-20241022-v2:0","anthropic.claude-3-5-haiku-20241022-v1:0","anthropic.claude-3-opus-20240229-v1:0","anthropic.claude-3-sonnet-20240229-v1:0","anthropic.claude-3-haiku-20240307-v1:0","anthropic.claude-v2:1","anthropic.claude-v2","anthropic.claude-instant-v1","cohere.command-r-plus-v1:0","cohere.command-r-v1:0","cohere.command-text-v14","cohere.command-light-text-v14","meta.llama3-8b-instruct-v1:0","meta.llama3-70b-instruct-v1:0","meta.llama2-13b-chat-v1","meta.llama2-70b-chat-v1","mistral.mistral-7b-instruct-v0:2","mistral.mixtral-8x7b-instruct-v0:1","mistral.mistral-large-2402-v1:0"],supportsJSON:[],supportsImages:["anthropic.claude-3-5-sonnet-20240620-v1:0","anthropic.claude-3-5-sonnet-20241022-v2:0","anthropic.claude-3-sonnet-20240229-v1:0","anthropic.claude-3-opus-20240229-v1:0","anthropic.claude-3-haiku-20240307-v1:0"],supportsToolCalls:["anthropic.claude-3-5-sonnet-20240620-v1:0","anthropic.claude-3-5-sonnet-20241022-v2:0","anthropic.claude-3-5-haiku-20241022-v1:0","anthropic.claude-3-opus-20240229-v1:0","anthropic.claude-3-sonnet-20240229-v1:0","anthropic.claude-3-haiku-20240307-v1:0","cohere.command-r-plus-v1:0","cohere.command-r-v1:0","mistral.mistral-large-2402-v1:0"],supportsN:!1,generateDocs:!0},mistral:{models:["open-mistral-7b","mistral-tiny-2312","open-mixtral-8x7b","mistral-small-2312","open-mixtral-8x22b","open-mixtral-8x22b-2404","mistral-small-latest","mistral-small-2402","mistral-medium-latest","mistral-medium-2312","mistral-large-latest","mistral-large-2402","codestral-latest","codestral-2405","codestral-mamba-2407"],supportsCompletion:!0,supportsStreaming:["open-mistral-7b","mistral-tiny-2312","open-mixtral-8x7b","mistral-small-2312","open-mixtral-8x22b","open-mixtral-8x22b-2404","mistral-small-latest","mistral-small-2402","mistral-medium-latest","mistral-medium-2312","mistral-large-latest","mistral-large-2402","codestral-latest","codestral-2405","codestral-mamba-2407"],supportsJSON:["open-mistral-7b","mistral-tiny-2312","open-mixtral-8x22b","open-mixtral-8x22b-2404","mistral-large-latest","mistral-large-2402","codestral-latest","codestral-2405","codestral-mamba-2407"],supportsImages:[],supportsToolCalls:["open-mixtral-8x22b","open-mixtral-8x22b-2404","mistral-small-latest","mistral-small-2402","mistral-large-latest","mistral-large-2402","codestral-mamba-2407"],supportsN:!1,generateDocs:!0},groq:{models:["llama-3.3-70b-versatile","llama-3.1-8b-instant","llama3-8b-8192","llama3-70b-8192","mixtral-8x7b-32768","gemma-7b-it","gemma2-9b-it"],supportsCompletion:!0,supportsStreaming:["llama-3.3-70b-versatile","llama-3.1-8b-instant","llama3-8b-8192","llama3-70b-8192","mixtral-8x7b-32768","gemma-7b-it","gemma2-9b-it"],supportsJSON:["llama-3.3-70b-versatile","llama-3.1-8b-instant","llama3-70b-8192","gemma-7b-it","gemma2-9b-it"],supportsImages:[],supportsToolCalls:["llama-3.3-70b-versatile","llama-3.1-8b-instant"],supportsN:!1,generateDocs:!0},perplexity:{models:["llama-3.1-sonar-small-128k-online","llama-3.1-sonar-large-128k-online","llama-3.1-sonar-huge-128k-online"],supportsCompletion:!0,supportsStreaming:["llama-3.1-sonar-small-128k-online","llama-3.1-sonar-large-128k-online","llama-3.1-sonar-huge-128k-online"],supportsJSON:[],supportsImages:[],supportsToolCalls:[],supportsN:!1,generateDocs:!0},openrouter:{models:!0,supportsCompletion:!0,supportsStreaming:!0,supportsJSON:!0,supportsImages:!0,supportsToolCalls:!0,supportsN:!0,generateDocs:!1},"openai-compatible":{models:!0,supportsCompletion:!0,supportsStreaming:!0,supportsJSON:!0,supportsImages:!0,supportsToolCalls:!0,supportsN:!0,generateDocs:!1}};var z=class extends Error{constructor(n){super(n),this.name=this.constructor.name,Error.captureStackTrace(this,this.constructor)}},_e=class extends Error{constructor(n){super(`${n}
Should never happen. Please report this error to the developers.`),this.name="InvariantError",Error.captureStackTrace(this,this.constructor)}};var me=class{constructor(n,i,p,l,s,c,f){this.opts=n,this.models=i,this.supportsJSON=p,this.supportsImages=l,this.supportsToolCalls=s,this.supportsN=c,this.supportsStreamingMessages=f}validateInputs(n){if(delete n.provider,!this.isSupportedModel(n.model))throw new z(`Invalid 'model' field: ${n.model}.`);if(n.stream&&!this.supportsStreaming(n.model))throw new Error(`Detected 'stream: true', but the following model does not support streaming: ${n.model}`);if(n.tools!==void 0&&!this.supportsTools(n.model))throw new z(`Detected a 'tools' parameter, but the following model does not support tools: ${n.model}`);if(n.tool_choice!==void 0&&!this.supportsTools(n.model))throw new z(`Detected a 'tool_choice' parameter, but the following model does not support tools: ${n.model}`);if(typeof n.temperature=="number"&&n.temperature>2)throw new z(`Expected a temperature less than or equal to 2, but got: ${n.temperature}`);for(let i of n.messages){if(i.role==="function")throw new z("The 'function' role is deprecated. Please use the 'tool' role instead.");if(i.role==="user"&&Array.isArray(i.content)){for(let p of i.content)if(p.type==="image_url"&&!this.supportsImageMessages(n.model))throw new z(`Detected an image in the 'messages' array, but the following model does not support images: ${n.model}`)}}if(typeof n.n=="number"&&n.n>1&&!this.supportsNGreaterThanOne(n.model))throw new z(`The model ${n.model} does not support setting 'n' greater than 1.`);if(n.response_format?.type==="json_object"){if(!this.supportsJSONMode(n.model))throw new z(`The model ${n.model} does not support the 'response_format' type 'json_object'.`);let i=!1;for(let p of n.messages)if(typeof p.content=="string"){if(p.content.toLowerCase().includes("json")){i=!0;break}}else if(Array.isArray(p.content)){for(let l of p.content)if(l.type==="text"&&l.text.toLowerCase().includes("json")){i=!0;break}}if(!i)throw new z("You must include the string 'JSON' somewhere in your prompt when the 'response_format' type is 'json_object'.")}}isSupportedFeature(n,i){return typeof n=="boolean"?n:n.includes(i)}isSupportedModel(n){return this.isSupportedFeature(this.models,n)}supportsJSONMode(n){return this.isSupportedFeature(this.supportsJSON,n)}supportsImageMessages(n){return this.isSupportedFeature(this.supportsImages,n)}supportsNGreaterThanOne(n){return this.isSupportedFeature(this.supportsN,n)}supportsTools(n){return this.isSupportedFeature(this.supportsToolCalls,n)}supportsStreaming(n){return this.isSupportedFeature(this.supportsStreamingMessages,n)}};var vu=a=>{let n=[],i="user",p=[];for(let l=0;l<a.length;l++){let s=a[l];if(l===0&&s.role==="system")n.push({role:"system",content:$e(s.content)});else if(s.role==="user"||s.role==="assistant"||s.role==="system"){let c=s.role==="user"||s.role==="system"?"user":"assistant";if(i!==c&&(n.push({role:i,content:p.join(`
`)}),p=[]),typeof s.content=="string"){let f=s.role==="system"?`System: ${s.content}`:s.content;p.push(f)}else if(Array.isArray(s.content)){let f=s.content.map(h=>{if(h.type==="text")return s.role==="system"?`System: ${h.text}`:h.text;throw new z("AI21 does not support images.")});p.push(...f)}i=c}}return p.length>0&&n.push({role:i,content:p.join(`
`)}),n};async function*yu(a,n,i){let p=a.getReader(),l=new TextDecoder,s="";try{for(;;){let{done:c,value:f}=await p.read();if(c)break;s+=l.decode(f,{stream:!0});let h=s.split(`
`);s=h.pop()||"";for(let b of h){if(b.trim()==="data: [DONE]")return;if(b.trim().startsWith("data:")){let C=JSON.parse(b.replace(/^data:\s*/,"").trim()),x="";for(let q of C.choices)typeof q.delta.content=="string"&&(x+=q.delta.content);let{id:E,choices:O}=C;yield{choices:[{index:0,finish_reason:O[0].finish_reason,logprobs:null,delta:{role:"assistant",content:x}}],id:E,created:i,model:n,object:"chat.completion.chunk"}}}}}finally{p.releaseLock()}}var Hn=class extends me{validateInputs(n){if(super.validateInputs(n),typeof n.n=="number"&&(n.n>16||n.n<0))throw new z(`AI21 requires that the 'n' parameter is a value between 0 and 16, inclusive. Instead, got: ${n.n}`);if(typeof n.n=="number"&&n.stream===!0&&n.n>1)throw new z(`AI21 requires that 'n' equals '1' when streaming is enabled. Received an 'n' value of: ${n.n}`)}async create(n){this.validateInputs(n);let i=this.opts.apiKey??process.env.AI21_API_KEY;if(i===void 0)throw new z("No AI21 API key detected. Please define an 'AI21_API_KEY' environment variable or supply the API key using the 'apiKey' parameter.");let p=vu(n.messages),l={max_tokens:n.max_tokens??void 0,messages:p,model:n.model,n:n.n??void 0,stop:n.stop??void 0,temperature:n.temperature??void 0,top_p:n.top_p??void 0,stream:n.stream??void 0},s=Ze(),c=await fetch("https://api.ai21.com/studio/v1/chat/completions",{method:"POST",headers:{Authorization:`Bearer ${i}`,"Content-Type":"application/json"},body:JSON.stringify(l)});if(!c.ok)throw new Error(`HTTP error! status: ${c.status}`);if(n.stream===!0)return yu(c.body,n.model,s);{let f=await c.json();return{choices:f.choices.map(C=>({...C,message:{...C.message,refusal:null},logprobs:null})),id:f.id,usage:f.usage,created:s,model:n.model,object:"chat.completion"}}}};var Vt=e1(ar(),1);var f7=(a,n,i)=>{let p=w7(a.stop_reason),s={index:0,logprobs:null,message:y7(a.content,a.role,i),finish_reason:p};return{id:a.id,choices:[s],created:n,model:a.model,object:"chat.completion",usage:{prompt_tokens:a.usage.input_tokens,completion_tokens:a.usage.output_tokens,total_tokens:a.usage.input_tokens+a.usage.output_tokens}}};async function*g7(a,n){let i,p=null;for await(let l of a){if(l.type==="message_start"&&(i=l.message,yield{choices:[{index:0,finish_reason:ks(l.message.stop_reason),logprobs:null,delta:{role:l.message.role}}],created:n,model:i.model,id:i.id,object:"chat.completion.chunk"}),i===void 0)throw new _e("Message is undefined.");let s,c={};if(l.type==="content_block_start")l.content_block.type==="text"?c={content:l.content_block.text}:(p===null&&(p=l.index),c={tool_calls:[{index:l.index-p,id:l.content_block.id,type:"function",function:{name:l.content_block.name,arguments:Ss(l.content_block.input)?"":JSON.stringify(l.content_block.input)}}]});else if(l.type==="content_block_delta")if(l.delta.type==="input_json_delta"){if(p===null)throw new _e("Content block delta event came before a content block start event.");c={tool_calls:[{index:l.index-p,function:{arguments:l.delta.partial_json}}]}}else c={content:l.delta.text};else l.type==="message_delta"&&(s=l.delta.stop_reason);let f=s!==void 0?s:i.stop_reason;yield{choices:[{index:0,finish_reason:ks(f),logprobs:null,delta:c}],created:n,model:i.model,id:i.id,object:"chat.completion.chunk"}}}var v7=a=>a.type==="text",_p=a=>a.type==="tool_use",y7=(a,n,i)=>{let p=a.filter(v7);p.length>1&&Xe("Received multiple text blocks from Anthropic, which is unexpected. Concatenating the text blocks into a single string.");let l;if(typeof i!="string"&&i?.type==="function"){let c=a.filter(_p).find(f=>f.name===i.function.name);if(!c)throw new _e(`Did not receive a tool use block from Anthropic for the function: ${i.function.name}`);l=[c]}else l=a.filter(_p);let s;if(l.length>0&&(s=l.map(c=>({id:c.id,function:{name:c.name,arguments:JSON.stringify(c.input)},type:"function"}))),p.length===0){let c=a.every(_p)?null:"";return{role:n,refusal:null,content:c,tool_calls:s}}else return{role:n,refusal:null,content:p.map(c=>c.text).join(`
`),tool_calls:s}},w7=a=>{if(a===null)throw new _e("Detected a 'stop_reason' value of 'null' during a non-streaming call.");return a==="end_turn"||a==="stop_sequence"?"stop":a==="max_tokens"?"length":a==="tool_use"?"tool_calls":"unknown"},b7=(a,n)=>{if(n===void 0||a==="none")return{toolChoice:void 0,tools:void 0};let i=n.map(l=>({name:l.function.name,description:l.function.description,input_schema:{type:"object",...l.function.parameters}})),p;return a===void 0||a==="auto"?p={type:"auto"}:a==="required"?p={type:"any"}:p={type:"tool",name:a.function.name},{toolChoice:p,tools:i}},ks=a=>a===null?null:a==="end_turn"||a==="stop_sequence"?"stop":a==="max_tokens"?"length":a==="tool_use"?"tool_calls":"unknown",_7=a=>a==="claude-3-5-sonnet-20240620"||a==="claude-3-opus-20240229"||a==="claude-3-sonnet-20240229"||a==="claude-3-haiku-20240307"||a==="claude-2.1"||a==="claude-2.0"||a==="claude-instant-1.2"?4096:8192,k7=async a=>{let n=[],i=structuredClone(a),p;i.length>0&&i[0].role==="system"&&(p=$e(i[0].content),i.shift()),i.length>0&&i[0].role!=="user"&&i[0].role!=="system"?i.unshift({role:"user",content:"Empty"}):i.length===0&&p!==void 0&&i.push({role:"user",content:"Placeholder user message following system prompt."});let l="user",s=[];for(let c of i){let f=c.role==="user"||c.role==="system"||c.role==="tool"?"user":"assistant";if(l!==f&&s.length>0?(n.push({role:l,content:s}),s=[]):l!==f&&s.length===0&&n.length>0&&(s=[]),c.role==="tool"){let h={tool_use_id:c.tool_call_id,content:typeof c.content=="string"?c.content:c.content||[],type:"tool_result"};s.push(h)}else if(c.role==="assistant"){let h=!1;if(typeof c.content=="string")c.content.length>0&&(s.push({text:c.content,type:"text"}),h=!0);else if(Array.isArray(c.content))for(let b of c.content)b.type==="text"&&b.text&&b.text.length>0&&(s.push({type:"text",text:b.text}),h=!0);if(Array.isArray(c.tool_calls)){let b=c.tool_calls.map(C=>{let x=typeof C.function.arguments=="string"?C.function.arguments:"{}";return{id:C.id,input:(()=>{try{return x?JSON.parse(x):{}}catch(E){return Xe(`Failed to parse tool call arguments for tool ${C.function.name} (ID: ${C.id}), using empty object. Arguments: '${x}' Error: ${E}`),{}}})(),name:C.function.name,type:"tool_use"}});b.length>0&&(s.push(...b),h=!0)}}else if(typeof c.content=="string"){let h=c.role==="system"?`System: ${c.content}`:c.content;h.length>0&&s.push({type:"text",text:h})}else if(Array.isArray(c.content)){let h=await Promise.all(c.content.map(async C=>{if(C.type==="text")return{type:"text",text:c.role==="system"?`System: ${C.text}`:C.text};{let x=await H1(C.image_url.url);return{type:"image",source:{data:x.content,media_type:x.mimeType,type:"base64"}}}})),b=h.filter(C=>C.type!=="text"||C.type==="text"&&C.text.length>0);b.length>0?s.push(...b):h.length>0&&h.every(C=>C.type==="text"&&C.text.length===0)}l=f}if(s.length>0)n.push({role:l,content:s});else if(n.length>0&&l==="assistant"){let c=n[n.length-1];c.role==="user"||c.role==="assistant"&&n.push({role:l,content:[]})}return n.length===0&&p&&i.length===0&&n.push({role:"user",content:[{type:"text",text:"Follow system instructions."}]}),{messages:n,systemMessage:p}},C7=a=>{if(a!=null){if(typeof a=="string")return[a];if(Array.isArray(a)&&a.every(n=>typeof n=="string"))return a;throw new Error(`Unknown stop sequence: ${a}`)}},Cs=a=>a??process.env.ANTHROPIC_API_KEY,tr=class extends me{validateInputs(n){super.validateInputs(n);let i=!1;for(let p of n.messages)if(Array.isArray(p.content)){for(let l of p.content)if(l.type==="image_url"&&(l.image_url.detail!==void 0&&l.image_url.detail!=="auto"&&(i=!0),n.model==="claude-instant-1.2"||n.model==="claude-2.0"||n.model==="claude-2.1"))throw new z(`Model '${n.model}' does not support images. Remove any images from the prompt or use Claude version 3 or later.`)}i&&Xe("Anthropic does not support the 'detail' field for images. The default image quality will be used.")}async create(n){if(this.validateInputs(n),Cs(this.opts.apiKey)===void 0)throw new z("No Anthropic API key detected. Please define an 'ANTHROPIC_API_KEY' environment variable or supply the API key using the 'apiKey' parameter.");let p=typeof n.stream=="boolean"?n.stream:void 0,l=n.max_tokens??_7(n.model),s=new Vt.Anthropic({apiKey:Cs(this.opts.apiKey)}),c=C7(n.stop),f=typeof n.top_p=="number"?n.top_p:void 0,h=typeof n.temperature=="number"?n.temperature/2:void 0,{messages:b,systemMessage:C}=await k7(n.messages),{toolChoice:x,tools:E}=b7(n.tool_choice,n.tools);if(p===!0){let O={max_tokens:l,messages:b,model:n.model,stop_sequences:c,temperature:h,top_p:f,stream:p,system:C,tools:E,tool_choice:x},R=Ze(),q=s.messages.stream(O);return g7(q,R)}else{let O={max_tokens:l,messages:(0,Vt.objectTemplate)(b),model:n.model,stop_sequences:c,temperature:h,top_p:f,system:C?(0,Vt.objectTemplate)(C):void 0,tools:E,tool_choice:x,libretto:n.libretto},R=Ze(),q=await s.messages.create(O);return f7(q,R,n.tool_choice)}}};var G1=require("@aws-sdk/client-bedrock-runtime");var S7=a=>{if(a==="image/gif")return"gif";if(a==="image/jpeg")return"jpeg";if(a==="image/png")return"png";if(a==="image/webp")return"webp";throw new _e(`Unsupported MIME type: ${a}`)},T7=a=>a!=="cohere.command-light-text-v14"&&a!=="cohere.command-text-v14"&&a!=="amazon.titan-text-express-v1"&&a!=="amazon.titan-text-lite-v1"&&a!=="mistral.mistral-7b-instruct-v0:2"&&a!=="mistral.mixtral-8x7b-instruct-v0:1",Ts=a=>a!=="cohere.command-light-text-v14"&&a!=="cohere.command-text-v14",x7=a=>typeof a.text=="string",kp=a=>a.toolUse!==void 0,N7=(a,n)=>{if(a?.message?.content===void 0)return{refusal:null,content:"",role:"assistant"};if(a.message.role==="user")throw new _e("Detected a user message in Bedrock's response.");let i=a.message.role??"assistant",p=a.message.content.filter(x7);p.length>1&&Xe("Received multiple text blocks from Bedrock, which is unexpected. Concatenating the text blocks into a single string.");let l;if(typeof n!="string"&&n?.type==="function"){let c=a.message.content.filter(kp).find(f=>f.toolUse.name===n.function.name);if(!c)throw new _e(`Did not receive a tool use block from Bedrock for the function: ${n.function.name}`);l=[c]}else l=a.message.content.filter(kp);let s;if(l.length>0&&(s=l.map(c=>{if(c.toolUse.name===void 0)throw new _e("Function name is undefined.");return{id:c.toolUse.toolUseId??c.toolUse.name,function:{name:c.toolUse.name,arguments:c.toolUse.input!==void 0?JSON.stringify(c.toolUse.input):""},type:"function"}})),p.length===0){let c=a.message.content.every(kp)?null:"";return{role:i,refusal:null,content:c,tool_calls:s}}else{let c=p.map(f=>f.text).join(`
`);return{role:i,refusal:null,content:c,tool_calls:s}}},A7=async(a,n)=>{let i=(h,b)=>h==="system"?`System: ${b}`:!Ts(n)&&h==="assistant"?`Assistant: ${b}`:b,p=[],l=structuredClone(a),s=[];if(T7(n))for(;l.length>0&&l[0].role==="system";){let h=$e(l[0].content);s.push({text:h}),l.shift()}l[0].role!=="user"&&l[0].role!=="system"&&l.unshift({role:"user",content:"Empty"});let c="user",f=[];for(let h of l){let b;if(Ts(n)?b=h.role==="user"||h.role==="system"||h.role==="tool"?"user":"assistant":b="user",c!==b&&(p.push({role:c,content:f}),f=[]),h.role==="tool"){let C={toolResult:{toolUseId:h.tool_call_id,content:[{text:$e(h.content)}]}};f.push(C)}else if(h.role==="assistant"){if(typeof h.content=="string"){let C=i(h.role,h.content);f.push({text:C})}if(Array.isArray(h.tool_calls)){let C=h.tool_calls?.map(x=>({toolUse:{toolUseId:x.id,input:JSON.parse(x.function.arguments),name:x.function.name}}));f.push(...C)}}else if(typeof h.content=="string"){let C=i(h.role,h.content);f.push({text:C})}else if(Array.isArray(h.content)){let C=await Promise.all(h.content.map(async x=>{if(x.type==="text")return{text:i(h.role,x.text)};{let E=await H1(x.image_url.url);return{image:{format:S7(E.mimeType),source:{bytes:Buffer.from(E.content,"base64")}}}}}));f.push(...C)}c=b}return f.length>0&&p.push({role:c,content:f}),{systemMessages:s.length>0?s:void 0,messages:p}},P7=a=>{if(a!=null){if(typeof a=="string")return[a];if(Array.isArray(a)&&a.every(n=>typeof n=="string"))return a;throw new Error(`Unknown stop sequence type: ${a}`)}},R7=a=>typeof a.text=="string",D7=a=>a.toolUse!==void 0,E7=(a,n)=>{if(n===void 0||a==="none")return;let i=n.length>0?n.map(l=>{let s=l.function.parameters?{json:l.function.parameters}:void 0;return{toolSpec:{name:l.function.name,description:l.function.description,inputSchema:s}}}):void 0,p;return a===void 0||a==="auto"?p={auto:{}}:a==="required"?p={any:{}}:p={tool:{name:a.function.name}},{toolChoice:p,tools:i}},xs=a=>a==="content_filtered"||a==="guardrail_intervened"?"content_filter":a==="end_turn"||a==="stop_sequence"?"stop":a==="max_tokens"?"length":a==="tool_use"?"tool_calls":"unknown";async function*I7(a,n,i){let p=a.$metadata.requestId??null;if(a.stream===void 0)yield{id:p,choices:[{index:0,finish_reason:null,logprobs:null,delta:{}}],created:i,model:n,object:"chat.completion.chunk"};else{let l=null;for await(let s of a.stream){if(s.internalServerException)throw s.internalServerException;if(s.modelStreamErrorException)throw s.modelStreamErrorException;if(s.throttlingException)throw s.throttlingException;if(s.validationException)throw s.validationException;let c={};if(s.messageStart){if(s.messageStart.role==="user")throw new _e("Received a message from the 'user' role.");c={role:s.messageStart.role}}else if(s.contentBlockStart?.start?.toolUse!==void 0){let b=s.contentBlockStart.contentBlockIndex;if(typeof b!="number")throw new _e("Content block index is undefined.");l===null&&(l=b);let C=s.contentBlockStart.start.toolUse.toolUseId??s.contentBlockStart.start.toolUse.name;c={tool_calls:[{index:b-l,id:C,type:"function",function:{name:s.contentBlockStart.start.toolUse.name,arguments:""}}]}}else if(s.contentBlockDelta?.delta!==void 0){if(R7(s.contentBlockDelta.delta))c={content:s.contentBlockDelta.delta.text};else if(D7(s.contentBlockDelta.delta)){let b=s.contentBlockDelta.contentBlockIndex;if(typeof b!="number")throw new _e("Content block index is undefined.");if(l===null)throw new _e("Content block delta event came before a content block start event.");c={tool_calls:[{index:b-l,function:{arguments:s.contentBlockDelta.delta.toolUse.input}}]}}}let f=typeof s.messageStop?.stopReason=="string"?xs(s.messageStop.stopReason):null;yield{id:p,choices:[{index:0,finish_reason:f,logprobs:null,delta:c}],created:i,model:n,object:"chat.completion.chunk"}}}}var nr=class extends me{validateInputs(n){super.validateInputs(n);let i=!1;for(let p of n.messages)if(Array.isArray(p.content))for(let l of p.content)l.type==="image_url"&&l.image_url.detail!==void 0&&l.image_url.detail!=="auto"&&(i=!0);i&&Xe("Bedrock does not support the 'detail' field for images. The default image quality will be used.")}async create(n){this.validateInputs(n),this.opts.baseURL&&Xe("The 'baseUrl' parameter will be ignored by Bedrock because it does not support this field."),typeof this.opts.apiKey=="string"&&Xe("The 'apiKey' parameter will be ignored by Bedrock, which uses the 'accessKeyId' and 'secretAccessKey' fields on the 'bedrock' object instead.");let i=this.opts.bedrock?.region??process.env.AWS_REGION_NAME;if(!i)throw new z("No AWS region detected. Please define a region using either the 'region' parameter on the 'bedrock' object or the 'AWS_REGION_NAME' environment variable.");let p=this.opts.bedrock?.accessKeyId??process.env.AWS_ACCESS_KEY_ID,l=this.opts.bedrock?.secretAccessKey??process.env.AWS_SECRET_ACCESS_KEY,s=[];if(p||s.push({envVar:"AWS_ACCESS_KEY_ID",param:"accessKeyId"}),l||s.push({envVar:"AWS_SECRET_ACCESS_KEY",param:"secretAccessKey"}),s.length>0)throw new z(`Missing AWS credentials: ${s.map(F=>F.envVar).join(", ")}. Please define these environment variables or supply them using the following parameters on the 'bedrock' object: ${s.map(F=>F.param).join(", ")}.`);let{systemMessages:c,messages:f}=await A7(n.messages,n.model),h=typeof n.temperature=="number"?Ns(n.temperature,"bedrock",n.model):void 0,b=n.top_p??void 0,C=n.max_tokens??void 0,x=P7(n.stop),E=n.model,O=E7(n.tool_choice,n.tools),R={inferenceConfig:{maxTokens:C,stopSequences:x,temperature:h,topP:b},modelId:E,messages:f,system:c,toolConfig:O},q=new G1.BedrockRuntimeClient({region:i,credentials:{accessKeyId:p,secretAccessKey:l}});if(n.stream===!0){let F=new G1.ConverseStreamCommand(R),U=Ze(),j=await q.send(F);return I7(j,n.model,U)}else{let F=new G1.ConverseCommand(R),U=Ze(),j=await q.send(F),Q=j.usage&&typeof j.usage.inputTokens=="number"&&typeof j.usage.outputTokens=="number"&&typeof j.usage.totalTokens=="number"?{prompt_tokens:j.usage.inputTokens,completion_tokens:j.usage.outputTokens,total_tokens:j.usage.inputTokens+j.usage.outputTokens}:void 0,ee=N7(j.output,n.tool_choice);return{id:j.$metadata.requestId??null,usage:Q,choices:[{index:0,logprobs:null,message:ee,finish_reason:xs(j.stopReason)}],created:U,model:n.model,object:"chat.completion"}}}};var Rs=require("cohere-ai");var Cp=require("node:crypto");var As="useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";var O7=128,b1,J1;function z7(a){!b1||b1.length<a?(b1=Buffer.allocUnsafe(a*O7),Cp.webcrypto.getRandomValues(b1),J1=0):J1+a>b1.length&&(Cp.webcrypto.getRandomValues(b1),J1=0),J1+=a}function jt(a=21){z7(a-=0);let n="";for(let i=J1-a;i<J1;i++)n+=As[b1[i]&63];return n}var Sp=a=>{if(a==="assistant")return"CHATBOT";if(a==="system")return"SYSTEM";if(a==="tool")return"TOOL";if(a==="user")return"USER";if(a==="developer")return"SYSTEM";throw new z(`Unknown role: ${a}`)},Ds=a=>{if(a==="COMPLETE"||a==="USER_CANCEL"||a==="STOP_SEQUENCE")return"stop";if(a==="MAX_TOKENS")return"length";if(a==="ERROR_TOXIC")return"content_filter";if(a==="ERROR_LIMIT")throw new Error("The generation could not be completed because the model\u2019s context limit was reached.");if(a==="ERROR")throw new Error("The generation could not be completed due to an error.");return"unknown"},M7=a=>{for(let n=a.length-1;n>=0;n--){let i=a[n];if(i.role==="user"){if(typeof i.content=="string")return a.splice(n,1),i.content;if(Array.isArray(i.content)){for(let p of i.content)if(p.type==="text")return a.splice(n,1),p.text}}}return"Empty"},V7=a=>{if(a!=null){if(typeof a=="string")return[a];if(Array.isArray(a)&&a.every(n=>typeof n=="string"))return a;throw new Error(`Unknown stop sequence type: ${a}`)}},j7=a=>{let n=(s,c,f)=>{switch(s){case"string":return"str";case"integer":return"int";case"array":return`List${c?`[${n(c.type)}]`:""}`;case"object":return f?`Dict[str, ${n(f.type)}]`:"Dict";default:return s}},i=(s,c)=>{let f={};for(let[h,b]of Object.entries(s)){let C=c.includes(h);f[h]={description:b.description,type:n(b.type,b.items,b.additionalProperties),required:C},b.type==="object"&&b.properties&&(f[h].properties=i(b.properties,b.required||[]))}return f},p=Array.isArray(a.function.parameters?.required)?a.function.parameters?.required:[],l=a.function.parameters?.properties?i(a.function.parameters.properties,p):void 0;return{name:a.function.name,description:a.function.description??"",parameterDefinitions:l}},B7=a=>{if(a&&typeof a.inputTokens=="number"&&typeof a.outputTokens=="number"){let{inputTokens:n,outputTokens:i}=a;return{completion_tokens:i,prompt_tokens:n,total_tokens:i+n}}else return},L7=a=>{let n=a.at(a.length-1);if(n===void 0||n.role!=="tool")return;let i=[];for(let p=a.length-1;p>=0;p--){let l=a[p];l.role==="tool"&&(i.unshift(l),a.pop())}return i},Ps=(a,n)=>{let i=null;for(let c=n.length-1;c>=0;c--){let f=n[c];if(f.role!=="tool")if(f.role==="assistant"){i=f;break}else throw new Error(`Expected an assistant message to precede tool messages, but detected a message from the ${f.role} role instead.`)}if(i===null)throw new Error("Could not find message from the 'assistant' role, which must precede messages from the 'tool' role.");if(i.tool_calls===void 0)throw new Error("Expected 'assistant' message to contain a 'tool_calls' field because it precedes tool call messages, but no 'tool_calls' field was found.");let p=i.tool_calls.find(c=>c.id===a.tool_call_id);if(!p)throw new Error(`Could not find the following tool call ID in the 'assistant' message: ${a.tool_call_id}`);let l=$e(a.content);return{call:{name:p.function.name,parameters:JSON.parse(p.function.arguments)},outputs:[JSON.parse(l)]}},q7=a=>{let n=structuredClone(a),p=L7(n)?.map(c=>Ps(c,n)),l=p===void 0?M7(n):"",s=[];for(let c=0;c<n.length;c++){let f=n[c];if(f.role==="tool"){let h=Ps(f,n.slice(0,c)),b=s.at(s.length-1);if(b!==void 0&&b.role==="TOOL"){if(b.toolResults===void 0)throw new _e("The 'toolResults' field is undefined.");b.toolResults.push(h)}else s.push({role:"TOOL",toolResults:[h]})}else if(f.role==="assistant"){let h=$e(f.content);s.push({role:Sp(f.role),message:h,toolCalls:f.tool_calls?.map(b=>({name:b.function.name,parameters:JSON.parse(b.function.arguments)}))})}else if(typeof f.content=="string")s.push({role:Sp(f.role),message:f.content});else if(Array.isArray(f.content))for(let h of f.content)h.type==="text"&&s.push({role:Sp(f.role),message:h.text})}return{messages:s,lastUserMessage:l,toolResults:p}},U7=(a,n)=>{if(!(n==="none"||a===void 0))return a.map(j7)};async function*F7(a,n,i){let p,l=new Map;for await(let s of a){if(s.eventType==="stream-start"&&(p=s.generationId,yield{choices:[{index:0,finish_reason:null,logprobs:null,delta:{role:"assistant"}}],created:i,model:n,id:s.generationId,object:"chat.completion.chunk"}),p===void 0)throw new _e("The generated ID is undefined.");if(s.eventType==="stream-end")yield{choices:[{index:0,finish_reason:Ds(s.finishReason),logprobs:null,delta:{}}],created:i,model:n,id:p,object:"chat.completion.chunk"};else if(s.eventType==="text-generation"||s.eventType==="tool-calls-chunk"&&typeof s.text=="string")yield{choices:[{index:0,finish_reason:null,logprobs:null,delta:{content:s.text}}],created:i,model:n,id:p,object:"chat.completion.chunk"};else if(s.eventType==="tool-calls-chunk"){let c=s.toolCallDelta.index;if(typeof c!="number")throw new _e("Content block index is undefined.");let f=l.get(c);f===void 0&&(f=jt(),l.set(c,f)),yield{choices:[{index:0,finish_reason:null,logprobs:null,delta:{content:s.toolCallDelta.text,tool_calls:[{index:c,id:f,type:"function",function:{name:s.toolCallDelta.name,arguments:s.toolCallDelta.parameters}}]}}],created:i,model:n,id:p,object:"chat.completion.chunk"}}}}var rr=class extends me{async create(n){this.validateInputs(n),this.opts.baseURL&&Xe("The 'baseUrl' will be ignored by Cohere because it does not support this field.");let i=this.opts.apiKey??process.env.COHERE_API_KEY;if(i===void 0)throw new z("No Cohere API key detected. Please define an 'COHERE_API_KEY' environment variable or supply the API key using the 'apiKey' parameter.");let p=n.max_tokens??void 0,l=n.top_p??void 0,s=V7(n.stop),c=typeof n.temperature=="number"?n.temperature/2:void 0,f=U7(n.tools,n.tool_choice),{messages:h,lastUserMessage:b,toolResults:C}=q7(n.messages),x={maxTokens:p,message:b,chatHistory:h,model:n.model,stopSequences:s,temperature:c,p:l,toolResults:C,tools:f},E=new Rs.CohereClient({token:i});if(n.stream===!0){let O=Ze(),R=await E.chatStream(x);return F7(R,n.model,O)}else{let O=Ze(),R=await E.chat(x),q=R.toolCalls?.map(j=>({type:"function",id:jt(),function:{name:j.name,arguments:JSON.stringify(j.parameters)}})),F=B7(R.meta?.billedUnits);return{object:"chat.completion",choices:[{finish_reason:Ds(R.finishReason),index:0,logprobs:null,message:{role:"assistant",refusal:null,content:R.text,tool_calls:q}}],created:O,id:R.generationId??null,model:n.model,usage:F}}}};var Ie=require("@google/generative-ai");var $7=async(a,n)=>{if(a==null)return[];if(typeof a=="string")return[{text:`${n}${a}`}];{let i=a.map(async p=>{if(p.type==="text")return{text:`${n}${p.text}`};if(p.type==="image_url"){let l=await H1(p.image_url.url);return{inlineData:{mimeType:l.mimeType,data:l.content}}}else throw new z(`Invalid content part type: ${p.type}. Must be "text" or "image_url".`)});return Promise.all(i)}},Tp=a=>{switch(a){case"assistant":return"model";case"function":case"tool":case"user":case"system":return"user";default:throw new z(`Unexpected message role: ${a}`)}},K7=a=>{let n=a.tool_calls?a.tool_calls.map(i=>({functionCall:{name:i.function.name,args:JSON.parse(i.function.arguments)}})):[];return a.content!==null&&n.push({text:a.content}),{role:Tp(a.role),parts:n}},ir=async(a,n)=>{switch(a.role){case"tool":return{role:Tp(a.role),parts:[{functionResponse:{name:a.tool_call_id,response:JSON.parse($e(a.content))}}]};case"assistant":return K7(a);case"user":case"system":let i=a.role==="system"&&n?`System:
`:"";return{role:Tp(a.role),parts:await $7(a.content,i)};default:throw new z(`Unexpected message role: ${a.role}`)}},W7=async a=>{let n=structuredClone(a),i;if(n.length>0&&n[0].role==="system"){let l=n.shift();i=l!==void 0?await ir(l,!1):void 0}let p=[];for(let l of n)if(l.role==="system"||l.role==="user")p.push(await ir(l,!0));else if(l.role==="assistant"&&(p.push(await ir(l,!0)),l.tool_calls!==void 0))for(let s of l.tool_calls){let c=n.find(f=>f.role==="tool"&&f.tool_call_id===s.id);if(c===void 0)throw new Error(`Could not find tool message with the id: ${s.id}`);p.push(await ir(c,!0))}return{contents:p,systemInstruction:i}},Es=(a,n)=>{if(n?.some(i=>i.functionCall!==void 0))return"tool_calls";switch(a){case Ie.FinishReason.STOP:return"stop";case Ie.FinishReason.MAX_TOKENS:return"length";case Ie.FinishReason.SAFETY:return"content_filter";case Ie.FinishReason.OTHER:case Ie.FinishReason.FINISH_REASON_UNSPECIFIED:case Ie.FinishReason.RECITATION:return"stop";default:return"stop"}},Is=a=>{let n=a.content?.parts.filter(i=>i.functionCall!==void 0).map((i,p)=>({id:jt(),index:p,function:{arguments:JSON.stringify(i.functionCall.args),name:i.functionCall.name},type:"function"}));if(n!==void 0&&n.length>0)return n},H7=a=>Is(a)?.map((n,i)=>({...n,index:i})),G7=a=>({content:a.content?.parts.map(n=>n.text).join("")??null,role:"assistant",tool_calls:Is(a),refusal:null}),Os=a=>({completion_tokens:a.candidatesTokenCount,prompt_tokens:a.promptTokenCount,total_tokens:a.totalTokenCount}),J7=(a,n)=>{if(typeof a=="object")return{functionCallingConfig:{mode:Ie.FunctionCallingMode.ANY,allowedFunctionNames:[a.function.name]}};switch(a){case"auto":return{functionCallingConfig:{mode:Ie.FunctionCallingMode.AUTO}};case"none":return{functionCallingConfig:{mode:Ie.FunctionCallingMode.NONE}};case"required":return{functionCallingConfig:{mode:Ie.FunctionCallingMode.ANY}};default:return{functionCallingConfig:{mode:n&&n?.length>0?Ie.FunctionCallingMode.AUTO:Ie.FunctionCallingMode.NONE}}}},Y7=a=>{if(a!==void 0)return a.map(n=>({functionDeclarations:[{name:n.function.name,description:n.function.description,parameters:n.function.parameters}]}))},Z7=async(a,n,i)=>({id:null,object:"chat.completion",created:i,model:n,choices:a.response.candidates?.map(p=>({index:p.index,finish_reason:p.finishReason?Es(p.finishReason,p.content?.parts):"stop",message:G7(p),logprobs:null}))??[],usage:a.response.usageMetadata?Os(a.response.usageMetadata):void 0});async function*X7(a,n,i){for await(let p of a.stream){let l=p.text();yield{id:null,object:"chat.completion.chunk",created:i,model:n,choices:p.candidates?.map(s=>({index:s.index,finish_reason:s.finishReason?Es(s.finishReason,s.content?.parts):"stop",delta:{content:l,tool_calls:H7(s),role:"assistant"},logprobs:null}))??[],usage:p.usageMetadata?Os(p.usageMetadata):void 0}}}var pr=class extends me{async create(n){this.validateInputs(n);let i=this.opts.apiKey??process.env.GEMINI_API_KEY;if(i===void 0)throw new z("API key is required for Gemini, define GEMINI_API_KEY in your environment or specifty the apiKey option.");this.opts.baseURL&&Xe("The 'baseUrl' will be ignored by Gemini because it does not support this field.");let p=n.response_format?.type==="json_object"?"application/json":void 0,l=typeof n.stop=="string"?[n.stop]:n.stop,c=new Ie.GoogleGenerativeAI(i).getGenerativeModel({model:n.model,generationConfig:{maxOutputTokens:n.max_tokens??void 0,temperature:n.temperature??void 0,topP:n.top_p??void 0,stopSequences:l??void 0,candidateCount:n.n??void 0,responseMimeType:p}}),{contents:f,systemInstruction:h}=await W7(n.messages),b={contents:f,toolConfig:J7(n.tool_choice,n.tools),tools:Y7(n.tools),systemInstruction:h},C=Ze();if(n.stream){let x=await c.generateContentStream(b);return X7(x,n.model,C)}else{let x=await c.generateContent(b);return Z7(x,n.model,C)}}};var zs=e1(require("openai"),1);async function*Q7(a){for await(let n of a)yield n}var lr=class extends me{validateInputs(n){if(super.validateInputs(n),n.response_format?.type==="json_object"){if(n.stream)throw new z("Groq does not support streaming when the 'response_format' is 'json_object'.");if(n.stop!==null&&n.stop!==void 0)throw new z("Groq does not support the 'stop' parameter when the 'response_format' is 'json_object'.")}}async create(n){this.validateInputs(n);let i=this.opts.apiKey??process.env.GROQ_API_KEY,p=new zs.default({apiKey:i,baseURL:"https://api.groq.com/openai/v1"});if(i===void 0)throw new z("API key is required for Groq, define GROQ_API_KEY in your environment or specifty the apiKey option.");let{libretto:l,provider:s,messages:c,model:f,...h}=n,b=c.map(x=>x.role==="assistant"&&Array.isArray(x.content)&&x.content.length===1&&x.content[0].type==="text"&&typeof x.content[0].text=="string"&&!x.tool_calls?{...x,content:x.content[0].text}:x),C={model:f,messages:b,...h};if(C.stream){let x=await p.chat.completions.create(C);return Q7(x)}else return p.chat.completions.create(C)}};var xp=class{constructor(n){this.client=n}async create({file:n,purpose:i="fine-tune"}){let p=new FormData;return p.append("file",n),p.append("purpose",i),await this.client._request("post","v1/files",null,void 0,p)}async retrieve({fileId:n}){return await this.client._request("get",`v1/files/${n}`)}async list(){return await this.client._request("get","v1/files")}async delete({fileId:n}){return await this.client._request("delete",`v1/files/${n}`)}},Ms=xp;var Np=class{constructor(n){this.client=n}async create({model:n,trainingFiles:i,validationFiles:p=[],hyperparameters:l={training_steps:1800,learning_rate:1e-4},suffix:s=null,integrations:c=null}){return await this.client._request("post","v1/fine_tuning/jobs",{model:n,training_files:i,validation_files:p,hyperparameters:l,suffix:s,integrations:c})}async retrieve({jobId:n}){return await this.client._request("get",`v1/fine_tuning/jobs/${n}`,{})}async list(){return await this.client._request("get","v1/fine_tuning/jobs",{})}async cancel({jobId:n}){return await this.client._request("post",`v1/fine_tuning/jobs/${n}/cancel`,{})}},Vs=Np;var Hc="0.5.0",Gc=[429,500,502,503,504],Jc="https://api.mistral.ai",Yc=Promise.resolve(globalThis.fetch??Promise.resolve().then(()=>e1(k2(),1)).then(a=>a.default)),Wt=class extends Error{constructor(n){super(n),this.name="MistralAPIError"}};function Zc(a){let n=new AbortController;return a.forEach(i=>{i&&(i.addEventListener("abort",()=>{n.abort(i.reason)},{once:!0}),i.aborted&&n.abort(i.reason))}),n.signal}var qp=class{constructor(n=process.env.MISTRAL_API_KEY,i=Jc,p=5,l=120){this.endpoint=i,this.apiKey=n,this.maxRetries=p,this.timeout=l,this.endpoint.indexOf("inference.azure.com")&&(this.modelDefault="mistral"),this.files=new Ms(this),this.jobs=new Vs(this)}async _fetch(...n){return(await Yc)(...n)}_request=async function(n,i,p,l,s=null){let c=`${this.endpoint}/${i}`,f={method:n,headers:{"User-Agent":`mistral-client-js/${Hc}`,Accept:p?.stream?"text/event-stream":"application/json","Content-Type":"application/json",Authorization:`Bearer ${this.apiKey}`},signal:Zc([AbortSignal.timeout(this.timeout*1e3),l]),body:n!=="get"?s??JSON.stringify(p):null,timeout:this.timeout*1e3};s&&delete f.headers["Content-Type"];for(let h=0;h<this.maxRetries;h++)try{let b=await this._fetch(c,f);if(b.ok){if(p?.stream){if(typeof b.body.getReader>"u")return b.body;{let C=b.body.getReader();return async function*(){try{for(;;){let{done:E,value:O}=await C.read();if(E)return;yield O}}finally{C.releaseLock()}}()}}return await b.json()}else if(Gc.includes(b.status))console.debug(`Retrying request on response status: ${b.status}`,`Response: ${await b.text()}`,`Attempt: ${h+1}`),await new Promise(C=>setTimeout(C,Math.pow(2,h+1)*500));else throw new Wt(`HTTP error! status: ${b.status} Response: 
${await b.text()}`)}catch(b){if(console.error(`Request failed: ${b.message}`),b.name==="MistralAPIError"||h===this.maxRetries-1)throw b;await new Promise(C=>setTimeout(C,Math.pow(2,h+1)*500))}throw new Error("Max retries reached")};_makeChatCompletionRequest=function(n,i,p,l,s,c,f,h,b,C,x,E){if(!n&&!this.modelDefault)throw new Wt("You must provide a model name");return{model:n??this.modelDefault,messages:i,tools:p??void 0,temperature:l??void 0,max_tokens:s??void 0,top_p:c??void 0,random_seed:f??void 0,stream:h??void 0,safe_prompt:(b||C)??void 0,tool_choice:x??void 0,response_format:E??void 0}};_makeCompletionRequest=function(n,i,p,l,s,c,f,h,b){if(!n&&!this.modelDefault)throw new Wt("You must provide a model name");return{model:n??this.modelDefault,prompt:i,suffix:p??void 0,temperature:l??void 0,max_tokens:s??void 0,top_p:c??void 0,random_seed:f??void 0,stop:h??void 0,stream:b??void 0}};listModels=async function(){return await this._request("get","v1/models")};chat=async function({model:n,messages:i,tools:p,temperature:l,maxTokens:s,topP:c,randomSeed:f,safeMode:h,safePrompt:b,toolChoice:C,responseFormat:x},{signal:E}={}){let O=this._makeChatCompletionRequest(n,i,p,l,s,c,f,!1,h,b,C,x);return await this._request("post","v1/chat/completions",O,E)};chatStream=async function*({model:n,messages:i,tools:p,temperature:l,maxTokens:s,topP:c,randomSeed:f,safeMode:h,safePrompt:b,toolChoice:C,responseFormat:x},{signal:E}={}){let O=this._makeChatCompletionRequest(n,i,p,l,s,c,f,!0,h,b,C,x),R=await this._request("post","v1/chat/completions",O,E),q="",F=new TextDecoder;for await(let U of R){q+=F.decode(U,{stream:!0});let j;for(;(j=q.indexOf(`
`))!==-1;){let Q=q.substring(0,j);if(q=q.substring(j+1),Q.startsWith("data:")){let ee=Q.substring(6).trim();ee!=="[DONE]"&&(yield JSON.parse(ee))}}}};embeddings=async function({model:n,input:i}){let p={model:n,input:i};return await this._request("post","v1/embeddings",p)};completion=async function({model:n,prompt:i,suffix:p,temperature:l,maxTokens:s,topP:c,randomSeed:f,stop:h},{signal:b}={}){let C=this._makeCompletionRequest(n,i,p,l,s,c,f,h,!1);return await this._request("post","v1/fim/completions",C,b)};completionStream=async function*({model:n,prompt:i,suffix:p,temperature:l,maxTokens:s,topP:c,randomSeed:f,stop:h},{signal:b}={}){let C=this._makeCompletionRequest(n,i,p,l,s,c,f,h,!0),x=await this._request("post","v1/fim/completions",C,b),E="",O=new TextDecoder;for await(let R of x){E+=O.decode(R,{stream:!0});let q;for(;(q=E.indexOf(`
`))!==-1;){let F=E.substring(0,q);if(E=E.substring(q+1),F.startsWith("data:")){let U=F.substring(6).trim();U!=="[DONE]"&&(yield JSON.parse(U))}}}}},C2=qp;var Xc=(a,n)=>{for(let i of a)for(let p of i?.tool_calls??[])if(p.id===n)return p.function.name;throw new z(`Tool call with id ${n} not found in messages`)},Qc=a=>a.map(n=>{let i=$e(n.content);if(n.role==="tool")return{name:Xc(a,n.tool_call_id),role:"tool",content:i,tool_call_id:n.tool_call_id};if(n.role==="system")return{role:n.role,content:i};if(n.role==="assistant")return{role:n.role,content:i,tool_calls:n.tool_calls??null};if(n.role==="user"){let p=typeof n.content=="string"?n.content:n.content?.map(l=>l.text).join(" ");return{role:n.role,content:p}}else throw new Error("Function messages are deprecated.")}),Ht=(a,n)=>{if(!a)return;let i=a.filter(p=>n===void 0?!0:p.function.name===n);if(n!==void 0&&i.length===0)throw new z(`Tool with name ${n} not found in tool list`);return i.map(p=>({type:"function",function:{name:p.function.name,description:p.function.description??"",parameters:p.function.parameters??{}}}))},eh=(a,n)=>{if(typeof a=="object")return{toolChoice:"any",tools:Ht(n,a.function.name)};switch(a){case"auto":return{toolChoice:"auto",tools:Ht(n)};case"none":return{toolChoice:"none",tools:Ht(n)};case"required":return{toolChoice:"any",tools:Ht(n)};case void 0:return{toolChoice:void 0,tools:Ht(n)};default:throw new z(`Invalid tool choice: ${a}`)}},S2=a=>{if(a)return a.map(n=>({id:n.id,type:"function",function:{name:n.function.name,arguments:n.function.arguments}}))},ah=a=>{if(a)return S2(a)?.map((n,i)=>({...n,index:i}))};async function*th(a){for await(let n of a)yield{id:n.id,created:n.created,object:n.object,model:n.model,choices:n.choices.map(i=>({index:i.index,delta:{role:"assistant",content:i.delta.content,tool_calls:ah(i.delta.tool_calls)},finish_reason:i.finish_reason,logprobs:null})),usage:n.usage??void 0}}var nh=a=>({id:a.id,created:a.created,object:a.object,model:a.model,choices:a.choices.map(n=>({index:n.index,message:{role:"assistant",refusal:null,content:n.message.content,tool_calls:S2(n.message.tool_calls)},finish_reason:n.finish_reason,logprobs:null})),usage:a.usage}),cr=class extends me{async create(n){this.validateInputs(n);let i=this.opts.apiKey??process.env.MISTRAL_API_KEY;if(i===void 0)throw new z("API key is required for Mistral, define MISTRAL_API_KEY in your environment or specifty the apiKey option.");let p=this.opts.baseURL??void 0,l=new C2(i,p),s=!!n.tools&&n.tools.length>0,c=n.response_format?.type==="json_object"&&!s?{type:"json_object"}:void 0,f=typeof n.temperature=="number"?n.temperature/2:void 0,{toolChoice:h,tools:b}=eh(n.tool_choice,n.tools),C=Qc(n.messages),x={model:n.model,messages:C,temperature:f,maxTokens:n.max_tokens??void 0,topP:n.top_p??void 0,responseFormat:c,toolChoice:h,tools:b};if(n.stream){let E=l.chatStream(x);return th(E)}else{let E=await l.chat(x);return nh(E)}}};var T2=e1(require("openai"),1);async function*rh(a){for await(let n of a)yield n}var hr=class extends me{constructor(){super(...arguments);this.determineAPIKey=()=>this.opts.apiKey?this.opts.apiKey:process.env.OPENAI_COMPATIBLE_API_KEY?process.env.OPENAI_COMPATIBLE_API_KEY:""}validateInputs(i){if(super.validateInputs(i),!this.opts.baseURL)throw new z("No baseURL option provided for openai compatible provider. You must define a baseURL option to use a generic openai compatible API with Token.js")}async create(i){this.validateInputs(i);let p=this.determineAPIKey(),l=new T2.default({...this.opts,apiKey:p}),s=i;if(delete s.provider,i.stream){let c=await l.chat.completions.create(i);return rh(c)}else return l.chat.completions.create(i)}};var o0=e1(nt(),1);async function*wf(a){for await(let n of a)yield n}var Pr=class extends me{async create(n){this.validateInputs(n);let i=this.opts.apiKey??process.env.OPENAI_API_KEY,p=new o0.OpenAI({...this.opts,apiKey:i}),l=n;if(delete l.provider,n.stream){let s=await p.chat.completions.create(n);return wf(s)}else return p.chat.completions.create(n)}};var d0=e1(require("openai"),1);var Rr=class extends me{validateInputs(n){super.validateInputs(n)}async create(n){this.validateInputs(n),console.log("open router");let i=this.opts.apiKey??process.env.OPENROUTER_API_KEY,p=new d0.default({apiKey:i,baseURL:"https://openrouter.ai/api/v1",defaultHeaders:{"HTTP-Referer":"docs.tokenjs.ai","X-Title":"Token.js"}});if(i===void 0)throw new z("API key is required for OpenRouter, define OPENROUTER_API_KEY in your environment or specifty the apiKey option.");return p.chat.completions.create(n)}};var s0=e1(require("openai"),1);var bf="perplexity/";async function*_f(a){for await(let n of a)yield n}var Dr=class extends me{async create(n){this.validateInputs(n);let i=this.opts.apiKey??process.env.PERPLEXITY_API_KEY;if(i===void 0)throw new z("API key is required for Perplexity, define PERPLEXITY_API_KEY in your environment or specifty the apiKey option.");let p=new s0.default({...this.opts,baseURL:"https://api.perplexity.ai",apiKey:i}),l=n.model.replace(bf,""),s=n.temperature===2?2-Number.EPSILON:n.temperature,c={...n,model:l,temperature:s};if(c.stream){let f=await p.chat.completions.create(c);return _f(f)}else return p.chat.completions.create(c)}};var m0={openai:a=>new Pr(a,P.openai.models,P.openai.supportsJSON,P.openai.supportsImages,P.openai.supportsToolCalls,P.openai.supportsN,P.openai.supportsStreaming),anthropic:a=>new tr(a,P.anthropic.models,P.anthropic.supportsJSON,P.anthropic.supportsImages,P.anthropic.supportsToolCalls,P.anthropic.supportsN,P.anthropic.supportsStreaming),gemini:a=>new pr(a,P.gemini.models,P.gemini.supportsJSON,P.gemini.supportsImages,P.gemini.supportsToolCalls,P.gemini.supportsN,P.gemini.supportsStreaming),cohere:a=>new rr(a,P.cohere.models,P.cohere.supportsJSON,P.cohere.supportsImages,P.cohere.supportsToolCalls,P.cohere.supportsN,P.cohere.supportsStreaming),bedrock:a=>new nr(a,P.bedrock.models,P.bedrock.supportsJSON,P.bedrock.supportsImages,P.bedrock.supportsToolCalls,P.bedrock.supportsN,P.bedrock.supportsStreaming),mistral:a=>new cr(a,P.mistral.models,P.mistral.supportsJSON,P.mistral.supportsImages,P.mistral.supportsToolCalls,P.mistral.supportsN,P.mistral.supportsStreaming),groq:a=>new lr(a,P.groq.models,P.groq.supportsJSON,P.groq.supportsImages,P.groq.supportsToolCalls,P.groq.supportsN,P.groq.supportsStreaming),ai21:a=>new Hn(a,P.ai21.models,P.ai21.supportsJSON,P.ai21.supportsImages,P.ai21.supportsToolCalls,P.ai21.supportsN,P.ai21.supportsStreaming),perplexity:a=>new Dr(a,P.perplexity.models,P.perplexity.supportsJSON,P.perplexity.supportsImages,P.perplexity.supportsToolCalls,P.perplexity.supportsN,P.perplexity.supportsStreaming),openrouter:a=>new Rr(a,P.openrouter.models,P.openrouter.supportsJSON,P.openrouter.supportsImages,P.openrouter.supportsToolCalls,P.openrouter.supportsN,P.openrouter.supportsStreaming),"openai-compatible":a=>new hr(a,P.openrouter.models,P.openrouter.supportsJSON,P.openrouter.supportsImages,P.openrouter.supportsToolCalls,P.openrouter.supportsN,P.openrouter.supportsStreaming)},h0=(a,n)=>{for(let i in m0)if(a===i)return m0[i](n);throw new Error("Could not find provider for model. Are you sure the model name is correct and the provider is supported?")},Ze=()=>Math.floor(new Date().getTime()/1e3),kf=async a=>{let i=await(await fetch(a)).arrayBuffer();return btoa(String.fromCharCode.apply(null,new Uint8Array(i)))},Cf=a=>{let p=new URL(a).pathname.split(".").pop();return(0,c0.lookup)(p)},Sf=a=>{try{let n=new URL(a);return n.protocol==="http:"||n.protocol==="https:"}catch{return!1}},Tf=a=>/^data:image\/[a-zA-Z]+;base64,/.test(a),H1=async a=>{if(Sf(a)){let n=await kf(a),i=Cf(a);if(i===null)throw new Error(`Failed to get the mime type for the URL: ${a}`);if(!f0(i))throw new z(`Unsupported MIME type: ${i}`);return{content:n,mimeType:i}}else{if(Tf(a))return xf(a);throw new z("Invalid image URL.")}},f0=a=>a==="image/jpeg"||a==="image/png"||a==="image/gif"||a==="image/webp",xf=a=>{let n=a.split(";base64,");if(n.length===2){let i=n[0].replace("data:","").toLowerCase();if(!f0(i))throw new z(`Unsupported MIME type: ${i}`);return{content:n[1],mimeType:i}}else throw new z("Invalid image URL.")},Xe=a=>{console.warn(u0.default.yellow.bold(`Warning: ${a}
`))},Ns=(a,n,i)=>["mistral","anthropic","cohere","bedrock"].includes(n)||n==="bedrock"&&(i.startsWith("amazon")||i.startsWith("anthropic")||i.startsWith("cohere")||i.startsWith("mistral")||i.startsWith("meta"))?a/2:a,Ss=a=>a&&typeof a=="object"&&a.constructor===Object&&Object.keys(a).length===0;var $e=a=>a?(typeof a=="string"?a:a.map(n=>n.text).join(`
`))??"":"";var yl=class{constructor(n){this.opts=n}create(n){return h0(n.provider,this.opts).create(n)}},Er=class{constructor(n){this.completions=new yl(n)}};var wl=class a{static{this.extendedModelList=[]}constructor({...n}={}){this.opts=n,this.chat=new Er(n)}extendedModelExist(n,i){return a.extendedModelList.some(p=>p.provider===n&&p.name===i)}extendModelList(n,i,p){if(this.extendedModelExist(n,i))return this;if(Array.isArray(P[n].models)&&P[n].models.includes(i))throw new z(`You tried to add the following custom model name: "${i}", for provider: "${n}". But it conflicts with an existing pre-defined model name. Please try again using different name e.g.: "${i}-custom"`);let l=P[n];l.models=[...P[n].models,i];let s=(c,f)=>typeof c=="boolean"?c:c.includes(f);return typeof p=="string"?(s(l.supportsJSON,p)&&(l.supportsJSON=[...l.supportsJSON,i]),s(l.supportsStreaming,p)&&(l.supportsStreaming=[...l.supportsStreaming,i]),s(l.supportsImages,p)&&(l.supportsImages=[...l.supportsImages,i]),s(l.supportsToolCalls,p)&&(l.supportsToolCalls=[...l.supportsToolCalls,i])):(p.json&&(l.supportsJSON=[...l.supportsJSON,i]),p.streaming&&(l.supportsStreaming=[...l.supportsStreaming,i]),p.toolCalls&&(l.supportsToolCalls=[...l.supportsToolCalls,i]),p.images&&(l.supportsImages=[...l.supportsImages,i])),a.extendedModelList.push({provider:n,name:i,featureSupport:p}),this}};0&&(module.exports={TableDisplayNames,TokenJS,models});
/*! Bundled license information:

lodash/lodash.js:
  (**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   *)
*/
